
SENSORS_PRESSURE_DEMO1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00802000  000031ba  0000324e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  008020ec  008020ec  0000333a  2**0
                  ALLOC
  3 .stab         00004dc4  00000000  00000000  0000333c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000133d  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000943d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000a68  00000000  00000000  00009470  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0002eefc  00000000  00000000  00009ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006c6c  00000000  00000000  00038dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000186b9  00000000  00000000  0003fa40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000028a8  00000000  00000000  000580fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00033547  00000000  00000000  0005a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00018c98  00000000  00000000  0008deeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b60  00000000  00000000  000a6b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00010c6b  00000000  00000000  000a76e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c1       	rjmp	.+756    	; 0x2f6 <__ctors_end>
       2:	00 00       	nop
       4:	9e c1       	rjmp	.+828    	; 0x342 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c1       	rjmp	.+824    	; 0x342 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c1       	rjmp	.+820    	; 0x342 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c1       	rjmp	.+816    	; 0x342 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c1       	rjmp	.+812    	; 0x342 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c1       	rjmp	.+808    	; 0x342 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c1       	rjmp	.+804    	; 0x342 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c1       	rjmp	.+800    	; 0x342 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c1       	rjmp	.+796    	; 0x342 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c1       	rjmp	.+792    	; 0x342 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c1       	rjmp	.+788    	; 0x342 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c1       	rjmp	.+784    	; 0x342 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_13>
      38:	84 c1       	rjmp	.+776    	; 0x342 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c1       	rjmp	.+772    	; 0x342 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c1       	rjmp	.+768    	; 0x342 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c1       	rjmp	.+764    	; 0x342 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c1       	rjmp	.+760    	; 0x342 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c1       	rjmp	.+756    	; 0x342 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c1       	rjmp	.+752    	; 0x342 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c1       	rjmp	.+748    	; 0x342 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c1       	rjmp	.+744    	; 0x342 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c1       	rjmp	.+740    	; 0x342 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c1       	rjmp	.+736    	; 0x342 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c1       	rjmp	.+732    	; 0x342 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c1       	rjmp	.+728    	; 0x342 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c1       	rjmp	.+724    	; 0x342 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c1       	rjmp	.+720    	; 0x342 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c1       	rjmp	.+716    	; 0x342 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c1       	rjmp	.+712    	; 0x342 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c1       	rjmp	.+708    	; 0x342 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c1       	rjmp	.+704    	; 0x342 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c1       	rjmp	.+700    	; 0x342 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c1       	rjmp	.+696    	; 0x342 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c1       	rjmp	.+692    	; 0x342 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c1       	rjmp	.+688    	; 0x342 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c1       	rjmp	.+684    	; 0x342 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c1       	rjmp	.+680    	; 0x342 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c1       	rjmp	.+676    	; 0x342 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c1       	rjmp	.+672    	; 0x342 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c1       	rjmp	.+668    	; 0x342 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c1       	rjmp	.+664    	; 0x342 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c1       	rjmp	.+660    	; 0x342 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c1       	rjmp	.+656    	; 0x342 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c1       	rjmp	.+652    	; 0x342 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_46>
      bc:	42 c1       	rjmp	.+644    	; 0x342 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c1       	rjmp	.+640    	; 0x342 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c1       	rjmp	.+636    	; 0x342 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c1       	rjmp	.+632    	; 0x342 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c1       	rjmp	.+628    	; 0x342 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c1       	rjmp	.+624    	; 0x342 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c1       	rjmp	.+620    	; 0x342 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c1       	rjmp	.+616    	; 0x342 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c1       	rjmp	.+612    	; 0x342 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c1       	rjmp	.+608    	; 0x342 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2e c1       	rjmp	.+604    	; 0x342 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2c c1       	rjmp	.+600    	; 0x342 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2a c1       	rjmp	.+596    	; 0x342 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	28 c1       	rjmp	.+592    	; 0x342 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	26 c1       	rjmp	.+588    	; 0x342 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	24 c1       	rjmp	.+584    	; 0x342 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	22 c1       	rjmp	.+580    	; 0x342 <__bad_interrupt>
      fe:	00 00       	nop
     100:	20 c1       	rjmp	.+576    	; 0x342 <__bad_interrupt>
     102:	00 00       	nop
     104:	1e c1       	rjmp	.+572    	; 0x342 <__bad_interrupt>
     106:	00 00       	nop
     108:	1c c1       	rjmp	.+568    	; 0x342 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1a c1       	rjmp	.+564    	; 0x342 <__bad_interrupt>
     10e:	00 00       	nop
     110:	18 c1       	rjmp	.+560    	; 0x342 <__bad_interrupt>
     112:	00 00       	nop
     114:	16 c1       	rjmp	.+556    	; 0x342 <__bad_interrupt>
     116:	00 00       	nop
     118:	14 c1       	rjmp	.+552    	; 0x342 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	12 c1       	rjmp	.+548    	; 0x342 <__bad_interrupt>
     11e:	00 00       	nop
     120:	10 c1       	rjmp	.+544    	; 0x342 <__bad_interrupt>
     122:	00 00       	nop
     124:	0e c1       	rjmp	.+540    	; 0x342 <__bad_interrupt>
     126:	00 00       	nop
     128:	0c c1       	rjmp	.+536    	; 0x342 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	0a c1       	rjmp	.+532    	; 0x342 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_76>
     134:	06 c1       	rjmp	.+524    	; 0x342 <__bad_interrupt>
     136:	00 00       	nop
     138:	04 c1       	rjmp	.+520    	; 0x342 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	02 c1       	rjmp	.+516    	; 0x342 <__bad_interrupt>
     13e:	00 00       	nop
     140:	00 c1       	rjmp	.+512    	; 0x342 <__bad_interrupt>
     142:	00 00       	nop
     144:	fe c0       	rjmp	.+508    	; 0x342 <__bad_interrupt>
     146:	00 00       	nop
     148:	fc c0       	rjmp	.+504    	; 0x342 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fa c0       	rjmp	.+500    	; 0x342 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f8 c0       	rjmp	.+496    	; 0x342 <__bad_interrupt>
     152:	00 00       	nop
     154:	f6 c0       	rjmp	.+492    	; 0x342 <__bad_interrupt>
     156:	00 00       	nop
     158:	f4 c0       	rjmp	.+488    	; 0x342 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f2 c0       	rjmp	.+484    	; 0x342 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f0 c0       	rjmp	.+480    	; 0x342 <__bad_interrupt>
     162:	00 00       	nop
     164:	ee c0       	rjmp	.+476    	; 0x342 <__bad_interrupt>
     166:	00 00       	nop
     168:	ec c0       	rjmp	.+472    	; 0x342 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ea c0       	rjmp	.+468    	; 0x342 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e8 c0       	rjmp	.+464    	; 0x342 <__bad_interrupt>
     172:	00 00       	nop
     174:	e6 c0       	rjmp	.+460    	; 0x342 <__bad_interrupt>
     176:	00 00       	nop
     178:	e4 c0       	rjmp	.+456    	; 0x342 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e2 c0       	rjmp	.+452    	; 0x342 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e0 c0       	rjmp	.+448    	; 0x342 <__bad_interrupt>
     182:	00 00       	nop
     184:	de c0       	rjmp	.+444    	; 0x342 <__bad_interrupt>
     186:	00 00       	nop
     188:	dc c0       	rjmp	.+440    	; 0x342 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	da c0       	rjmp	.+436    	; 0x342 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d8 c0       	rjmp	.+432    	; 0x342 <__bad_interrupt>
     192:	00 00       	nop
     194:	d6 c0       	rjmp	.+428    	; 0x342 <__bad_interrupt>
     196:	00 00       	nop
     198:	d4 c0       	rjmp	.+424    	; 0x342 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d2 c0       	rjmp	.+420    	; 0x342 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d1 c0       	rjmp	.+418    	; 0x344 <__vector_104>
     1a2:	00 00       	nop
     1a4:	ce c0       	rjmp	.+412    	; 0x342 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cc c0       	rjmp	.+408    	; 0x342 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_107>
     1b0:	c8 c0       	rjmp	.+400    	; 0x342 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c6 c0       	rjmp	.+396    	; 0x342 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c4 c0       	rjmp	.+392    	; 0x342 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c2 c0       	rjmp	.+388    	; 0x342 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c0 c0       	rjmp	.+384    	; 0x342 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	be c0       	rjmp	.+380    	; 0x342 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bc c0       	rjmp	.+376    	; 0x342 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	ba c0       	rjmp	.+372    	; 0x342 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b8 c0       	rjmp	.+368    	; 0x342 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b6 c0       	rjmp	.+364    	; 0x342 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b4 c0       	rjmp	.+360    	; 0x342 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b2 c0       	rjmp	.+356    	; 0x342 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b0 c0       	rjmp	.+352    	; 0x342 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ae c0       	rjmp	.+348    	; 0x342 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ac c0       	rjmp	.+344    	; 0x342 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	aa c0       	rjmp	.+340    	; 0x342 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a8 c0       	rjmp	.+336    	; 0x342 <__bad_interrupt>
	...

000001f4 <__c.2006>:
     1f4:	6e 61 6e 00                                         nan.

000001f8 <__c.2004>:
     1f8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     208:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     218:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     228:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     238:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     248:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     258:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     268:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     278:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     288:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     298:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2a8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2b8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2c8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2d8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2e8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002f6 <__ctors_end>:
     2f6:	11 24       	eor	r1, r1
     2f8:	1f be       	out	0x3f, r1	; 63
     2fa:	cf ef       	ldi	r28, 0xFF	; 255
     2fc:	df e3       	ldi	r29, 0x3F	; 63
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	cd bf       	out	0x3d, r28	; 61
     302:	00 e0       	ldi	r16, 0x00	; 0
     304:	0c bf       	out	0x3c, r16	; 60
     306:	18 be       	out	0x38, r1	; 56
     308:	19 be       	out	0x39, r1	; 57
     30a:	1a be       	out	0x3a, r1	; 58
     30c:	1b be       	out	0x3b, r1	; 59

0000030e <__do_copy_data>:
     30e:	10 e2       	ldi	r17, 0x20	; 32
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	ea eb       	ldi	r30, 0xBA	; 186
     316:	f1 e3       	ldi	r31, 0x31	; 49
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	ac 3e       	cpi	r26, 0xEC	; 236
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>
     328:	1b be       	out	0x3b, r1	; 59

0000032a <__do_clear_bss>:
     32a:	21 e2       	ldi	r18, 0x21	; 33
     32c:	ac ee       	ldi	r26, 0xEC	; 236
     32e:	b0 e2       	ldi	r27, 0x20	; 32
     330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
     332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
     334:	aa 32       	cpi	r26, 0x2A	; 42
     336:	b2 07       	cpc	r27, r18
     338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
     33a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <main>
     33e:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <_exit>

00000342 <__bad_interrupt>:
     342:	5e ce       	rjmp	.-836    	; 0x0 <__vectors>

00000344 <__vector_104>:
	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
}
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	08 b6       	in	r0, 0x38	; 56
     350:	0f 92       	push	r0
     352:	18 be       	out	0x38, r1	; 56
     354:	09 b6       	in	r0, 0x39	; 57
     356:	0f 92       	push	r0
     358:	19 be       	out	0x39, r1	; 57
     35a:	0b b6       	in	r0, 0x3b	; 59
     35c:	0f 92       	push	r0
     35e:	1b be       	out	0x3b, r1	; 59
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
     378:	e0 91 ec 20 	lds	r30, 0x20EC
     37c:	f0 91 ed 20 	lds	r31, 0x20ED
     380:	30 97       	sbiw	r30, 0x00	; 0
     382:	61 f0       	breq	.+24     	; 0x39c <__vector_104+0x58>
     384:	a0 ea       	ldi	r26, 0xA0	; 160
     386:	b6 e0       	ldi	r27, 0x06	; 6
     388:	18 96       	adiw	r26, 0x08	; 8
     38a:	8c 91       	ld	r24, X
     38c:	82 ff       	sbrs	r24, 2
     38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_104+0x58>
     390:	80 91 ee 20 	lds	r24, 0x20EE
     394:	90 91 ef 20 	lds	r25, 0x20EF
     398:	19 95       	eicall
     39a:	23 c0       	rjmp	.+70     	; 0x3e2 <__vector_104+0x9e>
     39c:	e0 91 f0 20 	lds	r30, 0x20F0
     3a0:	f0 91 f1 20 	lds	r31, 0x20F1
     3a4:	30 97       	sbiw	r30, 0x00	; 0
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <__vector_104+0x7c>
     3a8:	a0 ea       	ldi	r26, 0xA0	; 160
     3aa:	b6 e0       	ldi	r27, 0x06	; 6
     3ac:	18 96       	adiw	r26, 0x08	; 8
     3ae:	8c 91       	ld	r24, X
     3b0:	83 ff       	sbrs	r24, 3
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__vector_104+0x7c>
     3b4:	80 91 f2 20 	lds	r24, 0x20F2
     3b8:	90 91 f3 20 	lds	r25, 0x20F3
     3bc:	19 95       	eicall
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <__vector_104+0x9e>
     3c0:	e0 91 f4 20 	lds	r30, 0x20F4
     3c4:	f0 91 f5 20 	lds	r31, 0x20F5
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	59 f0       	breq	.+22     	; 0x3e2 <__vector_104+0x9e>
     3cc:	a0 ea       	ldi	r26, 0xA0	; 160
     3ce:	b6 e0       	ldi	r27, 0x06	; 6
     3d0:	18 96       	adiw	r26, 0x08	; 8
     3d2:	8c 91       	ld	r24, X
     3d4:	84 ff       	sbrs	r24, 4
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <__vector_104+0x9e>
     3d8:	80 91 f6 20 	lds	r24, 0x20F6
     3dc:	90 91 f7 20 	lds	r25, 0x20F7
     3e0:	19 95       	eicall
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	f6 e0       	ldi	r31, 0x06	; 6
     3e8:	84 87       	std	Z+12, r24	; 0x0c
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	bf 91       	pop	r27
     3f0:	af 91       	pop	r26
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	7f 91       	pop	r23
     3f8:	6f 91       	pop	r22
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0b be       	out	0x3b, r0	; 59
     406:	0f 90       	pop	r0
     408:	09 be       	out	0x39, r0	; 57
     40a:	0f 90       	pop	r0
     40c:	08 be       	out	0x38, r0	; 56
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <sensor_board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     418:	43 e0       	ldi	r20, 0x03	; 3
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	64 e0       	ldi	r22, 0x04	; 4
     41e:	80 ea       	ldi	r24, 0xA0	; 160
     420:	96 e0       	ldi	r25, 0x06	; 6
     422:	59 d0       	rcall	.+178    	; 0x4d6 <ioport_configure_port_pin>
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	68 e0       	ldi	r22, 0x08	; 8
     42a:	80 ea       	ldi	r24, 0xA0	; 160
     42c:	96 e0       	ldi	r25, 0x06	; 6
     42e:	53 d0       	rcall	.+166    	; 0x4d6 <ioport_configure_port_pin>
#elif (EXT_BOARD == SENSORS_XPLAINED_BREADBOARD)
	gpio_configure_pin(SENSOR_BOARD_PIN4, PIN_INPUT_FLAGS);
#endif

	/* Global Interrupt Disable */
	cpu_irq_disable();
     430:	f8 94       	cli

	/* Initialize interrupt vector table support. */
	irq_initialize_vectors();
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	e0 ea       	ldi	r30, 0xA0	; 160
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	82 83       	std	Z+2, r24	; 0x02

	/* Global Interrupt Enable */
	cpu_irq_enable();
     43a:	78 94       	sei
     43c:	08 95       	ret

0000043e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	80 93 70 00 	sts	0x0070, r24
     444:	80 93 71 00 	sts	0x0071, r24
     448:	80 93 72 00 	sts	0x0072, r24
     44c:	80 93 73 00 	sts	0x0073, r24
     450:	80 93 74 00 	sts	0x0074, r24
     454:	80 93 75 00 	sts	0x0075, r24
     458:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	81 e4       	ldi	r24, 0x41	; 65
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 af 0a 	call	0x155e	; 0x155e <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     466:	e0 e5       	ldi	r30, 0x50	; 80
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     46c:	84 fd       	sbrc	r24, 4
     46e:	19 c0       	rjmp	.+50     	; 0x4a2 <sysclk_init+0x64>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     470:	81 81       	ldd	r24, Z+1	; 0x01
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     472:	81 fd       	sbrc	r24, 1
     474:	09 c0       	rjmp	.+18     	; 0x488 <sysclk_init+0x4a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     476:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     478:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     47a:	90 81       	ld	r25, Z
     47c:	92 60       	ori	r25, 0x02	; 2
     47e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     480:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     482:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     484:	81 ff       	sbrs	r24, 1
     486:	fd cf       	rjmp	.-6      	; 0x482 <sysclk_init+0x44>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     488:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     48a:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     48c:	e0 e5       	ldi	r30, 0x50	; 80
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	98 e8       	ldi	r25, 0x88	; 136
     492:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     494:	90 81       	ld	r25, Z
     496:	90 61       	ori	r25, 0x10	; 16
     498:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     49a:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     49c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     49e:	84 ff       	sbrs	r24, 4
     4a0:	fd cf       	rjmp	.-6      	; 0x49c <sysclk_init+0x5e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     4a2:	64 e0       	ldi	r22, 0x04	; 4
     4a4:	80 e4       	ldi	r24, 0x40	; 64
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 af 0a 	call	0x155e	; 0x155e <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4ac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     4ae:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     4b0:	e0 e5       	ldi	r30, 0x50	; 80
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	90 81       	ld	r25, Z
     4b6:	9e 7f       	andi	r25, 0xFE	; 254
     4b8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ba:	8f bf       	out	0x3f, r24	; 63
     4bc:	08 95       	ret

000004be <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4be:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     4c0:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     4c2:	e8 2f       	mov	r30, r24
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	e0 59       	subi	r30, 0x90	; 144
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ca:	60 95       	com	r22
     4cc:	80 81       	ld	r24, Z
     4ce:	68 23       	and	r22, r24
     4d0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d2:	9f bf       	out	0x3f, r25	; 63
     4d4:	08 95       	ret

000004d6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     4da:	fc 01       	movw	r30, r24
     4dc:	70 96       	adiw	r30, 0x10	; 16
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     4e2:	c6 2f       	mov	r28, r22
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	de 01       	movw	r26, r28
     4e8:	02 2e       	mov	r0, r18
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <ioport_configure_port_pin+0x1a>
     4ec:	b5 95       	asr	r27
     4ee:	a7 95       	ror	r26
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <ioport_configure_port_pin+0x16>
     4f4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4f6:	50 83       	st	Z, r21
     4f8:	2f 5f       	subi	r18, 0xFF	; 255
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     4fe:	28 30       	cpi	r18, 0x08	; 8
     500:	31 05       	cpc	r19, r1
     502:	89 f7       	brne	.-30     	; 0x4e6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     504:	40 ff       	sbrs	r20, 0
     506:	0a c0       	rjmp	.+20     	; 0x51c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     508:	41 ff       	sbrs	r20, 1
     50a:	03 c0       	rjmp	.+6      	; 0x512 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     50c:	fc 01       	movw	r30, r24
     50e:	65 83       	std	Z+5, r22	; 0x05
     510:	02 c0       	rjmp	.+4      	; 0x516 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     512:	fc 01       	movw	r30, r24
     514:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     516:	fc 01       	movw	r30, r24
     518:	61 83       	std	Z+1, r22	; 0x01
     51a:	02 c0       	rjmp	.+4      	; 0x520 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     51c:	fc 01       	movw	r30, r24
     51e:	62 83       	std	Z+2, r22	; 0x02
	}
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <bmp_ioctl>:
 * @param   cmd     Command to execute
 * @param   arg     Argument for command (varies)
 * @return  bool    true if the call succeeds, else false is returned.
 */
static bool bmp_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
	sensor_hal_t *const hal = sensor->hal;
     534:	fc 01       	movw	r30, r24
     536:	00 81       	ld	r16, Z
     538:	11 81       	ldd	r17, Z+1	; 0x01
	bool status = false;

	switch (cmd) {
     53a:	60 31       	cpi	r22, 0x10	; 16
     53c:	99 f5       	brne	.+102    	; 0x5a4 <bmp_ioctl+0x7e>
 */
static bool bmp_set_state(sensor_hal_t *hal, sensor_state_t state)
{
	/* \todo  Handle Sleep & Suspend states. */

	switch (state) {
     53e:	fa 01       	movw	r30, r20
     540:	80 81       	ld	r24, Z
     542:	86 30       	cpi	r24, 0x06	; 6
     544:	28 f4       	brcc	.+10     	; 0x550 <bmp_ioctl+0x2a>
     546:	84 30       	cpi	r24, 0x04	; 4
     548:	48 f4       	brcc	.+18     	; 0x55c <bmp_ioctl+0x36>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	49 f5       	brne	.+82     	; 0x5a0 <bmp_ioctl+0x7a>
     54e:	09 c0       	rjmp	.+18     	; 0x562 <bmp_ioctl+0x3c>
     550:	87 30       	cpi	r24, 0x07	; 7
     552:	79 f0       	breq	.+30     	; 0x572 <bmp_ioctl+0x4c>
     554:	50 f0       	brcs	.+20     	; 0x56a <bmp_ioctl+0x44>
     556:	8b 30       	cpi	r24, 0x0B	; 11
     558:	19 f5       	brne	.+70     	; 0x5a0 <bmp_ioctl+0x7a>
     55a:	0f c0       	rjmp	.+30     	; 0x57a <bmp_ioctl+0x54>
		return false;

	case SENSOR_STATE_LOWEST_POWER:
	case SENSOR_STATE_LOW_POWER:

		sensor_oss = OSS_LOW_POWER;
     55c:	10 92 f8 20 	sts	0x20F8, r1
     560:	16 c0       	rjmp	.+44     	; 0x58e <bmp_ioctl+0x68>
		break;

	case SENSOR_STATE_NORMAL:

		sensor_oss = OSS_STANDARD;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 f8 20 	sts	0x20F8, r24
     568:	12 c0       	rjmp	.+36     	; 0x58e <bmp_ioctl+0x68>
		break;

	case SENSOR_STATE_HIGH_POWER:

		sensor_oss = OSS_HIGH;
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	80 93 f8 20 	sts	0x20F8, r24
     570:	0e c0       	rjmp	.+28     	; 0x58e <bmp_ioctl+0x68>
		break;

	case SENSOR_STATE_HIGHEST_POWER:

		sensor_oss = OSS_ULTRA_HIGH;
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	80 93 f8 20 	sts	0x20F8, r24
     578:	0a c0       	rjmp	.+20     	; 0x58e <bmp_ioctl+0x68>
     57a:	86 eb       	ldi	r24, 0xB6	; 182
     57c:	89 83       	std	Y+1, r24	; 0x01
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	ae 01       	movw	r20, r28
     584:	4f 5f       	subi	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	60 ee       	ldi	r22, 0xE0	; 224
     58a:	c8 01       	movw	r24, r16
     58c:	53 d6       	rcall	.+3238   	; 0x1234 <bus_write>
		 */
		sensor_bus_put(hal, BMP_SOFT_RESET, BMP_RESET_CMD);
		break;
	}

	hal->resolution = BMP_RESOLUTION;
     58e:	80 91 f8 20 	lds	r24, 0x20F8
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	40 96       	adiw	r24, 0x10	; 16
     596:	f8 01       	movw	r30, r16
     598:	86 8f       	std	Z+30, r24	; 0x1e
     59a:	97 8f       	std	Z+31, r25	; 0x1f

	return true;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	08 c0       	rjmp	.+16     	; 0x5b0 <bmp_ioctl+0x8a>
{
	/* \todo  Handle Sleep & Suspend states. */

	switch (state) {
	default:
		return false;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
	bool status = false;

	switch (cmd) {
	case SENSOR_SET_STATE:
		status = bmp_set_state(hal, *((sensor_state_t *)arg));
		break;
     5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <bmp_ioctl+0x8a>

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e8       	ldi	r19, 0x80	; 128
     5a8:	fc 01       	movw	r30, r24
     5aa:	27 83       	std	Z+7, r18	; 0x07
     5ac:	30 87       	std	Z+8, r19	; 0x08
 * @return  bool    true if the call succeeds, else false is returned.
 */
static bool bmp_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	sensor_hal_t *const hal = sensor->hal;
	bool status = false;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
	}

	return status;
}
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	08 95       	ret

000005bc <bmp_get_cal_param>:
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @retval  bool    "true" if valid coefficients have been fetched
 * @retval  bool    "false" for errors reading the device coefficients
 */
static bool bmp_get_cal_param(sensor_hal_t *hal)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	66 97       	sbiw	r28, 0x16	; 22
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	de bf       	out	0x3e, r29	; 62
	/* Set an intermediate buffer to known invalid values (0 or ffff). */
	uint8_t *const coeffs = (uint8_t [BMP_EEPROM_SIZE_BYTES]) {0};
     5ca:	ae 01       	movw	r20, r28
     5cc:	4f 5f       	subi	r20, 0xFF	; 255
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	26 e1       	ldi	r18, 0x16	; 22
     5d2:	fa 01       	movw	r30, r20
     5d4:	11 92       	st	Z+, r1
     5d6:	2a 95       	dec	r18
     5d8:	e9 f7       	brne	.-6      	; 0x5d4 <bmp_get_cal_param+0x18>

	/* Attempt to fetch calibration coefficients from the slave EEPROM. */
	const size_t bytes_read = sensor_bus_read
     5da:	26 e1       	ldi	r18, 0x16	; 22
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	6a ea       	ldi	r22, 0xAA	; 170
     5e0:	ea d5       	rcall	.+3028   	; 0x11b6 <bus_read>
				(hal, BMP_EEPROM_ADDR, coeffs,
				BMP_EEPROM_SIZE_BYTES);

	AC1 = ((uint16_t)coeffs[ 0] << 8) | coeffs[ 1];
     5e2:	39 81       	ldd	r19, Y+1	; 0x01
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	4a 81       	ldd	r20, Y+2	; 0x02
     5e8:	24 2b       	or	r18, r20
     5ea:	20 93 f9 20 	sts	0x20F9, r18
     5ee:	30 93 fa 20 	sts	0x20FA, r19
	AC2 = ((uint16_t)coeffs[ 2] << 8) | coeffs[ 3];
     5f2:	3b 81       	ldd	r19, Y+3	; 0x03
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	4c 81       	ldd	r20, Y+4	; 0x04
     5f8:	24 2b       	or	r18, r20
     5fa:	20 93 fb 20 	sts	0x20FB, r18
     5fe:	30 93 fc 20 	sts	0x20FC, r19
	AC3 = ((uint16_t)coeffs[ 4] << 8) | coeffs[ 5];
     602:	3d 81       	ldd	r19, Y+5	; 0x05
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	4e 81       	ldd	r20, Y+6	; 0x06
     608:	24 2b       	or	r18, r20
     60a:	20 93 fd 20 	sts	0x20FD, r18
     60e:	30 93 fe 20 	sts	0x20FE, r19
	AC4 = ((uint16_t)coeffs[ 6] << 8) | coeffs[ 7];
     612:	3f 81       	ldd	r19, Y+7	; 0x07
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	48 85       	ldd	r20, Y+8	; 0x08
     618:	24 2b       	or	r18, r20
     61a:	20 93 ff 20 	sts	0x20FF, r18
     61e:	30 93 00 21 	sts	0x2100, r19
	AC5 = ((uint16_t)coeffs[ 8] << 8) | coeffs[ 9];
     622:	39 85       	ldd	r19, Y+9	; 0x09
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	4a 85       	ldd	r20, Y+10	; 0x0a
     628:	24 2b       	or	r18, r20
     62a:	20 93 01 21 	sts	0x2101, r18
     62e:	30 93 02 21 	sts	0x2102, r19
	AC6 = ((uint16_t)coeffs[10] << 8) | coeffs[11];
     632:	3b 85       	ldd	r19, Y+11	; 0x0b
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	4c 85       	ldd	r20, Y+12	; 0x0c
     638:	24 2b       	or	r18, r20
     63a:	20 93 03 21 	sts	0x2103, r18
     63e:	30 93 04 21 	sts	0x2104, r19

	B1  = ((uint16_t)coeffs[12] << 8) | coeffs[13];
     642:	3d 85       	ldd	r19, Y+13	; 0x0d
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	4e 85       	ldd	r20, Y+14	; 0x0e
     648:	24 2b       	or	r18, r20
     64a:	20 93 05 21 	sts	0x2105, r18
     64e:	30 93 06 21 	sts	0x2106, r19
	B2  = ((uint16_t)coeffs[14] << 8) | coeffs[15];
     652:	3f 85       	ldd	r19, Y+15	; 0x0f
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	48 89       	ldd	r20, Y+16	; 0x10
     658:	24 2b       	or	r18, r20
     65a:	20 93 07 21 	sts	0x2107, r18
     65e:	30 93 08 21 	sts	0x2108, r19

	Mb  = ((uint16_t)coeffs[16] << 8) | coeffs[17];
     662:	39 89       	ldd	r19, Y+17	; 0x11
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	4a 89       	ldd	r20, Y+18	; 0x12
     668:	24 2b       	or	r18, r20
     66a:	20 93 09 21 	sts	0x2109, r18
     66e:	30 93 0a 21 	sts	0x210A, r19
	Mc  = ((uint16_t)coeffs[18] << 8) | coeffs[19];
     672:	3b 89       	ldd	r19, Y+19	; 0x13
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	4c 89       	ldd	r20, Y+20	; 0x14
     678:	24 2b       	or	r18, r20
     67a:	20 93 0b 21 	sts	0x210B, r18
     67e:	30 93 0c 21 	sts	0x210C, r19
	Md  = ((uint16_t)coeffs[20] << 8) | coeffs[21];
     682:	3d 89       	ldd	r19, Y+21	; 0x15
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	4e 89       	ldd	r20, Y+22	; 0x16
     688:	24 2b       	or	r18, r20
     68a:	20 93 0d 21 	sts	0x210D, r18
     68e:	30 93 0e 21 	sts	0x210E, r19

	return (BMP_EEPROM_SIZE_BYTES == bytes_read);
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	46 97       	sbiw	r24, 0x16	; 22
     696:	09 f0       	breq	.+2      	; 0x69a <bmp_get_cal_param+0xde>
     698:	20 e0       	ldi	r18, 0x00	; 0
}
     69a:	82 2f       	mov	r24, r18
     69c:	66 96       	adiw	r28, 0x16	; 22
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <bmp_get_ut>:
 *
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated temperature reading.
 */
static int32_t bmp_get_ut(sensor_hal_t *hal)
{
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <bmp_get_ut+0xa>
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	08 2f       	mov	r16, r24
     6b8:	19 2f       	mov	r17, r25
     6ba:	8e e2       	ldi	r24, 0x2E	; 46
     6bc:	8b 83       	std	Y+3, r24	; 0x03
     6be:	21 e0       	ldi	r18, 0x01	; 1
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	ae 01       	movw	r20, r28
     6c4:	4d 5f       	subi	r20, 0xFD	; 253
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	64 ef       	ldi	r22, 0xF4	; 244
     6ca:	80 2f       	mov	r24, r16
     6cc:	b3 d5       	rcall	.+2918   	; 0x1234 <bus_write>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     6d2:	2f 5f       	subi	r18, 0xFF	; 255
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	2a 32       	cpi	r18, 0x2A	; 42
     6d8:	88 e6       	ldi	r24, 0x68	; 104
     6da:	38 07       	cpc	r19, r24
     6dc:	d1 f7       	brne	.-12     	; 0x6d2 <bmp_get_ut+0x2a>
	sensor_bus_put(hal, BMP_CONTROL, BMP_TEMP_READ);

	/* The conversion time for temperature is 4.5ms at most. */
	delay_ms(5);

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
     6de:	22 e0       	ldi	r18, 0x02	; 2
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	ae 01       	movw	r20, r28
     6e4:	4f 5f       	subi	r20, 0xFF	; 255
     6e6:	5f 4f       	sbci	r21, 0xFF	; 255
     6e8:	66 ef       	ldi	r22, 0xF6	; 246
     6ea:	80 2f       	mov	r24, r16
     6ec:	91 2f       	mov	r25, r17
     6ee:	63 d5       	rcall	.+2758   	; 0x11b6 <bus_read>
     6f0:	89 2b       	or	r24, r25
     6f2:	59 f0       	breq	.+22     	; 0x70a <bmp_get_ut+0x62>
		UT = ((uint32_t)buff[0] << 8) | buff[1];
     6f4:	09 81       	ldd	r16, Y+1	; 0x01
     6f6:	10 e0       	ldi	r17, 0x00	; 0
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	32 2f       	mov	r19, r18
     6fe:	21 2f       	mov	r18, r17
     700:	10 2f       	mov	r17, r16
     702:	00 27       	eor	r16, r16
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	08 2b       	or	r16, r24
     708:	03 c0       	rjmp	.+6      	; 0x710 <bmp_get_ut+0x68>
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated temperature reading.
 */
static int32_t bmp_get_ut(sensor_hal_t *hal)
{
	int32_t UT = -1;
     70a:	0f ef       	ldi	r16, 0xFF	; 255
     70c:	1f ef       	ldi	r17, 0xFF	; 255
     70e:	98 01       	movw	r18, r16
	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
		UT = ((uint32_t)buff[0] << 8) | buff[1];
	}

	return UT;
}
     710:	60 2f       	mov	r22, r16
     712:	71 2f       	mov	r23, r17
     714:	82 2f       	mov	r24, r18
     716:	93 2f       	mov	r25, r19
     718:	23 96       	adiw	r28, 0x03	; 3
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret

00000728 <bmp_read>:
 * @param type      Type of sensor data to read.
 * @param data      The address where pressure samples are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	2c 97       	sbiw	r28, 0x0c	; 12
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	de bf       	out	0x3e, r29	; 62
     752:	4a 01       	movw	r8, r20
	switch (type) {
     754:	66 30       	cpi	r22, 0x06	; 6
     756:	39 f0       	breq	.+14     	; 0x766 <bmp_read+0x3e>
     758:	69 30       	cpi	r22, 0x09	; 9
     75a:	09 f4       	brne	.+2      	; 0x75e <bmp_read+0x36>
     75c:	0b c2       	rjmp	.+1046   	; 0xb74 <bmp_read+0x44c>
     75e:	63 30       	cpi	r22, 0x03	; 3
     760:	09 f0       	breq	.+2      	; 0x764 <bmp_read+0x3c>
     762:	99 c2       	rjmp	.+1330   	; 0xc96 <bmp_read+0x56e>
     764:	6f c2       	rjmp	.+1246   	; 0xc44 <bmp_read+0x51c>
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);
     766:	fc 01       	movw	r30, r24
     768:	60 80       	ld	r6, Z
     76a:	71 80       	ldd	r7, Z+1	; 0x01
{
	int32_t UP = -1;

	uint8_t buff[3];

	sensor_bus_put(hal, BMP_CONTROL, BMP_PRESS_READ + (sensor_oss << 6));
     76c:	80 91 f8 20 	lds	r24, 0x20F8
     770:	82 95       	swap	r24
     772:	88 0f       	add	r24, r24
     774:	88 0f       	add	r24, r24
     776:	80 7c       	andi	r24, 0xC0	; 192
     778:	8c 5c       	subi	r24, 0xCC	; 204
     77a:	8c 83       	std	Y+4, r24	; 0x04
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	ae 01       	movw	r20, r28
     782:	4c 5f       	subi	r20, 0xFC	; 252
     784:	5f 4f       	sbci	r21, 0xFF	; 255
     786:	64 ef       	ldi	r22, 0xF4	; 244
     788:	86 2d       	mov	r24, r6
     78a:	97 2d       	mov	r25, r7
     78c:	53 d5       	rcall	.+2726   	; 0x1234 <bus_write>
	 *
	 * This works on the BMP085 but not on the BMP180.
	 *
	 * while (gpio_pin_is_low (hal->mcu_sigint));
	 */
	delay_ms(2 + (3 << sensor_oss));
     78e:	e3 e0       	ldi	r30, 0x03	; 3
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	00 90 f8 20 	lds	r0, 0x20F8
     796:	02 c0       	rjmp	.+4      	; 0x79c <bmp_read+0x74>
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <bmp_read+0x70>
     7a0:	32 96       	adiw	r30, 0x02	; 2
     7a2:	9f 2f       	mov	r25, r31
     7a4:	99 0f       	add	r25, r25
     7a6:	99 0b       	sbc	r25, r25
     7a8:	a1 2c       	mov	r10, r1
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f8 e4       	ldi	r31, 0x48	; 72
     7ae:	bf 2e       	mov	r11, r31
     7b0:	f0 2d       	mov	r31, r0
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f8 ee       	ldi	r31, 0xE8	; 232
     7b6:	cf 2e       	mov	r12, r31
     7b8:	f0 2d       	mov	r31, r0
     7ba:	dd 24       	eor	r13, r13
     7bc:	d3 94       	inc	r13
     7be:	e1 2c       	mov	r14, r1
     7c0:	f1 2c       	mov	r15, r1
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	2e 2f       	mov	r18, r30
     7c8:	3f 2f       	mov	r19, r31
     7ca:	49 2f       	mov	r20, r25
     7cc:	59 2f       	mov	r21, r25
     7ce:	69 2f       	mov	r22, r25
     7d0:	79 2f       	mov	r23, r25
     7d2:	89 2f       	mov	r24, r25
     7d4:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <__muldi3>
     7d8:	29 51       	subi	r18, 0x19	; 25
     7da:	3c 4f       	sbci	r19, 0xFC	; 252
     7dc:	4f 4f       	sbci	r20, 0xFF	; 255
     7de:	5f 4f       	sbci	r21, 0xFF	; 255
     7e0:	6f 4f       	sbci	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	8f 4f       	sbci	r24, 0xFF	; 255
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	0e 94 9c 10 	call	0x2138	; 0x2138 <__floatundisf>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e8       	ldi	r19, 0x80	; 128
     7f0:	4b eb       	ldi	r20, 0xBB	; 187
     7f2:	55 e4       	ldi	r21, 0x45	; 69
     7f4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__divsf3>
     7f8:	0e 94 2a 10 	call	0x2054	; 0x2054 <__fixunssfdi>
     7fc:	f2 2f       	mov	r31, r18
     7fe:	e3 2f       	mov	r30, r19
     800:	8f 2f       	mov	r24, r31
     802:	9e 2f       	mov	r25, r30
     804:	a4 2f       	mov	r26, r20
     806:	b5 2f       	mov	r27, r21
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	a1 09       	sbc	r26, r1
     80c:	b1 09       	sbc	r27, r1
     80e:	e1 f7       	brne	.-8      	; 0x808 <bmp_read+0xe0>

	sensor_bus_put(hal, BMP_CONTROL, BMP_PRESS_READ + (sensor_oss << 6));

	bmp_eoc_wait(hal);

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
     810:	23 e0       	ldi	r18, 0x03	; 3
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	ae 01       	movw	r20, r28
     816:	4f 5f       	subi	r20, 0xFF	; 255
     818:	5f 4f       	sbci	r21, 0xFF	; 255
     81a:	66 ef       	ldi	r22, 0xF6	; 246
     81c:	86 2d       	mov	r24, r6
     81e:	97 2d       	mov	r25, r7
     820:	ca d4       	rcall	.+2452   	; 0x11b6 <bus_read>
     822:	89 2b       	or	r24, r25
     824:	69 f0       	breq	.+26     	; 0x840 <bmp_read+0x118>
		UP = ((uint32_t)buff[0] << 16) | ((uint32_t)buff[1] << 8) | buff[2];
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	ca 80       	ldd	r12, Y+2	; 0x02
     82a:	d1 2c       	mov	r13, r1
     82c:	e1 2c       	mov	r14, r1
     82e:	f1 2c       	mov	r15, r1
     830:	fe 2c       	mov	r15, r14
     832:	ed 2c       	mov	r14, r13
     834:	dc 2c       	mov	r13, r12
     836:	cc 24       	eor	r12, r12
     838:	e8 2a       	or	r14, r24
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	c8 2a       	or	r12, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <bmp_read+0x120>
 * @param hal   Address of an initialized sensor HAL descriptor.
 * @return  An uncompensated pressure reading.
 */
static int32_t bmp_get_up(sensor_hal_t *hal)
{
	int32_t UP = -1;
     840:	cc 24       	eor	r12, r12
     842:	ca 94       	dec	r12
     844:	dc 2c       	mov	r13, r12
     846:	76 01       	movw	r14, r12

	if (sensor_bus_read(hal, BMP_DATA_MSB, buff, sizeof(buff))) {
		UP = ((uint32_t)buff[0] << 16) | ((uint32_t)buff[1] << 8) | buff[2];
	}

	return (UP >> (8 - sensor_oss));
     848:	20 91 f8 20 	lds	r18, 0x20F8
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	91 09       	sbc	r25, r1
     854:	04 c0       	rjmp	.+8      	; 0x85e <bmp_read+0x136>
     856:	f5 94       	asr	r15
     858:	e7 94       	ror	r14
     85a:	d7 94       	ror	r13
     85c:	c7 94       	ror	r12
     85e:	8a 95       	dec	r24
     860:	d2 f7       	brpl	.-12     	; 0x856 <bmp_read+0x12e>
 */
static bool bmp_get_pressure(sensor_hal_t *hal, sensor_data_t *data)
{
	int32_t const UP = bmp_get_up(hal);

	if (data->scaled == false) {
     862:	f4 01       	movw	r30, r8
     864:	80 89       	ldd	r24, Z+16	; 0x10
     866:	81 11       	cpse	r24, r1
     868:	06 c0       	rjmp	.+12     	; 0x876 <bmp_read+0x14e>
		data->pressure.value = UP;
     86a:	c0 82       	st	Z, r12
     86c:	d1 82       	std	Z+1, r13	; 0x01
     86e:	e2 82       	std	Z+2, r14	; 0x02
     870:	f3 82       	std	Z+3, r15	; 0x03
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	16 c2       	rjmp	.+1068   	; 0xca2 <bmp_read+0x57a>

	if (data->scaled == false) {
		data->pressure.value = UP;
	} else {
		/* The compensated pressure in pascal (Pa) units. */
		int32_t const UT = bmp_get_ut(hal);
     876:	86 2d       	mov	r24, r6
     878:	97 2d       	mov	r25, r7
     87a:	16 df       	rcall	.-468    	; 0x6a8 <bmp_get_ut>

		int32_t const x1 = ((UT - AC6) * AC5) >> 15;
     87c:	20 91 03 21 	lds	r18, 0x2103
     880:	30 91 04 21 	lds	r19, 0x2104
     884:	2b 01       	movw	r4, r22
     886:	3c 01       	movw	r6, r24
     888:	42 1a       	sub	r4, r18
     88a:	53 0a       	sbc	r5, r19
     88c:	61 08       	sbc	r6, r1
     88e:	71 08       	sbc	r7, r1
     890:	a3 01       	movw	r20, r6
     892:	92 01       	movw	r18, r4
     894:	a0 91 01 21 	lds	r26, 0x2101
     898:	b0 91 02 21 	lds	r27, 0x2102
     89c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__muluhisi3>
     8a0:	2b 01       	movw	r4, r22
     8a2:	3c 01       	movw	r6, r24
     8a4:	03 2e       	mov	r0, r19
     8a6:	3f e0       	ldi	r19, 0x0F	; 15
     8a8:	75 94       	asr	r7
     8aa:	67 94       	ror	r6
     8ac:	57 94       	ror	r5
     8ae:	47 94       	ror	r4
     8b0:	3a 95       	dec	r19
     8b2:	d1 f7       	brne	.-12     	; 0x8a8 <bmp_read+0x180>
     8b4:	30 2d       	mov	r19, r0
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);
     8b6:	60 91 0b 21 	lds	r22, 0x210B
     8ba:	70 91 0c 21 	lds	r23, 0x210C
     8be:	cb 01       	movw	r24, r22
     8c0:	aa 27       	eor	r26, r26
     8c2:	97 fd       	sbrc	r25, 7
     8c4:	a0 95       	com	r26
     8c6:	ba 2f       	mov	r27, r26
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	05 2e       	mov	r0, r21
     8ce:	5b e0       	ldi	r21, 0x0B	; 11
     8d0:	66 0f       	add	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	88 1f       	adc	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	5a 95       	dec	r21
     8da:	d1 f7       	brne	.-12     	; 0x8d0 <bmp_read+0x1a8>
     8dc:	50 2d       	mov	r21, r0
     8de:	20 91 0d 21 	lds	r18, 0x210D
     8e2:	30 91 0e 21 	lds	r19, 0x210E
     8e6:	89 01       	movw	r16, r18
     8e8:	22 27       	eor	r18, r18
     8ea:	17 fd       	sbrc	r17, 7
     8ec:	20 95       	com	r18
     8ee:	32 2f       	mov	r19, r18
     8f0:	a9 01       	movw	r20, r18
     8f2:	98 01       	movw	r18, r16
     8f4:	24 0d       	add	r18, r4
     8f6:	35 1d       	adc	r19, r5
     8f8:	46 1d       	adc	r20, r6
     8fa:	57 1d       	adc	r21, r7
     8fc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divmodsi4>

		int32_t const B5 = (x1 + x2);
     900:	42 0e       	add	r4, r18
     902:	53 1e       	adc	r5, r19
     904:	64 1e       	adc	r6, r20
     906:	75 1e       	adc	r7, r21
		int32_t const B6 = B5 - 4000L;
     908:	00 ea       	ldi	r16, 0xA0	; 160
     90a:	40 1a       	sub	r4, r16
     90c:	0f e0       	ldi	r16, 0x0F	; 15
     90e:	50 0a       	sbc	r5, r16
     910:	61 08       	sbc	r6, r1
     912:	71 08       	sbc	r7, r1

		int32_t X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
     914:	a3 01       	movw	r20, r6
     916:	92 01       	movw	r18, r4
     918:	c3 01       	movw	r24, r6
     91a:	b2 01       	movw	r22, r4
     91c:	0e 94 c3 14 	call	0x2986	; 0x2986 <__mulsi3>
     920:	8b 01       	movw	r16, r22
     922:	9c 01       	movw	r18, r24
     924:	0f 2e       	mov	r0, r31
     926:	fc e0       	ldi	r31, 0x0C	; 12
     928:	35 95       	asr	r19
     92a:	27 95       	ror	r18
     92c:	17 95       	ror	r17
     92e:	07 95       	ror	r16
     930:	fa 95       	dec	r31
     932:	d1 f7       	brne	.-12     	; 0x928 <bmp_read+0x200>
     934:	f0 2d       	mov	r31, r0
     936:	0d 83       	std	Y+5, r16	; 0x05
     938:	1e 83       	std	Y+6, r17	; 0x06
     93a:	2f 83       	std	Y+7, r18	; 0x07
     93c:	38 87       	std	Y+8, r19	; 0x08
		int32_t X2 = (AC2 * B6) >> 11;
		int32_t X3 = X1 + X2;

		int32_t const B3 = ((((int32_t)AC1 * 4 + X3) << sensor_oss) + 2) >> 2;
     93e:	e0 91 f8 20 	lds	r30, 0x20F8

		X1 = (AC3 * B6) >> 13;
     942:	a0 91 fd 20 	lds	r26, 0x20FD
     946:	b0 91 fe 20 	lds	r27, 0x20FE
     94a:	a3 01       	movw	r20, r6
     94c:	92 01       	movw	r18, r4
     94e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulshisi3>
     952:	8b 01       	movw	r16, r22
     954:	9c 01       	movw	r18, r24
     956:	0f 2e       	mov	r0, r31
     958:	fd e0       	ldi	r31, 0x0D	; 13
     95a:	35 95       	asr	r19
     95c:	27 95       	ror	r18
     95e:	17 95       	ror	r17
     960:	07 95       	ror	r16
     962:	fa 95       	dec	r31
     964:	d1 f7       	brne	.-12     	; 0x95a <bmp_read+0x232>
     966:	f0 2d       	mov	r31, r0
     968:	09 87       	std	Y+9, r16	; 0x09
     96a:	1a 87       	std	Y+10, r17	; 0x0a
     96c:	2b 87       	std	Y+11, r18	; 0x0b
     96e:	3c 87       	std	Y+12, r19	; 0x0c
		X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
     970:	a0 91 05 21 	lds	r26, 0x2105
     974:	b0 91 06 21 	lds	r27, 0x2106
     978:	2d 81       	ldd	r18, Y+5	; 0x05
     97a:	3e 81       	ldd	r19, Y+6	; 0x06
     97c:	4f 81       	ldd	r20, Y+7	; 0x07
     97e:	58 85       	ldd	r21, Y+8	; 0x08
     980:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulshisi3>
     984:	bb 27       	eor	r27, r27
     986:	97 fd       	sbrc	r25, 7
     988:	b0 95       	com	r27
     98a:	ab 2f       	mov	r26, r27
		X3 = ((X1 + X2) + 2) >> 2;
     98c:	09 85       	ldd	r16, Y+9	; 0x09
     98e:	1a 85       	ldd	r17, Y+10	; 0x0a
     990:	2b 85       	ldd	r18, Y+11	; 0x0b
     992:	3c 85       	ldd	r19, Y+12	; 0x0c
     994:	80 0f       	add	r24, r16
     996:	91 1f       	adc	r25, r17
     998:	a2 1f       	adc	r26, r18
     99a:	b3 1f       	adc	r27, r19
     99c:	02 96       	adiw	r24, 0x02	; 2
     99e:	a1 1d       	adc	r26, r1
     9a0:	b1 1d       	adc	r27, r1
     9a2:	b5 95       	asr	r27
     9a4:	a7 95       	ror	r26
     9a6:	97 95       	ror	r25
     9a8:	87 95       	ror	r24
     9aa:	b5 95       	asr	r27
     9ac:	a7 95       	ror	r26
     9ae:	97 95       	ror	r25
     9b0:	87 95       	ror	r24

		uint32_t const B4 = (AC4 * (uint32_t)(X3 + 32768L)) >> 15;
     9b2:	9c 01       	movw	r18, r24
     9b4:	ad 01       	movw	r20, r26
     9b6:	30 58       	subi	r19, 0x80	; 128
     9b8:	4f 4f       	sbci	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	a0 91 ff 20 	lds	r26, 0x20FF
     9c0:	b0 91 00 21 	lds	r27, 0x2100
     9c4:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__muluhisi3>
     9c8:	8b 01       	movw	r16, r22
     9ca:	9c 01       	movw	r18, r24
     9cc:	0f 2e       	mov	r0, r31
     9ce:	ff e0       	ldi	r31, 0x0F	; 15
     9d0:	36 95       	lsr	r19
     9d2:	27 95       	ror	r18
     9d4:	17 95       	ror	r17
     9d6:	07 95       	ror	r16
     9d8:	fa 95       	dec	r31
     9da:	d1 f7       	brne	.-12     	; 0x9d0 <bmp_read+0x2a8>
     9dc:	f0 2d       	mov	r31, r0
     9de:	09 87       	std	Y+9, r16	; 0x09
     9e0:	1a 87       	std	Y+10, r17	; 0x0a
     9e2:	2b 87       	std	Y+11, r18	; 0x0b
     9e4:	3c 87       	std	Y+12, r19	; 0x0c
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);

		int32_t const B5 = (x1 + x2);
		int32_t const B6 = B5 - 4000L;

		int32_t X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
     9e6:	a0 91 07 21 	lds	r26, 0x2107
     9ea:	b0 91 08 21 	lds	r27, 0x2108
     9ee:	2d 81       	ldd	r18, Y+5	; 0x05
     9f0:	3e 81       	ldd	r19, Y+6	; 0x06
     9f2:	4f 81       	ldd	r20, Y+7	; 0x07
     9f4:	58 85       	ldd	r21, Y+8	; 0x08
     9f6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulshisi3>
     9fa:	8b 01       	movw	r16, r22
     9fc:	9c 01       	movw	r18, r24
     9fe:	0f 2e       	mov	r0, r31
     a00:	fb e0       	ldi	r31, 0x0B	; 11
     a02:	35 95       	asr	r19
     a04:	27 95       	ror	r18
     a06:	17 95       	ror	r17
     a08:	07 95       	ror	r16
     a0a:	fa 95       	dec	r31
     a0c:	d1 f7       	brne	.-12     	; 0xa02 <bmp_read+0x2da>
     a0e:	f0 2d       	mov	r31, r0
     a10:	0d 83       	std	Y+5, r16	; 0x05
     a12:	1e 83       	std	Y+6, r17	; 0x06
     a14:	2f 83       	std	Y+7, r18	; 0x07
     a16:	38 87       	std	Y+8, r19	; 0x08
		int32_t X2 = (AC2 * B6) >> 11;
     a18:	a0 91 fb 20 	lds	r26, 0x20FB
     a1c:	b0 91 fc 20 	lds	r27, 0x20FC
     a20:	a3 01       	movw	r20, r6
     a22:	92 01       	movw	r18, r4
     a24:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__mulshisi3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	07 2e       	mov	r0, r23
     a2e:	7b e0       	ldi	r23, 0x0B	; 11
     a30:	b5 95       	asr	r27
     a32:	a7 95       	ror	r26
     a34:	97 95       	ror	r25
     a36:	87 95       	ror	r24
     a38:	7a 95       	dec	r23
     a3a:	d1 f7       	brne	.-12     	; 0xa30 <bmp_read+0x308>
     a3c:	70 2d       	mov	r23, r0
		int32_t X3 = X1 + X2;
     a3e:	4d 80       	ldd	r4, Y+5	; 0x05
     a40:	5e 80       	ldd	r5, Y+6	; 0x06
     a42:	6f 80       	ldd	r6, Y+7	; 0x07
     a44:	78 84       	ldd	r7, Y+8	; 0x08
     a46:	84 0d       	add	r24, r4
     a48:	95 1d       	adc	r25, r5
     a4a:	a6 1d       	adc	r26, r6
     a4c:	b7 1d       	adc	r27, r7

		int32_t const B3 = ((((int32_t)AC1 * 4 + X3) << sensor_oss) + 2) >> 2;
     a4e:	40 91 f9 20 	lds	r20, 0x20F9
     a52:	50 91 fa 20 	lds	r21, 0x20FA
     a56:	66 27       	eor	r22, r22
     a58:	57 fd       	sbrc	r21, 7
     a5a:	60 95       	com	r22
     a5c:	76 2f       	mov	r23, r22
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	66 1f       	adc	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	44 0f       	add	r20, r20
     a68:	55 1f       	adc	r21, r21
     a6a:	66 1f       	adc	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	84 0f       	add	r24, r20
     a70:	95 1f       	adc	r25, r21
     a72:	a6 1f       	adc	r26, r22
     a74:	b7 1f       	adc	r27, r23
     a76:	0e 2e       	mov	r0, r30
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <bmp_read+0x35a>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	aa 1f       	adc	r26, r26
     a80:	bb 1f       	adc	r27, r27
     a82:	0a 94       	dec	r0
     a84:	d2 f7       	brpl	.-12     	; 0xa7a <bmp_read+0x352>
     a86:	02 96       	adiw	r24, 0x02	; 2
     a88:	a1 1d       	adc	r26, r1
     a8a:	b1 1d       	adc	r27, r1
     a8c:	b5 95       	asr	r27
     a8e:	a7 95       	ror	r26
     a90:	97 95       	ror	r25
     a92:	87 95       	ror	r24
     a94:	b5 95       	asr	r27
     a96:	a7 95       	ror	r26
     a98:	97 95       	ror	r25
     a9a:	87 95       	ror	r24
		X1 = (AC3 * B6) >> 13;
		X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
		X3 = ((X1 + X2) + 2) >> 2;

		uint32_t const B4 = (AC4 * (uint32_t)(X3 + 32768L)) >> 15;
		uint32_t const B7 = (UP - B3) * (50000L >> sensor_oss);
     a9c:	a7 01       	movw	r20, r14
     a9e:	96 01       	movw	r18, r12
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	80 e5       	ldi	r24, 0x50	; 80
     aaa:	93 ec       	ldi	r25, 0xC3	; 195
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <bmp_read+0x396>
     ab6:	95 95       	asr	r25
     ab8:	87 95       	ror	r24
     aba:	77 95       	ror	r23
     abc:	67 95       	ror	r22
     abe:	ea 95       	dec	r30
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <bmp_read+0x38e>
     ac2:	0e 94 c3 14 	call	0x2986	; 0x2986 <__mulsi3>

		int32_t P = (B7 < 0x80000000UL) ? ((B7 << 1) / B4) : ((B7 / B4) << 1);
     ac6:	99 23       	and	r25, r25
     ac8:	6c f0       	brlt	.+26     	; 0xae4 <bmp_read+0x3bc>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	29 85       	ldd	r18, Y+9	; 0x09
     ad4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ad6:	4b 85       	ldd	r20, Y+11	; 0x0b
     ad8:	5c 85       	ldd	r21, Y+12	; 0x0c
     ada:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodsi4>
     ade:	69 01       	movw	r12, r18
     ae0:	7a 01       	movw	r14, r20
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <bmp_read+0x3d4>
     ae4:	29 85       	ldd	r18, Y+9	; 0x09
     ae6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae8:	4b 85       	ldd	r20, Y+11	; 0x0b
     aea:	5c 85       	ldd	r21, Y+12	; 0x0c
     aec:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodsi4>
     af0:	69 01       	movw	r12, r18
     af2:	7a 01       	movw	r14, r20
     af4:	cc 0c       	add	r12, r12
     af6:	dd 1c       	adc	r13, r13
     af8:	ee 1c       	adc	r14, r14
     afa:	ff 1c       	adc	r15, r15

		X1 = (P >> 8);
     afc:	99 27       	eor	r25, r25
     afe:	f7 fc       	sbrc	r15, 7
     b00:	9a 95       	dec	r25
     b02:	8f 2d       	mov	r24, r15
     b04:	7e 2d       	mov	r23, r14
     b06:	6d 2d       	mov	r22, r13
		X1 = (X1 * X1 * 3038L) >> 16;
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	0e 94 c3 14 	call	0x2986	; 0x2986 <__mulsi3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	ae ed       	ldi	r26, 0xDE	; 222
     b16:	bb e0       	ldi	r27, 0x0B	; 11
     b18:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__muluhisi3>
     b1c:	2c 01       	movw	r4, r24
     b1e:	77 24       	eor	r7, r7
     b20:	57 fc       	sbrc	r5, 7
     b22:	70 94       	com	r7
     b24:	67 2c       	mov	r6, r7
		X2 = (-7357L * P) >> 16;
     b26:	a3 e4       	ldi	r26, 0x43	; 67
     b28:	b3 ee       	ldi	r27, 0xE3	; 227
     b2a:	a7 01       	movw	r20, r14
     b2c:	96 01       	movw	r18, r12
     b2e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__mulohisi3>
     b32:	bb 27       	eor	r27, r27
     b34:	97 fd       	sbrc	r25, 7
     b36:	b0 95       	com	r27
     b38:	ab 2f       	mov	r26, r27

		P += ((X1 + X2 + 3791L) >> 4);
     b3a:	48 0e       	add	r4, r24
     b3c:	59 1e       	adc	r5, r25
     b3e:	6a 1e       	adc	r6, r26
     b40:	7b 1e       	adc	r7, r27
     b42:	0f ec       	ldi	r16, 0xCF	; 207
     b44:	40 0e       	add	r4, r16
     b46:	0e e0       	ldi	r16, 0x0E	; 14
     b48:	50 1e       	adc	r5, r16
     b4a:	61 1c       	adc	r6, r1
     b4c:	71 1c       	adc	r7, r1
     b4e:	68 94       	set
     b50:	13 f8       	bld	r1, 3
     b52:	75 94       	asr	r7
     b54:	67 94       	ror	r6
     b56:	57 94       	ror	r5
     b58:	47 94       	ror	r4
     b5a:	16 94       	lsr	r1
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <bmp_read+0x42a>
     b5e:	c4 0c       	add	r12, r4
     b60:	d5 1c       	adc	r13, r5
     b62:	e6 1c       	adc	r14, r6
     b64:	f7 1c       	adc	r15, r7

		data->pressure.value = P;
     b66:	f4 01       	movw	r30, r8
     b68:	c0 82       	st	Z, r12
     b6a:	d1 82       	std	Z+1, r13	; 0x01
     b6c:	e2 82       	std	Z+2, r14	; 0x02
     b6e:	f3 82       	std	Z+3, r15	; 0x03
 */
static bool bmp_read(sensor_t *sensor, sensor_read_t type, sensor_data_t *data)
{
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	97 c0       	rjmp	.+302    	; 0xca2 <bmp_read+0x57a>
 * @param data      The address where temperature samples are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_get_temperature(sensor_hal_t *hal, sensor_data_t *data)
{
	int32_t const UT = bmp_get_ut(hal);
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	91 81       	ldd	r25, Z+1	; 0x01
     b7a:	96 dd       	rcall	.-1236   	; 0x6a8 <bmp_get_ut>

	if (false == data->scaled) {
     b7c:	f4 01       	movw	r30, r8
     b7e:	20 89       	ldd	r18, Z+16	; 0x10
     b80:	21 11       	cpse	r18, r1
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <bmp_read+0x468>
		data->temperature.value = UT;
     b84:	60 83       	st	Z, r22
     b86:	71 83       	std	Z+1, r23	; 0x01
     b88:	82 83       	std	Z+2, r24	; 0x02
     b8a:	93 83       	std	Z+3, r25	; 0x03
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);

	case SENSOR_READ_TEMPERATURE:
		return bmp_get_temperature(sensor->hal, data);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	89 c0       	rjmp	.+274    	; 0xca2 <bmp_read+0x57a>

	if (false == data->scaled) {
		data->temperature.value = UT;
	} else {
		/* The compensated temperature in 0.1 degrees C units. */
		int32_t const x1 = ((UT - AC6) * AC5) >> 15;
     b90:	20 91 03 21 	lds	r18, 0x2103
     b94:	30 91 04 21 	lds	r19, 0x2104
     b98:	2b 01       	movw	r4, r22
     b9a:	3c 01       	movw	r6, r24
     b9c:	42 1a       	sub	r4, r18
     b9e:	53 0a       	sbc	r5, r19
     ba0:	61 08       	sbc	r6, r1
     ba2:	71 08       	sbc	r7, r1
     ba4:	a3 01       	movw	r20, r6
     ba6:	92 01       	movw	r18, r4
     ba8:	a0 91 01 21 	lds	r26, 0x2101
     bac:	b0 91 02 21 	lds	r27, 0x2102
     bb0:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__muluhisi3>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	0b 2e       	mov	r0, r27
     bba:	bf e0       	ldi	r27, 0x0F	; 15
     bbc:	f5 94       	asr	r15
     bbe:	e7 94       	ror	r14
     bc0:	d7 94       	ror	r13
     bc2:	c7 94       	ror	r12
     bc4:	ba 95       	dec	r27
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <bmp_read+0x494>
     bc8:	b0 2d       	mov	r27, r0
		int32_t const x2 = ((int32_t)Mc << 11) / (x1 + Md);
     bca:	60 91 0b 21 	lds	r22, 0x210B
     bce:	70 91 0c 21 	lds	r23, 0x210C
     bd2:	cb 01       	movw	r24, r22
     bd4:	aa 27       	eor	r26, r26
     bd6:	97 fd       	sbrc	r25, 7
     bd8:	a0 95       	com	r26
     bda:	ba 2f       	mov	r27, r26
     bdc:	bc 01       	movw	r22, r24
     bde:	cd 01       	movw	r24, r26
     be0:	05 2e       	mov	r0, r21
     be2:	5b e0       	ldi	r21, 0x0B	; 11
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	88 1f       	adc	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	5a 95       	dec	r21
     bee:	d1 f7       	brne	.-12     	; 0xbe4 <bmp_read+0x4bc>
     bf0:	50 2d       	mov	r21, r0
     bf2:	20 91 0d 21 	lds	r18, 0x210D
     bf6:	30 91 0e 21 	lds	r19, 0x210E
     bfa:	89 01       	movw	r16, r18
     bfc:	22 27       	eor	r18, r18
     bfe:	17 fd       	sbrc	r17, 7
     c00:	20 95       	com	r18
     c02:	32 2f       	mov	r19, r18
     c04:	a9 01       	movw	r20, r18
     c06:	98 01       	movw	r18, r16
     c08:	2c 0d       	add	r18, r12
     c0a:	3d 1d       	adc	r19, r13
     c0c:	4e 1d       	adc	r20, r14
     c0e:	5f 1d       	adc	r21, r15
     c10:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divmodsi4>

		data->temperature.value = ((x1 + x2) + 8) >> 4;
     c14:	c2 0e       	add	r12, r18
     c16:	d3 1e       	adc	r13, r19
     c18:	e4 1e       	adc	r14, r20
     c1a:	f5 1e       	adc	r15, r21
     c1c:	08 e0       	ldi	r16, 0x08	; 8
     c1e:	c0 0e       	add	r12, r16
     c20:	d1 1c       	adc	r13, r1
     c22:	e1 1c       	adc	r14, r1
     c24:	f1 1c       	adc	r15, r1
     c26:	68 94       	set
     c28:	13 f8       	bld	r1, 3
     c2a:	f5 94       	asr	r15
     c2c:	e7 94       	ror	r14
     c2e:	d7 94       	ror	r13
     c30:	c7 94       	ror	r12
     c32:	16 94       	lsr	r1
     c34:	d1 f7       	brne	.-12     	; 0xc2a <bmp_read+0x502>
     c36:	f4 01       	movw	r30, r8
     c38:	c0 82       	st	Z, r12
     c3a:	d1 82       	std	Z+1, r13	; 0x01
     c3c:	e2 82       	std	Z+2, r14	; 0x02
     c3e:	f3 82       	std	Z+3, r15	; 0x03
	switch (type) {
	case SENSOR_READ_PRESSURE:
		return bmp_get_pressure(sensor->hal, data);

	case SENSOR_READ_TEMPERATURE:
		return bmp_get_temperature(sensor->hal, data);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	2f c0       	rjmp	.+94     	; 0xca2 <bmp_read+0x57a>
 * @param data      Address of sensor_data_t structure to return values.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool bmp_device_id(sensor_hal_t *hal, sensor_data_t *data)
{
	data->device.id = (uint32_t)sensor_bus_get(hal, BMP_CHIP_ID);
     c44:	fc 01       	movw	r30, r24
     c46:	e0 80       	ld	r14, Z
     c48:	f1 80       	ldd	r15, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     c4a:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	ae 01       	movw	r20, r28
     c52:	4c 5f       	subi	r20, 0xFC	; 252
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	60 ed       	ldi	r22, 0xD0	; 208
     c58:	c7 01       	movw	r24, r14
     c5a:	ad d2       	rcall	.+1370   	; 0x11b6 <bus_read>

	return data;
     c5c:	4c 81       	ldd	r20, Y+4	; 0x04
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	f4 01       	movw	r30, r8
     c66:	40 83       	st	Z, r20
     c68:	51 83       	std	Z+1, r21	; 0x01
     c6a:	62 83       	std	Z+2, r22	; 0x02
     c6c:	73 83       	std	Z+3, r23	; 0x03
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     c6e:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	ae 01       	movw	r20, r28
     c76:	4c 5f       	subi	r20, 0xFC	; 252
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	61 ed       	ldi	r22, 0xD1	; 209
     c7c:	c7 01       	movw	r24, r14
     c7e:	9b d2       	rcall	.+1334   	; 0x11b6 <bus_read>

	return data;
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
	data->device.version = (uint8_t)sensor_bus_get(hal, BMP_CHIP_VERSION);
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	f4 01       	movw	r30, r8
     c8a:	84 83       	std	Z+4, r24	; 0x04
     c8c:	95 83       	std	Z+5, r25	; 0x05
     c8e:	a6 83       	std	Z+6, r26	; 0x06
     c90:	b7 83       	std	Z+7, r27	; 0x07

	case SENSOR_READ_TEMPERATURE:
		return bmp_get_temperature(sensor->hal, data);

	case SENSOR_READ_ID:
		return bmp_device_id(sensor->hal, data);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <bmp_read+0x57a>

	default:
		sensor->err = SENSOR_ERR_FUNCTION;
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	32 e8       	ldi	r19, 0x82	; 130
     c9a:	fc 01       	movw	r30, r24
     c9c:	27 83       	std	Z+7, r18	; 0x07
     c9e:	30 87       	std	Z+8, r19	; 0x08
		return false;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ca2:	2c 96       	adiw	r28, 0x0c	; 12
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	9f 90       	pop	r9
     cbe:	8f 90       	pop	r8
     cc0:	7f 90       	pop	r7
     cc2:	6f 90       	pop	r6
     cc4:	5f 90       	pop	r5
     cc6:	4f 90       	pop	r4
     cc8:	08 95       	ret

00000cca <bmp085_init>:
 * @param   sensor  Address of a sensor device descriptor.
 * @param   resvd   Reserved value.
 * @return  bool    true if the sensor is ready for use, else false.
 */
bool bmp085_init(sensor_t *sensor, int resvd)
{
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	7c 01       	movw	r14, r24
	bool status = false;

	sensor_hal_t *const hal = sensor->hal;
     ce2:	fc 01       	movw	r30, r24
     ce4:	00 81       	ld	r16, Z
     ce6:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     ce8:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	ae 01       	movw	r20, r28
     cf0:	4f 5f       	subi	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	60 ed       	ldi	r22, 0xD0	; 208
     cf6:	80 2f       	mov	r24, r16
     cf8:	91 2f       	mov	r25, r17
     cfa:	5d d2       	rcall	.+1210   	; 0x11b6 <bus_read>

	return data;
     cfc:	29 81       	ldd	r18, Y+1	; 0x01

	if ((BMP085_ID_VAL == sensor_bus_get(hal, BMP_CHIP_ID)) &&
     cfe:	25 35       	cpi	r18, 0x55	; 85
     d00:	e9 f4       	brne	.+58     	; 0xd3c <bmp085_init+0x72>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     d02:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	ae 01       	movw	r20, r28
     d0a:	4f 5f       	subi	r20, 0xFF	; 255
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	61 ed       	ldi	r22, 0xD1	; 209
     d10:	80 2f       	mov	r24, r16
     d12:	91 2f       	mov	r25, r17
     d14:	50 d2       	rcall	.+1184   	; 0x11b6 <bus_read>

	return data;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 f4       	brne	.+36     	; 0xd40 <bmp085_init+0x76>
			(BMP085_VER_VAL ==
			sensor_bus_get(hal, BMP_CHIP_VERSION))) {
		status = bmp_get_cal_param(hal);
     d1c:	c8 01       	movw	r24, r16
     d1e:	4e dc       	rcall	.-1892   	; 0x5bc <bmp_get_cal_param>
			.caps.vendor  = SENSOR_VENDOR_BOSCH,
			.caps.units   = SENSOR_UNITS_pascal,
			.caps.name    = "BMP085 Digital pressure sensor"
		};

		sensor->drv = &bmp085_device;
     d20:	26 e6       	ldi	r18, 0x66	; 102
     d22:	30 e2       	ldi	r19, 0x20	; 32
     d24:	f7 01       	movw	r30, r14
     d26:	22 83       	std	Z+2, r18	; 0x02
     d28:	33 83       	std	Z+3, r19	; 0x03
		/* The initial "normal" execution state corresponds to the
		 * BMP085 standard mode (2 internal samples) with 17-bit data
		 * resolution and an average current @ 1 sample/s of typically
		 * 5 microamps.
		 */
		sensor_oss = OSS_STANDARD;
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	90 93 f8 20 	sts	0x20F8, r25

		hal->resolution = BMP_RESOLUTION;
     d30:	21 e1       	ldi	r18, 0x11	; 17
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f8 01       	movw	r30, r16
     d36:	26 8f       	std	Z+30, r18	; 0x1e
     d38:	37 8f       	std	Z+31, r19	; 0x1f
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <bmp085_init+0x78>
 * @param   resvd   Reserved value.
 * @return  bool    true if the sensor is ready for use, else false.
 */
bool bmp085_init(sensor_t *sensor, int resvd)
{
	bool status = false;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <bmp085_init+0x78>
     d40:	80 e0       	ldi	r24, 0x00	; 0

		hal->resolution = BMP_RESOLUTION;
	}

	return status;
}
     d42:	0f 90       	pop	r0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret

00000d56 <sensor_attach>:
 */
bool sensor_calibrate(sensor_t *sensor, sensor_calibration_t caltype,
		int code, void *caldata)
{
	return SENSOR_DRV_CALL(sensor, calibrate, caltype, code, caldata);
}
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	8b 01       	movw	r16, r22
     d6a:	6a 01       	movw	r12, r20
     d6c:	79 01       	movw	r14, r18
     d6e:	cb 01       	movw	r24, r22
     d70:	b6 d2       	rcall	.+1388   	; 0x12de <sensor_find>
     d72:	88 83       	st	Y, r24
     d74:	99 83       	std	Y+1, r25	; 0x01
     d76:	0c 83       	std	Y+4, r16	; 0x04
     d78:	1d 83       	std	Y+5, r17	; 0x05
     d7a:	eb 86       	std	Y+11, r14	; 0x0b
     d7c:	fc 86       	std	Y+12, r15	; 0x0c
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	79 f0       	breq	.+30     	; 0xda0 <sensor_attach+0x4a>
     d82:	dc 01       	movw	r26, r24
     d84:	90 96       	adiw	r26, 0x20	; 32
     d86:	ed 91       	ld	r30, X+
     d88:	fc 91       	ld	r31, X
     d8a:	91 97       	sbiw	r26, 0x21	; 33
     d8c:	b6 01       	movw	r22, r12
     d8e:	ce 01       	movw	r24, r28
     d90:	19 95       	eicall
     d92:	88 23       	and	r24, r24
     d94:	29 f0       	breq	.+10     	; 0xda0 <sensor_attach+0x4a>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	8e 83       	std	Y+6, r24	; 0x06
     d9a:	1f 82       	std	Y+7, r1	; 0x07
     d9c:	18 86       	std	Y+8, r1	; 0x08
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <sensor_attach+0x54>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	8f 83       	std	Y+7, r24	; 0x07
     da6:	98 87       	std	Y+8, r25	; 0x08
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	08 95       	ret

00000dbc <sensor_read>:
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	ea 01       	movw	r28, r20
     dc4:	dc 01       	movw	r26, r24
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	ed 91       	ld	r30, X+
     dca:	fc 91       	ld	r31, X
     dcc:	13 97       	sbiw	r26, 0x03	; 3
     dce:	01 90       	ld	r0, Z+
     dd0:	f0 81       	ld	r31, Z
     dd2:	e0 2d       	mov	r30, r0
     dd4:	30 97       	sbiw	r30, 0x00	; 0
     dd6:	29 f0       	breq	.+10     	; 0xde2 <sensor_read+0x26>
     dd8:	19 95       	eicall
     dda:	18 2f       	mov	r17, r24
     ddc:	81 11       	cpse	r24, r1
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <sensor_read+0x34>
     de0:	0c c0       	rjmp	.+24     	; 0xdfa <sensor_read+0x3e>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	32 e8       	ldi	r19, 0x82	; 130
     de6:	fc 01       	movw	r30, r24
     de8:	27 83       	std	Z+7, r18	; 0x07
     dea:	30 87       	std	Z+8, r19	; 0x08
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <sensor_read+0x3e>
     df0:	6a d2       	rcall	.+1236   	; 0x12c6 <sensor_timestamp>
     df2:	6c 87       	std	Y+12, r22	; 0x0c
     df4:	7d 87       	std	Y+13, r23	; 0x0d
     df6:	8e 87       	std	Y+14, r24	; 0x0e
     df8:	9f 87       	std	Y+15, r25	; 0x0f
     dfa:	81 2f       	mov	r24, r17
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	08 95       	ret

00000e04 <sensor_device_id>:
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	61 97       	sbiw	r28, 0x11	; 17
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	6b 01       	movw	r12, r22
     e20:	7a 01       	movw	r14, r20
     e22:	ae 01       	movw	r20, r28
     e24:	4f 5f       	subi	r20, 0xFF	; 255
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	63 e0       	ldi	r22, 0x03	; 3
     e2a:	c8 df       	rcall	.-112    	; 0xdbc <sensor_read>
     e2c:	88 23       	and	r24, r24
     e2e:	61 f0       	breq	.+24     	; 0xe48 <sensor_device_id+0x44>
     e30:	09 81       	ldd	r16, Y+1	; 0x01
     e32:	1a 81       	ldd	r17, Y+2	; 0x02
     e34:	2b 81       	ldd	r18, Y+3	; 0x03
     e36:	3c 81       	ldd	r19, Y+4	; 0x04
     e38:	f6 01       	movw	r30, r12
     e3a:	00 83       	st	Z, r16
     e3c:	11 83       	std	Z+1, r17	; 0x01
     e3e:	22 83       	std	Z+2, r18	; 0x02
     e40:	33 83       	std	Z+3, r19	; 0x03
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	f7 01       	movw	r30, r14
     e46:	90 83       	st	Z, r25
     e48:	61 96       	adiw	r28, 0x11	; 17
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	08 95       	ret

00000e60 <sensor_set_state>:
 * @param   sensor  The address of an initialized sensor descriptor.
 * @param   mode    A specified sensor operational mode.
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_set_state(sensor_t *sensor, sensor_state_t mode)
{
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	8c 01       	movw	r16, r24
     e70:	69 83       	std	Y+1, r22	; 0x01
	bool result = false;

	if (mode != sensor->mod) {
     e72:	d8 01       	movw	r26, r16
     e74:	16 96       	adiw	r26, 0x06	; 6
     e76:	9c 91       	ld	r25, X
     e78:	16 97       	sbiw	r26, 0x06	; 6
     e7a:	96 17       	cp	r25, r22
     e7c:	01 f1       	breq	.+64     	; 0xebe <sensor_set_state+0x5e>
		result
			= SENSOR_DRV_CALL(sensor, ioctl, SENSOR_SET_STATE,
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	13 97       	sbiw	r26, 0x03	; 3
     e86:	02 80       	ldd	r0, Z+2	; 0x02
     e88:	f3 81       	ldd	r31, Z+3	; 0x03
     e8a:	e0 2d       	mov	r30, r0
     e8c:	30 97       	sbiw	r30, 0x00	; 0
     e8e:	49 f0       	breq	.+18     	; 0xea2 <sensor_set_state+0x42>
     e90:	ae 01       	movw	r20, r28
     e92:	4f 5f       	subi	r20, 0xFF	; 255
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
     e96:	60 e1       	ldi	r22, 0x10	; 16
     e98:	c8 01       	movw	r24, r16
     e9a:	19 95       	eicall
				&mode);
	}

	if (result) {
     e9c:	81 11       	cpse	r24, r1
     e9e:	07 c0       	rjmp	.+14     	; 0xeae <sensor_set_state+0x4e>
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <sensor_set_state+0x60>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	92 e8       	ldi	r25, 0x82	; 130
     ea6:	f8 01       	movw	r30, r16
     ea8:	87 83       	std	Z+7, r24	; 0x07
     eaa:	90 87       	std	Z+8, r25	; 0x08
     eac:	08 c0       	rjmp	.+16     	; 0xebe <sensor_set_state+0x5e>
				&mode);
	}

	if (result) {
		sensor->mod
			= (mode ==
     eae:	99 81       	ldd	r25, Y+1	; 0x01
     eb0:	9b 30       	cpi	r25, 0x0B	; 11
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <sensor_set_state+0x56>
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	d8 01       	movw	r26, r16
     eb8:	16 96       	adiw	r26, 0x06	; 6
     eba:	9c 93       	st	X, r25
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <sensor_set_state+0x60>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
				SENSOR_STATE_RESET) ? SENSOR_STATE_NORMAL : mode;
	}

	return result;
}
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <bus_init>:
 */
uint8_t bus_reg_fieldget(bus_desc_t *bus, uint8_t addr, uint8_t mask)
{
	uint8_t const value = mask & bus_get(bus, addr);
	return (value / (mask & ~(mask << 1)));
}
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	29 97       	sbiw	r28, 0x09	; 9
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	8c 01       	movw	r16, r24
     ee0:	fe 01       	movw	r30, r28
     ee2:	31 96       	adiw	r30, 0x01	; 1
     ee4:	89 e0       	ldi	r24, 0x09	; 9
     ee6:	df 01       	movw	r26, r30
     ee8:	1d 92       	st	X+, r1
     eea:	8a 95       	dec	r24
     eec:	e9 f7       	brne	.-6      	; 0xee8 <bus_init+0x1c>
     eee:	49 83       	std	Y+1, r20	; 0x01
     ef0:	5a 83       	std	Y+2, r21	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
     ef4:	7c 83       	std	Y+4, r23	; 0x04
     ef6:	9a 01       	movw	r18, r20
     ef8:	ab 01       	movw	r20, r22
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	78 e4       	ldi	r23, 0x48	; 72
     f06:	88 ee       	ldi	r24, 0xE8	; 232
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodsi4>
     f0e:	da 01       	movw	r26, r20
     f10:	c9 01       	movw	r24, r18
     f12:	05 97       	sbiw	r24, 0x05	; 5
     f14:	a1 09       	sbc	r26, r1
     f16:	b1 09       	sbc	r27, r1
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	af 83       	std	Y+7, r26	; 0x07
     f1e:	b8 87       	std	Y+8, r27	; 0x08
     f20:	01 15       	cp	r16, r1
     f22:	11 05       	cpc	r17, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <bus_init+0x5c>
     f26:	36 c1       	rjmp	.+620    	; 0x1194 <bus_init+0x2c8>
     f28:	00 3c       	cpi	r16, 0xC0	; 192
     f2a:	11 05       	cpc	r17, r1
     f2c:	21 f4       	brne	.+8      	; 0xf36 <bus_init+0x6a>
     f2e:	60 e1       	ldi	r22, 0x10	; 16
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	c5 da       	rcall	.-2678   	; 0x4be <sysclk_enable_module>
     f34:	2f c1       	rjmp	.+606    	; 0x1194 <bus_init+0x2c8>
     f36:	00 34       	cpi	r16, 0x40	; 64
     f38:	b4 e0       	ldi	r27, 0x04	; 4
     f3a:	1b 07       	cpc	r17, r27
     f3c:	21 f4       	brne	.+8      	; 0xf46 <bus_init+0x7a>
     f3e:	68 e0       	ldi	r22, 0x08	; 8
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	bd da       	rcall	.-2694   	; 0x4be <sysclk_enable_module>
     f44:	27 c1       	rjmp	.+590    	; 0x1194 <bus_init+0x2c8>
     f46:	01 15       	cp	r16, r1
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	18 07       	cpc	r17, r24
     f4c:	21 f4       	brne	.+8      	; 0xf56 <bus_init+0x8a>
     f4e:	64 e0       	ldi	r22, 0x04	; 4
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	b5 da       	rcall	.-2710   	; 0x4be <sysclk_enable_module>
     f54:	1f c1       	rjmp	.+574    	; 0x1194 <bus_init+0x2c8>
     f56:	00 38       	cpi	r16, 0x80	; 128
     f58:	a1 e0       	ldi	r26, 0x01	; 1
     f5a:	1a 07       	cpc	r17, r26
     f5c:	21 f4       	brne	.+8      	; 0xf66 <bus_init+0x9a>
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	ad da       	rcall	.-2726   	; 0x4be <sysclk_enable_module>
     f64:	17 c1       	rjmp	.+558    	; 0x1194 <bus_init+0x2c8>
     f66:	01 15       	cp	r16, r1
     f68:	b1 e0       	ldi	r27, 0x01	; 1
     f6a:	1b 07       	cpc	r17, r27
     f6c:	21 f4       	brne	.+8      	; 0xf76 <bus_init+0xaa>
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	a5 da       	rcall	.-2742   	; 0x4be <sysclk_enable_module>
     f74:	0f c1       	rjmp	.+542    	; 0x1194 <bus_init+0x2c8>
     f76:	00 38       	cpi	r16, 0x80	; 128
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	18 07       	cpc	r17, r24
     f7c:	21 f4       	brne	.+8      	; 0xf86 <bus_init+0xba>
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	9d da       	rcall	.-2758   	; 0x4be <sysclk_enable_module>
     f84:	07 c1       	rjmp	.+526    	; 0x1194 <bus_init+0x2c8>
     f86:	00 39       	cpi	r16, 0x90	; 144
     f88:	a3 e0       	ldi	r26, 0x03	; 3
     f8a:	1a 07       	cpc	r17, r26
     f8c:	21 f4       	brne	.+8      	; 0xf96 <bus_init+0xca>
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	95 da       	rcall	.-2774   	; 0x4be <sysclk_enable_module>
     f94:	ff c0       	rjmp	.+510    	; 0x1194 <bus_init+0x2c8>
     f96:	01 15       	cp	r16, r1
     f98:	b2 e0       	ldi	r27, 0x02	; 2
     f9a:	1b 07       	cpc	r17, r27
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <bus_init+0xda>
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	8d da       	rcall	.-2790   	; 0x4be <sysclk_enable_module>
     fa4:	f7 c0       	rjmp	.+494    	; 0x1194 <bus_init+0x2c8>
     fa6:	00 34       	cpi	r16, 0x40	; 64
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	18 07       	cpc	r17, r24
     fac:	21 f4       	brne	.+8      	; 0xfb6 <bus_init+0xea>
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	85 da       	rcall	.-2806   	; 0x4be <sysclk_enable_module>
     fb4:	ef c0       	rjmp	.+478    	; 0x1194 <bus_init+0x2c8>
     fb6:	01 15       	cp	r16, r1
     fb8:	a3 e0       	ldi	r26, 0x03	; 3
     fba:	1a 07       	cpc	r17, r26
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <bus_init+0xfa>
     fbe:	64 e0       	ldi	r22, 0x04	; 4
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	7d da       	rcall	.-2822   	; 0x4be <sysclk_enable_module>
     fc4:	e7 c0       	rjmp	.+462    	; 0x1194 <bus_init+0x2c8>
     fc6:	00 32       	cpi	r16, 0x20	; 32
     fc8:	b3 e0       	ldi	r27, 0x03	; 3
     fca:	1b 07       	cpc	r17, r27
     fcc:	21 f4       	brne	.+8      	; 0xfd6 <bus_init+0x10a>
     fce:	64 e0       	ldi	r22, 0x04	; 4
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	75 da       	rcall	.-2838   	; 0x4be <sysclk_enable_module>
     fd4:	df c0       	rjmp	.+446    	; 0x1194 <bus_init+0x2c8>
     fd6:	01 15       	cp	r16, r1
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	18 07       	cpc	r17, r24
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <bus_init+0x11a>
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	6d da       	rcall	.-2854   	; 0x4be <sysclk_enable_module>
     fe4:	d7 c0       	rjmp	.+430    	; 0x1194 <bus_init+0x2c8>
     fe6:	01 15       	cp	r16, r1
     fe8:	a9 e0       	ldi	r26, 0x09	; 9
     fea:	1a 07       	cpc	r17, r26
     fec:	21 f4       	brne	.+8      	; 0xff6 <bus_init+0x12a>
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	84 e0       	ldi	r24, 0x04	; 4
     ff2:	65 da       	rcall	.-2870   	; 0x4be <sysclk_enable_module>
     ff4:	cf c0       	rjmp	.+414    	; 0x1194 <bus_init+0x2c8>
     ff6:	01 15       	cp	r16, r1
     ff8:	ba e0       	ldi	r27, 0x0A	; 10
     ffa:	1b 07       	cpc	r17, r27
     ffc:	21 f4       	brne	.+8      	; 0x1006 <bus_init+0x13a>
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	5d da       	rcall	.-2886   	; 0x4be <sysclk_enable_module>
    1004:	c7 c0       	rjmp	.+398    	; 0x1194 <bus_init+0x2c8>
    1006:	01 15       	cp	r16, r1
    1008:	8b e0       	ldi	r24, 0x0B	; 11
    100a:	18 07       	cpc	r17, r24
    100c:	21 f4       	brne	.+8      	; 0x1016 <bus_init+0x14a>
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	55 da       	rcall	.-2902   	; 0x4be <sysclk_enable_module>
    1014:	bf c0       	rjmp	.+382    	; 0x1194 <bus_init+0x2c8>
    1016:	00 34       	cpi	r16, 0x40	; 64
    1018:	a8 e0       	ldi	r26, 0x08	; 8
    101a:	1a 07       	cpc	r17, r26
    101c:	21 f4       	brne	.+8      	; 0x1026 <bus_init+0x15a>
    101e:	62 e0       	ldi	r22, 0x02	; 2
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	4d da       	rcall	.-2918   	; 0x4be <sysclk_enable_module>
    1024:	b7 c0       	rjmp	.+366    	; 0x1194 <bus_init+0x2c8>
    1026:	00 34       	cpi	r16, 0x40	; 64
    1028:	b9 e0       	ldi	r27, 0x09	; 9
    102a:	1b 07       	cpc	r17, r27
    102c:	21 f4       	brne	.+8      	; 0x1036 <bus_init+0x16a>
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	84 e0       	ldi	r24, 0x04	; 4
    1032:	45 da       	rcall	.-2934   	; 0x4be <sysclk_enable_module>
    1034:	af c0       	rjmp	.+350    	; 0x1194 <bus_init+0x2c8>
    1036:	00 34       	cpi	r16, 0x40	; 64
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	18 07       	cpc	r17, r24
    103c:	21 f4       	brne	.+8      	; 0x1046 <bus_init+0x17a>
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	85 e0       	ldi	r24, 0x05	; 5
    1042:	3d da       	rcall	.-2950   	; 0x4be <sysclk_enable_module>
    1044:	a7 c0       	rjmp	.+334    	; 0x1194 <bus_init+0x2c8>
    1046:	00 34       	cpi	r16, 0x40	; 64
    1048:	ab e0       	ldi	r26, 0x0B	; 11
    104a:	1a 07       	cpc	r17, r26
    104c:	21 f4       	brne	.+8      	; 0x1056 <bus_init+0x18a>
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	86 e0       	ldi	r24, 0x06	; 6
    1052:	35 da       	rcall	.-2966   	; 0x4be <sysclk_enable_module>
    1054:	9f c0       	rjmp	.+318    	; 0x1194 <bus_init+0x2c8>
    1056:	00 39       	cpi	r16, 0x90	; 144
    1058:	b8 e0       	ldi	r27, 0x08	; 8
    105a:	1b 07       	cpc	r17, r27
    105c:	21 f4       	brne	.+8      	; 0x1066 <bus_init+0x19a>
    105e:	64 e0       	ldi	r22, 0x04	; 4
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	2d da       	rcall	.-2982   	; 0x4be <sysclk_enable_module>
    1064:	97 c0       	rjmp	.+302    	; 0x1194 <bus_init+0x2c8>
    1066:	00 39       	cpi	r16, 0x90	; 144
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	18 07       	cpc	r17, r24
    106c:	21 f4       	brne	.+8      	; 0x1076 <bus_init+0x1aa>
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	25 da       	rcall	.-2998   	; 0x4be <sysclk_enable_module>
    1074:	8f c0       	rjmp	.+286    	; 0x1194 <bus_init+0x2c8>
    1076:	00 39       	cpi	r16, 0x90	; 144
    1078:	aa e0       	ldi	r26, 0x0A	; 10
    107a:	1a 07       	cpc	r17, r26
    107c:	21 f4       	brne	.+8      	; 0x1086 <bus_init+0x1ba>
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	1d da       	rcall	.-3014   	; 0x4be <sysclk_enable_module>
    1084:	87 c0       	rjmp	.+270    	; 0x1194 <bus_init+0x2c8>
    1086:	00 39       	cpi	r16, 0x90	; 144
    1088:	bb e0       	ldi	r27, 0x0B	; 11
    108a:	1b 07       	cpc	r17, r27
    108c:	21 f4       	brne	.+8      	; 0x1096 <bus_init+0x1ca>
    108e:	64 e0       	ldi	r22, 0x04	; 4
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	15 da       	rcall	.-3030   	; 0x4be <sysclk_enable_module>
    1094:	7f c0       	rjmp	.+254    	; 0x1194 <bus_init+0x2c8>
    1096:	00 3c       	cpi	r16, 0xC0	; 192
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	18 07       	cpc	r17, r24
    109c:	21 f4       	brne	.+8      	; 0x10a6 <bus_init+0x1da>
    109e:	68 e0       	ldi	r22, 0x08	; 8
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	0d da       	rcall	.-3046   	; 0x4be <sysclk_enable_module>
    10a4:	77 c0       	rjmp	.+238    	; 0x1194 <bus_init+0x2c8>
    10a6:	00 3c       	cpi	r16, 0xC0	; 192
    10a8:	a9 e0       	ldi	r26, 0x09	; 9
    10aa:	1a 07       	cpc	r17, r26
    10ac:	21 f4       	brne	.+8      	; 0x10b6 <bus_init+0x1ea>
    10ae:	68 e0       	ldi	r22, 0x08	; 8
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	05 da       	rcall	.-3062   	; 0x4be <sysclk_enable_module>
    10b4:	6f c0       	rjmp	.+222    	; 0x1194 <bus_init+0x2c8>
    10b6:	00 3c       	cpi	r16, 0xC0	; 192
    10b8:	ba e0       	ldi	r27, 0x0A	; 10
    10ba:	1b 07       	cpc	r17, r27
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <bus_init+0x1fa>
    10be:	68 e0       	ldi	r22, 0x08	; 8
    10c0:	85 e0       	ldi	r24, 0x05	; 5
    10c2:	fd d9       	rcall	.-3078   	; 0x4be <sysclk_enable_module>
    10c4:	67 c0       	rjmp	.+206    	; 0x1194 <bus_init+0x2c8>
    10c6:	00 3c       	cpi	r16, 0xC0	; 192
    10c8:	8b e0       	ldi	r24, 0x0B	; 11
    10ca:	18 07       	cpc	r17, r24
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <bus_init+0x20a>
    10ce:	68 e0       	ldi	r22, 0x08	; 8
    10d0:	86 e0       	ldi	r24, 0x06	; 6
    10d2:	f5 d9       	rcall	.-3094   	; 0x4be <sysclk_enable_module>
    10d4:	5f c0       	rjmp	.+190    	; 0x1194 <bus_init+0x2c8>
    10d6:	00 3a       	cpi	r16, 0xA0	; 160
    10d8:	a8 e0       	ldi	r26, 0x08	; 8
    10da:	1a 07       	cpc	r17, r26
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <bus_init+0x21a>
    10de:	60 e1       	ldi	r22, 0x10	; 16
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	ed d9       	rcall	.-3110   	; 0x4be <sysclk_enable_module>
    10e4:	57 c0       	rjmp	.+174    	; 0x1194 <bus_init+0x2c8>
    10e6:	00 3a       	cpi	r16, 0xA0	; 160
    10e8:	b9 e0       	ldi	r27, 0x09	; 9
    10ea:	1b 07       	cpc	r17, r27
    10ec:	21 f4       	brne	.+8      	; 0x10f6 <bus_init+0x22a>
    10ee:	60 e1       	ldi	r22, 0x10	; 16
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	e5 d9       	rcall	.-3126   	; 0x4be <sysclk_enable_module>
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <bus_init+0x2c8>
    10f6:	00 3a       	cpi	r16, 0xA0	; 160
    10f8:	8a e0       	ldi	r24, 0x0A	; 10
    10fa:	18 07       	cpc	r17, r24
    10fc:	21 f4       	brne	.+8      	; 0x1106 <bus_init+0x23a>
    10fe:	60 e1       	ldi	r22, 0x10	; 16
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	dd d9       	rcall	.-3142   	; 0x4be <sysclk_enable_module>
    1104:	47 c0       	rjmp	.+142    	; 0x1194 <bus_init+0x2c8>
    1106:	00 3a       	cpi	r16, 0xA0	; 160
    1108:	ab e0       	ldi	r26, 0x0B	; 11
    110a:	1a 07       	cpc	r17, r26
    110c:	21 f4       	brne	.+8      	; 0x1116 <bus_init+0x24a>
    110e:	60 e1       	ldi	r22, 0x10	; 16
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	d5 d9       	rcall	.-3158   	; 0x4be <sysclk_enable_module>
    1114:	3f c0       	rjmp	.+126    	; 0x1194 <bus_init+0x2c8>
    1116:	00 3b       	cpi	r16, 0xB0	; 176
    1118:	b8 e0       	ldi	r27, 0x08	; 8
    111a:	1b 07       	cpc	r17, r27
    111c:	21 f4       	brne	.+8      	; 0x1126 <bus_init+0x25a>
    111e:	60 e2       	ldi	r22, 0x20	; 32
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	cd d9       	rcall	.-3174   	; 0x4be <sysclk_enable_module>
    1124:	37 c0       	rjmp	.+110    	; 0x1194 <bus_init+0x2c8>
    1126:	00 3b       	cpi	r16, 0xB0	; 176
    1128:	89 e0       	ldi	r24, 0x09	; 9
    112a:	18 07       	cpc	r17, r24
    112c:	21 f4       	brne	.+8      	; 0x1136 <bus_init+0x26a>
    112e:	60 e2       	ldi	r22, 0x20	; 32
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	c5 d9       	rcall	.-3190   	; 0x4be <sysclk_enable_module>
    1134:	2f c0       	rjmp	.+94     	; 0x1194 <bus_init+0x2c8>
    1136:	00 3b       	cpi	r16, 0xB0	; 176
    1138:	aa e0       	ldi	r26, 0x0A	; 10
    113a:	1a 07       	cpc	r17, r26
    113c:	21 f4       	brne	.+8      	; 0x1146 <bus_init+0x27a>
    113e:	60 e2       	ldi	r22, 0x20	; 32
    1140:	85 e0       	ldi	r24, 0x05	; 5
    1142:	bd d9       	rcall	.-3206   	; 0x4be <sysclk_enable_module>
    1144:	27 c0       	rjmp	.+78     	; 0x1194 <bus_init+0x2c8>
    1146:	00 3b       	cpi	r16, 0xB0	; 176
    1148:	bb e0       	ldi	r27, 0x0B	; 11
    114a:	1b 07       	cpc	r17, r27
    114c:	21 f4       	brne	.+8      	; 0x1156 <bus_init+0x28a>
    114e:	60 e2       	ldi	r22, 0x20	; 32
    1150:	86 e0       	ldi	r24, 0x06	; 6
    1152:	b5 d9       	rcall	.-3222   	; 0x4be <sysclk_enable_module>
    1154:	1f c0       	rjmp	.+62     	; 0x1194 <bus_init+0x2c8>
    1156:	00 38       	cpi	r16, 0x80	; 128
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	18 07       	cpc	r17, r24
    115c:	21 f4       	brne	.+8      	; 0x1166 <bus_init+0x29a>
    115e:	60 e4       	ldi	r22, 0x40	; 64
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	ad d9       	rcall	.-3238   	; 0x4be <sysclk_enable_module>
    1164:	17 c0       	rjmp	.+46     	; 0x1194 <bus_init+0x2c8>
    1166:	00 39       	cpi	r16, 0x90	; 144
    1168:	a4 e0       	ldi	r26, 0x04	; 4
    116a:	1a 07       	cpc	r17, r26
    116c:	21 f4       	brne	.+8      	; 0x1176 <bus_init+0x2aa>
    116e:	60 e4       	ldi	r22, 0x40	; 64
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	a5 d9       	rcall	.-3254   	; 0x4be <sysclk_enable_module>
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <bus_init+0x2c8>
    1176:	00 3a       	cpi	r16, 0xA0	; 160
    1178:	b4 e0       	ldi	r27, 0x04	; 4
    117a:	1b 07       	cpc	r17, r27
    117c:	21 f4       	brne	.+8      	; 0x1186 <bus_init+0x2ba>
    117e:	60 e4       	ldi	r22, 0x40	; 64
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	9d d9       	rcall	.-3270   	; 0x4be <sysclk_enable_module>
    1184:	07 c0       	rjmp	.+14     	; 0x1194 <bus_init+0x2c8>
    1186:	00 3b       	cpi	r16, 0xB0	; 176
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	18 07       	cpc	r17, r24
    118c:	19 f4       	brne	.+6      	; 0x1194 <bus_init+0x2c8>
    118e:	60 e4       	ldi	r22, 0x40	; 64
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	95 d9       	rcall	.-3286   	; 0x4be <sysclk_enable_module>
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	c8 01       	movw	r24, r16
    119c:	43 d3       	rcall	.+1670   	; 0x1824 <twi_master_init>
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	81 11       	cpse	r24, r1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	89 2f       	mov	r24, r25
    11a6:	29 96       	adiw	r28, 0x09	; 9
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <bus_read>:
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	2b 97       	sbiw	r28, 0x0b	; 11
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	8c 01       	movw	r16, r24
    11ce:	79 01       	movw	r14, r18
    11d0:	fe 01       	movw	r30, r28
    11d2:	31 96       	adiw	r30, 0x01	; 1
    11d4:	8b e0       	ldi	r24, 0x0B	; 11
    11d6:	df 01       	movw	r26, r30
    11d8:	1d 92       	st	X+, r1
    11da:	8a 95       	dec	r24
    11dc:	e9 f7       	brne	.-6      	; 0x11d8 <bus_read+0x22>
    11de:	d8 01       	movw	r26, r16
    11e0:	13 96       	adiw	r26, 0x03	; 3
    11e2:	8c 91       	ld	r24, X
    11e4:	13 97       	sbiw	r26, 0x03	; 3
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6a 83       	std	Y+2, r22	; 0x02
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	4f 83       	std	Y+7, r20	; 0x07
    11f4:	58 87       	std	Y+8, r21	; 0x08
    11f6:	29 87       	std	Y+9, r18	; 0x09
    11f8:	3a 87       	std	Y+10, r19	; 0x0a
    11fa:	16 96       	adiw	r26, 0x06	; 6
    11fc:	8c 91       	ld	r24, X
    11fe:	16 97       	sbiw	r26, 0x06	; 6
    1200:	8b 87       	std	Y+11, r24	; 0x0b
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	bf 01       	movw	r22, r30
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	8d 91       	ld	r24, X+
    120a:	9c 91       	ld	r25, X
    120c:	12 97       	sbiw	r26, 0x02	; 2
    120e:	1f d3       	rcall	.+1598   	; 0x184e <twi_master_transfer>
    1210:	f8 01       	movw	r30, r16
    1212:	85 83       	std	Z+5, r24	; 0x05
    1214:	88 23       	and	r24, r24
    1216:	11 f0       	breq	.+4      	; 0x121c <bus_read+0x66>
    1218:	e1 2c       	mov	r14, r1
    121a:	f1 2c       	mov	r15, r1
    121c:	8e 2d       	mov	r24, r14
    121e:	9f 2d       	mov	r25, r15
    1220:	2b 96       	adiw	r28, 0x0b	; 11
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	08 95       	ret

00001234 <bus_write>:
 * \return The number of Bytes written, which may be less than the
 *         requested number of Bytes in the event of an error.
 */
size_t twi_bus_write(bus_desc_t *bus, uint8_t addr, const void *data,
		size_t count)
{
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	2b 97       	sbiw	r28, 0x0b	; 11
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	8c 01       	movw	r16, r24
    124c:	79 01       	movw	r14, r18
	twi_package_t const pkg = {
    124e:	fe 01       	movw	r30, r28
    1250:	31 96       	adiw	r30, 0x01	; 1
    1252:	8b e0       	ldi	r24, 0x0B	; 11
    1254:	df 01       	movw	r26, r30
    1256:	1d 92       	st	X+, r1
    1258:	8a 95       	dec	r24
    125a:	e9 f7       	brne	.-6      	; 0x1256 <bus_write+0x22>
    125c:	d8 01       	movw	r26, r16
    125e:	13 96       	adiw	r26, 0x03	; 3
    1260:	8c 91       	ld	r24, X
    1262:	13 97       	sbiw	r26, 0x03	; 3
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	4f 83       	std	Y+7, r20	; 0x07
    1272:	58 87       	std	Y+8, r21	; 0x08
    1274:	29 87       	std	Y+9, r18	; 0x09
    1276:	3a 87       	std	Y+10, r19	; 0x0a
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	8c 91       	ld	r24, X
    127c:	16 97       	sbiw	r26, 0x06	; 6
    127e:	8b 87       	std	Y+11, r24	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	bf 01       	movw	r22, r30
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	8d 91       	ld	r24, X+
    1288:	9c 91       	ld	r25, X
    128a:	12 97       	sbiw	r26, 0x02	; 2
    128c:	e0 d2       	rcall	.+1472   	; 0x184e <twi_master_transfer>
		.buffer      = (void *)data,
		.length      = count,
		.no_wait     = bus->no_wait
	};

	bus->status = twi_master_write((twi_master_t)(bus->id), &pkg);
    128e:	f8 01       	movw	r30, r16
    1290:	85 83       	std	Z+5, r24	; 0x05
	return (STATUS_OK == bus->status) ? count : 0;
    1292:	88 23       	and	r24, r24
    1294:	11 f0       	breq	.+4      	; 0x129a <bus_write+0x66>
    1296:	e1 2c       	mov	r14, r1
    1298:	f1 2c       	mov	r15, r1
}
    129a:	8e 2d       	mov	r24, r14
    129c:	9f 2d       	mov	r25, r15
    129e:	2b 96       	adiw	r28, 0x0b	; 11
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	08 95       	ret

000012b2 <usart_serial_getchar>:
#if defined (SENSORS_XPLAINED_BOARD)
	status = sensor_board_irq_connect(intr_pin, handler, arg);
#endif

	return status;
}
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	eb 01       	movw	r28, r22
    12b8:	2d d3       	rcall	.+1626   	; 0x1914 <usart_getchar>
    12ba:	88 83       	st	Y, r24
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <usart_serial_putchar>:
    12c2:	20 c3       	rjmp	.+1600   	; 0x1904 <usart_putchar>
    12c4:	08 95       	ret

000012c6 <sensor_timestamp>:
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	cb 01       	movw	r24, r22
    12cc:	08 95       	ret

000012ce <sensor_list>:
		SENSOR_HAL_DESC((SENSOR_TYPE_LIGHT | SENSOR_TYPE_PROXIMITY),
				sfh7770),
#endif
	};

	*dev_count = ARRAYSIZE(sensor_dev_list);
    12ce:	21 e0       	ldi	r18, 0x01	; 1
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	31 83       	std	Z+1, r19	; 0x01

	return sensor_dev_list;
}
    12d8:	86 e0       	ldi	r24, 0x06	; 6
    12da:	90 e2       	ldi	r25, 0x20	; 32
    12dc:	08 95       	ret

000012de <sensor_find>:
 * \param   type   The type of sensor to find in hardware descriptor list
 *
 * \return  The address of the sensor hardware descriptor, or NULL if not found
 */
sensor_hal_t *sensor_find(sensor_type_t type)
{
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	1f 92       	push	r1
    12e8:	1f 92       	push	r1
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8c 01       	movw	r16, r24
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	ec df       	rcall	.-40     	; 0x12ce <sensor_list>

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	7a 81       	ldd	r23, Y+2	; 0x02
    12fa:	61 15       	cp	r22, r1
    12fc:	71 05       	cpc	r23, r1
    12fe:	01 f1       	breq	.+64     	; 0x1340 <sensor_find+0x62>
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    1300:	fc 01       	movw	r30, r24
    1302:	20 89       	ldd	r18, Z+16	; 0x10
    1304:	31 89       	ldd	r19, Z+17	; 0x11
    1306:	20 23       	and	r18, r16
    1308:	31 23       	and	r19, r17
    130a:	20 17       	cp	r18, r16
    130c:	31 07       	cpc	r19, r17
    130e:	d9 f0       	breq	.+54     	; 0x1346 <sensor_find+0x68>
 *
 * \param   type   The type of sensor to find in hardware descriptor list
 *
 * \return  The address of the sensor hardware descriptor, or NULL if not found
 */
sensor_hal_t *sensor_find(sensor_type_t type)
    1310:	ac 01       	movw	r20, r24
    1312:	4e 5d       	subi	r20, 0xDE	; 222
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	0a c0       	rjmp	.+20     	; 0x1330 <sensor_find+0x52>
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    131c:	fa 01       	movw	r30, r20
    131e:	4e 5d       	subi	r20, 0xDE	; 222
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	80 89       	ldd	r24, Z+16	; 0x10
    1324:	91 89       	ldd	r25, Z+17	; 0x11
    1326:	80 23       	and	r24, r16
    1328:	91 23       	and	r25, r17
    132a:	80 17       	cp	r24, r16
    132c:	91 07       	cpc	r25, r17
    132e:	61 f0       	breq	.+24     	; 0x1348 <sensor_find+0x6a>
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	26 17       	cp	r18, r22
    1336:	37 07       	cpc	r19, r23
    1338:	89 f7       	brne	.-30     	; 0x131c <sensor_find+0x3e>
		if ((dev_list[index].dev_type & type) == type) {
			return &dev_list [index];
		}
	}

	return 0;
    133a:	e0 e0       	ldi	r30, 0x00	; 0
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <sensor_find+0x6a>
    1340:	e0 e0       	ldi	r30, 0x00	; 0
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <sensor_find+0x6a>
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    1346:	fc 01       	movw	r30, r24
			return &dev_list [index];
		}
	}

	return 0;
}
    1348:	8e 2f       	mov	r24, r30
    134a:	9f 2f       	mov	r25, r31
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <sensor_platform_init>:
 * hardware abstraction layer (HAL) for the Xplained Sensor API.
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_platform_init(void)
{
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	27 97       	sbiw	r28, 0x07	; 7
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	de bf       	out	0x3e, r29	; 62
	bool initialized = false;

	/* Initialize the system clock and all clocks derived from it. */

	sysclk_init();
    136a:	69 d8       	rcall	.-3886   	; 0x43e <sysclk_init>
	/* Initialize the board (UC3/XMEGA Xplained & Sensor Xplained boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */

	board_init();
    136c:	74 d0       	rcall	.+232    	; 0x1456 <board_init>

	/* Initialize the sensor bus I/O interface. */

	if (BUSIO_TYPE != BUS_TYPE_UNKNOWN) {
		initialized = sensor_bus_init(&BUSIO_IF, BUSIO_SPEED);
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5a e1       	ldi	r21, 0x1A	; 26
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 eb       	ldi	r24, 0xB0	; 176
    1378:	94 e0       	ldi	r25, 0x04	; 4
    137a:	a8 dd       	rcall	.-1200   	; 0xecc <bus_init>
    137c:	18 2f       	mov	r17, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    137e:	20 ea       	ldi	r18, 0xA0	; 160
    1380:	38 e0       	ldi	r19, 0x08	; 8
    1382:	20 93 1e 21 	sts	0x211E, r18
    1386:	30 93 1f 21 	sts	0x211F, r19
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    138a:	21 e6       	ldi	r18, 0x61	; 97
    138c:	39 e0       	ldi	r19, 0x09	; 9
    138e:	20 93 1c 21 	sts	0x211C, r18
    1392:	30 93 1d 21 	sts	0x211D, r19
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1396:	29 e5       	ldi	r18, 0x59	; 89
    1398:	39 e0       	ldi	r19, 0x09	; 9
    139a:	20 93 1a 21 	sts	0x211A, r18
    139e:	30 93 1b 21 	sts	0x211B, r19
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    13a6:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    13a8:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	52 ec       	ldi	r21, 0xC2	; 194
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	49 83       	std	Y+1, r20	; 0x01
    13b4:	5a 83       	std	Y+2, r21	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
    13b8:	7c 83       	std	Y+4, r23	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    13ba:	60 e1       	ldi	r22, 0x10	; 16
    13bc:	80 d8       	rcall	.-3840   	; 0x4be <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    13be:	be 01       	movw	r22, r28
    13c0:	6f 5f       	subi	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	80 ea       	ldi	r24, 0xA0	; 160
    13c6:	98 e0       	ldi	r25, 0x08	; 8
    13c8:	b9 d3       	rcall	.+1906   	; 0x1b3c <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    13ca:	6c ef       	ldi	r22, 0xFC	; 252
    13cc:	79 e0       	ldi	r23, 0x09	; 9
    13ce:	87 e1       	ldi	r24, 0x17	; 23
    13d0:	9a e0       	ldi	r25, 0x0A	; 10
    13d2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <fdevopen>
    13d6:	4a ea       	ldi	r20, 0xAA	; 170
    13d8:	51 e1       	ldi	r21, 0x11	; 17
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	41 50       	subi	r20, 0x01	; 1
    13e0:	51 09       	sbc	r21, r1
    13e2:	61 09       	sbc	r22, r1
    13e4:	71 09       	sbc	r23, r1
    13e6:	d9 f7       	brne	.-10     	; 0x13de <sensor_platform_init+0x84>
	 * if the device is particularly slow to settle.)
	 */
	delay_ms(SENSOR_START_DELAY_MSEC);

	return initialized;
}
    13e8:	81 2f       	mov	r24, r17
    13ea:	27 96       	adiw	r28, 0x07	; 7
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	08 95       	ret

000013f8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	1f 92       	push	r1
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    1402:	80 91 1e 21 	lds	r24, 0x211E
    1406:	90 91 1f 21 	lds	r25, 0x211F
    140a:	e0 91 1a 21 	lds	r30, 0x211A
    140e:	f0 91 1b 21 	lds	r31, 0x211B
    1412:	be 01       	movw	r22, r28
    1414:	6f 5f       	subi	r22, 0xFF	; 255
    1416:	7f 4f       	sbci	r23, 0xFF	; 255
    1418:	19 95       	eicall
	return c;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	28 2f       	mov	r18, r24
    141e:	33 27       	eor	r19, r19
    1420:	27 fd       	sbrc	r18, 7
    1422:	30 95       	com	r19
}
    1424:	93 2f       	mov	r25, r19
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    142e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1430:	80 91 1e 21 	lds	r24, 0x211E
    1434:	90 91 1f 21 	lds	r25, 0x211F
    1438:	e0 91 1c 21 	lds	r30, 0x211C
    143c:	f0 91 1d 21 	lds	r31, 0x211D
    1440:	19 95       	eicall
    1442:	99 23       	and	r25, r25
    1444:	1c f4       	brge	.+6      	; 0x144c <_write+0x1e>
		return -1;
    1446:	2f ef       	ldi	r18, 0xFF	; 255
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <_write+0x22>
	}
	return 1;
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	30 e0       	ldi	r19, 0x00	; 0
}
    1450:	82 2f       	mov	r24, r18
    1452:	93 2f       	mov	r25, r19
    1454:	08 95       	ret

00001456 <board_init>:
    1456:	43 e0       	ldi	r20, 0x03	; 3
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	80 e8       	ldi	r24, 0x80	; 128
    145e:	96 e0       	ldi	r25, 0x06	; 6
    1460:	3a d8       	rcall	.-3980   	; 0x4d6 <ioport_configure_port_pin>
    1462:	43 e0       	ldi	r20, 0x03	; 3
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	80 e8       	ldi	r24, 0x80	; 128
    146a:	96 e0       	ldi	r25, 0x06	; 6
    146c:	34 d8       	rcall	.-3992   	; 0x4d6 <ioport_configure_port_pin>
    146e:	43 e0       	ldi	r20, 0x03	; 3
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	64 e0       	ldi	r22, 0x04	; 4
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	96 e0       	ldi	r25, 0x06	; 6
    1478:	2e d8       	rcall	.-4004   	; 0x4d6 <ioport_configure_port_pin>
    147a:	43 e0       	ldi	r20, 0x03	; 3
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	68 e0       	ldi	r22, 0x08	; 8
    1480:	80 e8       	ldi	r24, 0x80	; 128
    1482:	96 e0       	ldi	r25, 0x06	; 6
    1484:	28 d8       	rcall	.-4016   	; 0x4d6 <ioport_configure_port_pin>
    1486:	43 e0       	ldi	r20, 0x03	; 3
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	60 e1       	ldi	r22, 0x10	; 16
    148c:	80 e8       	ldi	r24, 0x80	; 128
    148e:	96 e0       	ldi	r25, 0x06	; 6
    1490:	22 d8       	rcall	.-4028   	; 0x4d6 <ioport_configure_port_pin>
    1492:	43 e0       	ldi	r20, 0x03	; 3
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	60 e2       	ldi	r22, 0x20	; 32
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	96 e0       	ldi	r25, 0x06	; 6
    149c:	1c d8       	rcall	.-4040   	; 0x4d6 <ioport_configure_port_pin>
    149e:	43 e0       	ldi	r20, 0x03	; 3
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e4       	ldi	r22, 0x40	; 64
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	96 e0       	ldi	r25, 0x06	; 6
    14a8:	16 d8       	rcall	.-4052   	; 0x4d6 <ioport_configure_port_pin>
    14aa:	43 e0       	ldi	r20, 0x03	; 3
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	60 e8       	ldi	r22, 0x80	; 128
    14b0:	80 e8       	ldi	r24, 0x80	; 128
    14b2:	96 e0       	ldi	r25, 0x06	; 6
    14b4:	10 d8       	rcall	.-4064   	; 0x4d6 <ioport_configure_port_pin>
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	58 e1       	ldi	r21, 0x18	; 24
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	80 e6       	ldi	r24, 0x60	; 96
    14be:	96 e0       	ldi	r25, 0x06	; 6
    14c0:	0a d8       	rcall	.-4076   	; 0x4d6 <ioport_configure_port_pin>
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	58 e1       	ldi	r21, 0x18	; 24
    14c6:	62 e0       	ldi	r22, 0x02	; 2
    14c8:	80 e6       	ldi	r24, 0x60	; 96
    14ca:	96 e0       	ldi	r25, 0x06	; 6
    14cc:	04 d8       	rcall	.-4088   	; 0x4d6 <ioport_configure_port_pin>
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	58 e1       	ldi	r21, 0x18	; 24
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	80 e6       	ldi	r24, 0x60	; 96
    14d6:	96 e0       	ldi	r25, 0x06	; 6
    14d8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	58 e1       	ldi	r21, 0x18	; 24
    14e0:	68 e0       	ldi	r22, 0x08	; 8
    14e2:	80 e6       	ldi	r24, 0x60	; 96
    14e4:	96 e0       	ldi	r25, 0x06	; 6
    14e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	58 e1       	ldi	r21, 0x18	; 24
    14ee:	60 e1       	ldi	r22, 0x10	; 16
    14f0:	80 e6       	ldi	r24, 0x60	; 96
    14f2:	96 e0       	ldi	r25, 0x06	; 6
    14f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	58 e1       	ldi	r21, 0x18	; 24
    14fc:	60 e2       	ldi	r22, 0x20	; 32
    14fe:	80 e6       	ldi	r24, 0x60	; 96
    1500:	96 e0       	ldi	r25, 0x06	; 6
    1502:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	58 e1       	ldi	r21, 0x18	; 24
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	80 ee       	ldi	r24, 0xE0	; 224
    150e:	97 e0       	ldi	r25, 0x07	; 7
    1510:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	58 e1       	ldi	r21, 0x18	; 24
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	80 ee       	ldi	r24, 0xE0	; 224
    151c:	97 e0       	ldi	r25, 0x07	; 7
    151e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    1522:	43 e0       	ldi	r20, 0x03	; 3
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	68 e0       	ldi	r22, 0x08	; 8
    1528:	80 e4       	ldi	r24, 0x40	; 64
    152a:	96 e0       	ldi	r25, 0x06	; 6
    152c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	64 e0       	ldi	r22, 0x04	; 4
    1536:	80 e4       	ldi	r24, 0x40	; 64
    1538:	96 e0       	ldi	r25, 0x06	; 6
    153a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    153e:	43 e0       	ldi	r20, 0x03	; 3
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	68 e0       	ldi	r22, 0x08	; 8
    1544:	80 e6       	ldi	r24, 0x60	; 96
    1546:	96 e0       	ldi	r25, 0x06	; 6
    1548:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	64 e0       	ldi	r22, 0x04	; 4
    1552:	80 e6       	ldi	r24, 0x60	; 96
    1554:	96 e0       	ldi	r25, 0x06	; 6
    1556:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ioport_configure_port_pin>
#if defined (SENSORS_XPLAINED_BOARD)
	/* Configure the Xplained Sensor extension board, if any, after
	 * the platform Xplained board has configured basic clock settings,
	 * GPIO pin mapping, interrupt controller options, etc.
	 */
	sensor_board_init ();
    155a:	0c 94 0c 02 	jmp	0x418	; 0x418 <sensor_board_init>

0000155e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    155e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1560:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1562:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1564:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1566:	60 83       	st	Z, r22
	ret                             // Return to caller
    1568:	08 95       	ret

0000156a <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    156e:	e0 91 0f 21 	lds	r30, 0x210F
    1572:	f0 91 10 21 	lds	r31, 0x2110
    1576:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1578:	83 ff       	sbrs	r24, 3
    157a:	08 c0       	rjmp	.+16     	; 0x158c <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1584:	86 ef       	ldi	r24, 0xF6	; 246
    1586:	80 93 19 21 	sts	0x2119, r24
    158a:	81 c0       	rjmp	.+258    	; 0x168e <twim_interrupt_handler+0x124>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    158c:	98 2f       	mov	r25, r24
    158e:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1590:	31 f0       	breq	.+12     	; 0x159e <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	80 93 19 21 	sts	0x2119, r24
    159c:	78 c0       	rjmp	.+240    	; 0x168e <twim_interrupt_handler+0x124>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    159e:	86 ff       	sbrs	r24, 6
    15a0:	40 c0       	rjmp	.+128    	; 0x1622 <twim_interrupt_handler+0xb8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    15a2:	a0 91 11 21 	lds	r26, 0x2111
    15a6:	b0 91 12 21 	lds	r27, 0x2112

	if (transfer.addr_count < pkg->addr_length) {
    15aa:	80 91 13 21 	lds	r24, 0x2113
    15ae:	90 91 14 21 	lds	r25, 0x2114
    15b2:	14 96       	adiw	r26, 0x04	; 4
    15b4:	2d 91       	ld	r18, X+
    15b6:	3c 91       	ld	r19, X
    15b8:	15 97       	sbiw	r26, 0x05	; 5
    15ba:	82 17       	cp	r24, r18
    15bc:	93 07       	cpc	r25, r19
    15be:	5c f4       	brge	.+22     	; 0x15d6 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    15c0:	a8 0f       	add	r26, r24
    15c2:	b9 1f       	adc	r27, r25
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	2c 91       	ld	r18, X
    15c8:	27 83       	std	Z+7, r18	; 0x07
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	80 93 13 21 	sts	0x2113, r24
    15d0:	90 93 14 21 	sts	0x2114, r25
    15d4:	5c c0       	rjmp	.+184    	; 0x168e <twim_interrupt_handler+0x124>

	} else if (transfer.data_count < pkg->length) {
    15d6:	80 91 15 21 	lds	r24, 0x2115
    15da:	90 91 16 21 	lds	r25, 0x2116
    15de:	18 96       	adiw	r26, 0x08	; 8
    15e0:	2d 91       	ld	r18, X+
    15e2:	3c 91       	ld	r19, X
    15e4:	19 97       	sbiw	r26, 0x09	; 9
    15e6:	82 17       	cp	r24, r18
    15e8:	93 07       	cpc	r25, r19
    15ea:	b0 f4       	brcc	.+44     	; 0x1618 <twim_interrupt_handler+0xae>

		if (transfer.read) {
    15ec:	20 91 17 21 	lds	r18, 0x2117
    15f0:	22 23       	and	r18, r18
    15f2:	21 f0       	breq	.+8      	; 0x15fc <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    15f4:	86 81       	ldd	r24, Z+6	; 0x06
    15f6:	81 60       	ori	r24, 0x01	; 1
    15f8:	86 83       	std	Z+6, r24	; 0x06
    15fa:	49 c0       	rjmp	.+146    	; 0x168e <twim_interrupt_handler+0x124>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    15fc:	16 96       	adiw	r26, 0x06	; 6
    15fe:	0d 90       	ld	r0, X+
    1600:	bc 91       	ld	r27, X
    1602:	a0 2d       	mov	r26, r0
    1604:	a8 0f       	add	r26, r24
    1606:	b9 1f       	adc	r27, r25
    1608:	2c 91       	ld	r18, X
    160a:	27 83       	std	Z+7, r18	; 0x07
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	80 93 15 21 	sts	0x2115, r24
    1612:	90 93 16 21 	sts	0x2116, r25
    1616:	3b c0       	rjmp	.+118    	; 0x168e <twim_interrupt_handler+0x124>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    161c:	10 92 19 21 	sts	0x2119, r1
    1620:	36 c0       	rjmp	.+108    	; 0x168e <twim_interrupt_handler+0x124>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1622:	88 23       	and	r24, r24
    1624:	8c f5       	brge	.+98     	; 0x1688 <twim_interrupt_handler+0x11e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1626:	a0 91 11 21 	lds	r26, 0x2111
    162a:	b0 91 12 21 	lds	r27, 0x2112

	if (transfer.data_count < pkg->length) {
    162e:	80 91 15 21 	lds	r24, 0x2115
    1632:	90 91 16 21 	lds	r25, 0x2116
    1636:	18 96       	adiw	r26, 0x08	; 8
    1638:	2d 91       	ld	r18, X+
    163a:	3c 91       	ld	r19, X
    163c:	19 97       	sbiw	r26, 0x09	; 9
    163e:	82 17       	cp	r24, r18
    1640:	93 07       	cpc	r25, r19
    1642:	e0 f4       	brcc	.+56     	; 0x167c <twim_interrupt_handler+0x112>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    1644:	27 81       	ldd	r18, Z+7	; 0x07
    1646:	16 96       	adiw	r26, 0x06	; 6
    1648:	cd 91       	ld	r28, X+
    164a:	dc 91       	ld	r29, X
    164c:	17 97       	sbiw	r26, 0x07	; 7
    164e:	c8 0f       	add	r28, r24
    1650:	d9 1f       	adc	r29, r25
    1652:	28 83       	st	Y, r18
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	80 93 15 21 	sts	0x2115, r24
    165a:	90 93 16 21 	sts	0x2116, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    165e:	18 96       	adiw	r26, 0x08	; 8
    1660:	2d 91       	ld	r18, X+
    1662:	3c 91       	ld	r19, X
    1664:	19 97       	sbiw	r26, 0x09	; 9
    1666:	82 17       	cp	r24, r18
    1668:	93 07       	cpc	r25, r19
    166a:	18 f4       	brcc	.+6      	; 0x1672 <twim_interrupt_handler+0x108>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	83 83       	std	Z+3, r24	; 0x03
    1670:	0e c0       	rjmp	.+28     	; 0x168e <twim_interrupt_handler+0x124>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1672:	87 e0       	ldi	r24, 0x07	; 7
    1674:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1676:	10 92 19 21 	sts	0x2119, r1
    167a:	09 c0       	rjmp	.+18     	; 0x168e <twim_interrupt_handler+0x124>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1680:	89 ef       	ldi	r24, 0xF9	; 249
    1682:	80 93 19 21 	sts	0x2119, r24
    1686:	03 c0       	rjmp	.+6      	; 0x168e <twim_interrupt_handler+0x124>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1688:	8b ef       	ldi	r24, 0xFB	; 251
    168a:	80 93 19 21 	sts	0x2119, r24
	}
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	08 b6       	in	r0, 0x38	; 56
    16a0:	0f 92       	push	r0
    16a2:	18 be       	out	0x38, r1	; 56
    16a4:	09 b6       	in	r0, 0x39	; 57
    16a6:	0f 92       	push	r0
    16a8:	19 be       	out	0x39, r1	; 57
    16aa:	0b b6       	in	r0, 0x3b	; 59
    16ac:	0f 92       	push	r0
    16ae:	1b be       	out	0x3b, r1	; 59
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	50 df       	rcall	.-352    	; 0x156a <twim_interrupt_handler>
    16ca:	ff 91       	pop	r31
    16cc:	ef 91       	pop	r30
    16ce:	bf 91       	pop	r27
    16d0:	af 91       	pop	r26
    16d2:	9f 91       	pop	r25
    16d4:	8f 91       	pop	r24
    16d6:	7f 91       	pop	r23
    16d8:	6f 91       	pop	r22
    16da:	5f 91       	pop	r21
    16dc:	4f 91       	pop	r20
    16de:	3f 91       	pop	r19
    16e0:	2f 91       	pop	r18
    16e2:	0f 90       	pop	r0
    16e4:	0b be       	out	0x3b, r0	; 59
    16e6:	0f 90       	pop	r0
    16e8:	09 be       	out	0x39, r0	; 57
    16ea:	0f 90       	pop	r0
    16ec:	08 be       	out	0x38, r0	; 56
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	08 b6       	in	r0, 0x38	; 56
    1704:	0f 92       	push	r0
    1706:	18 be       	out	0x38, r1	; 56
    1708:	09 b6       	in	r0, 0x39	; 57
    170a:	0f 92       	push	r0
    170c:	19 be       	out	0x39, r1	; 57
    170e:	0b b6       	in	r0, 0x3b	; 59
    1710:	0f 92       	push	r0
    1712:	1b be       	out	0x3b, r1	; 59
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	5f 93       	push	r21
    171c:	6f 93       	push	r22
    171e:	7f 93       	push	r23
    1720:	8f 93       	push	r24
    1722:	9f 93       	push	r25
    1724:	af 93       	push	r26
    1726:	bf 93       	push	r27
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
    172c:	1e df       	rcall	.-452    	; 0x156a <twim_interrupt_handler>
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0b be       	out	0x3b, r0	; 59
    174a:	0f 90       	pop	r0
    174c:	09 be       	out	0x39, r0	; 57
    174e:	0f 90       	pop	r0
    1750:	08 be       	out	0x38, r0	; 56
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	08 b6       	in	r0, 0x38	; 56
    1768:	0f 92       	push	r0
    176a:	18 be       	out	0x38, r1	; 56
    176c:	09 b6       	in	r0, 0x39	; 57
    176e:	0f 92       	push	r0
    1770:	19 be       	out	0x39, r1	; 57
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	1b be       	out	0x3b, r1	; 59
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	ec de       	rcall	.-552    	; 0x156a <twim_interrupt_handler>
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0b be       	out	0x3b, r0	; 59
    17ae:	0f 90       	pop	r0
    17b0:	09 be       	out	0x39, r0	; 57
    17b2:	0f 90       	pop	r0
    17b4:	08 be       	out	0x38, r0	; 56
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	0f 90       	pop	r0
    17bc:	1f 90       	pop	r1
    17be:	18 95       	reti

000017c0 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	08 b6       	in	r0, 0x38	; 56
    17cc:	0f 92       	push	r0
    17ce:	18 be       	out	0x38, r1	; 56
    17d0:	09 b6       	in	r0, 0x39	; 57
    17d2:	0f 92       	push	r0
    17d4:	19 be       	out	0x39, r1	; 57
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	1b be       	out	0x3b, r1	; 59
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	ba de       	rcall	.-652    	; 0x156a <twim_interrupt_handler>
    17f6:	ff 91       	pop	r31
    17f8:	ef 91       	pop	r30
    17fa:	bf 91       	pop	r27
    17fc:	af 91       	pop	r26
    17fe:	9f 91       	pop	r25
    1800:	8f 91       	pop	r24
    1802:	7f 91       	pop	r23
    1804:	6f 91       	pop	r22
    1806:	5f 91       	pop	r21
    1808:	4f 91       	pop	r20
    180a:	3f 91       	pop	r19
    180c:	2f 91       	pop	r18
    180e:	0f 90       	pop	r0
    1810:	0b be       	out	0x3b, r0	; 59
    1812:	0f 90       	pop	r0
    1814:	09 be       	out	0x39, r0	; 57
    1816:	0f 90       	pop	r0
    1818:	08 be       	out	0x38, r0	; 56
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    1824:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    1826:	db 01       	movw	r26, r22
    1828:	14 96       	adiw	r26, 0x04	; 4
    182a:	8c 91       	ld	r24, X
    182c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    182e:	88 eb       	ldi	r24, 0xB8	; 184
    1830:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    1836:	10 92 18 21 	sts	0x2118, r1
	transfer.status    = STATUS_OK;
    183a:	10 92 19 21 	sts	0x2119, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    183e:	e0 ea       	ldi	r30, 0xA0	; 160
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	82 60       	ori	r24, 0x02	; 2
    1846:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    1848:	78 94       	sei

	return STATUS_OK;
}
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	08 95       	ret

0000184e <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	09 f4       	brne	.+2      	; 0x1854 <twi_master_transfer+0x6>
    1852:	52 c0       	rjmp	.+164    	; 0x18f8 <twi_master_transfer+0xaa>
    1854:	61 15       	cp	r22, r1
    1856:	71 05       	cpc	r23, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <twi_master_transfer+0xe>
    185a:	50 c0       	rjmp	.+160    	; 0x18fc <twi_master_transfer+0xae>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    185c:	fb 01       	movw	r30, r22
    185e:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    1860:	20 91 18 21 	lds	r18, 0x2118
    1864:	02 c0       	rjmp	.+4      	; 0x186a <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    1866:	31 11       	cpse	r19, r1
    1868:	4b c0       	rjmp	.+150    	; 0x1900 <twi_master_transfer+0xb2>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    186a:	21 11       	cpse	r18, r1
    186c:	fc cf       	rjmp	.-8      	; 0x1866 <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    186e:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    1870:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    1872:	31 e0       	ldi	r19, 0x01	; 1
    1874:	30 93 18 21 	sts	0x2118, r19
	transfer.status = OPERATION_IN_PROGRESS;
    1878:	30 e8       	ldi	r19, 0x80	; 128
    187a:	30 93 19 21 	sts	0x2119, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    187e:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    1880:	80 93 0f 21 	sts	0x210F, r24
    1884:	90 93 10 21 	sts	0x2110, r25
		transfer.pkg         = (twi_package_t *) package;
    1888:	60 93 11 21 	sts	0x2111, r22
    188c:	70 93 12 21 	sts	0x2112, r23
		transfer.addr_count  = 0;
    1890:	10 92 13 21 	sts	0x2113, r1
    1894:	10 92 14 21 	sts	0x2114, r1
		transfer.data_count  = 0;
    1898:	10 92 15 21 	sts	0x2115, r1
    189c:	10 92 16 21 	sts	0x2116, r1
		transfer.read        = read;
    18a0:	40 93 17 21 	sts	0x2117, r20

		uint8_t const chip = (package->chip) << 1;
    18a4:	fb 01       	movw	r30, r22
    18a6:	50 81       	ld	r21, Z
    18a8:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    18aa:	24 81       	ldd	r18, Z+4	; 0x04
    18ac:	35 81       	ldd	r19, Z+5	; 0x05
    18ae:	23 2b       	or	r18, r19
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <twi_master_transfer+0x68>
    18b2:	41 11       	cpse	r20, r1
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <twi_master_transfer+0x6e>
			transfer.bus->MASTER.ADDR = chip;
    18b6:	fc 01       	movw	r30, r24
    18b8:	56 83       	std	Z+6, r21	; 0x06
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <twi_master_transfer+0x74>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    18bc:	51 60       	ori	r21, 0x01	; 1
    18be:	fc 01       	movw	r30, r24
    18c0:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    18c2:	e9 e1       	ldi	r30, 0x19	; 25
    18c4:	f1 e2       	ldi	r31, 0x21	; 33
    18c6:	80 81       	ld	r24, Z
    18c8:	80 38       	cpi	r24, 0x80	; 128
    18ca:	e9 f3       	breq	.-6      	; 0x18c6 <twi_master_transfer+0x78>

	while (! twim_idle(transfer.bus)) { barrier(); }
    18cc:	e0 91 0f 21 	lds	r30, 0x210F
    18d0:	f0 91 10 21 	lds	r31, 0x2110
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    18d4:	84 81       	ldd	r24, Z+4	; 0x04
    18d6:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	49 f0       	breq	.+18     	; 0x18ee <twi_master_transfer+0xa0>
    18dc:	af e0       	ldi	r26, 0x0F	; 15
    18de:	b1 e2       	ldi	r27, 0x21	; 33
    18e0:	ed 91       	ld	r30, X+
    18e2:	fc 91       	ld	r31, X
    18e4:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    18e6:	84 81       	ldd	r24, Z+4	; 0x04
    18e8:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <twi_master_transfer+0x92>

	status_code_t const status = transfer.status;
    18ee:	80 91 19 21 	lds	r24, 0x2119

	transfer.locked = false;
    18f2:	10 92 18 21 	sts	0x2118, r1
    18f6:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    18f8:	88 ef       	ldi	r24, 0xF8	; 248
    18fa:	08 95       	ret
    18fc:	88 ef       	ldi	r24, 0xF8	; 248
    18fe:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    1900:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    1902:	08 95       	ret

00001904 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1904:	fc 01       	movw	r30, r24
    1906:	81 81       	ldd	r24, Z+1	; 0x01
    1908:	85 ff       	sbrs	r24, 5
    190a:	fd cf       	rjmp	.-6      	; 0x1906 <usart_putchar+0x2>
    190c:	60 83       	st	Z, r22
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	08 95       	ret

00001914 <usart_getchar>:
    1914:	fc 01       	movw	r30, r24
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	88 23       	and	r24, r24
    191a:	ec f7       	brge	.-6      	; 0x1916 <usart_getchar+0x2>
    191c:	80 81       	ld	r24, Z
    191e:	08 95       	ret

00001920 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1920:	4f 92       	push	r4
    1922:	5f 92       	push	r5
    1924:	6f 92       	push	r6
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ec 01       	movw	r28, r24
    1942:	4a 01       	movw	r8, r20
    1944:	5b 01       	movw	r10, r22
    1946:	28 01       	movw	r4, r16
    1948:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    194a:	d9 01       	movw	r26, r18
    194c:	c8 01       	movw	r24, r16
    194e:	68 94       	set
    1950:	12 f8       	bld	r1, 2
    1952:	b6 95       	lsr	r27
    1954:	a7 95       	ror	r26
    1956:	97 95       	ror	r25
    1958:	87 95       	ror	r24
    195a:	16 94       	lsr	r1
    195c:	d1 f7       	brne	.-12     	; 0x1952 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    195e:	b9 01       	movw	r22, r18
    1960:	a8 01       	movw	r20, r16
    1962:	03 2e       	mov	r0, r19
    1964:	36 e1       	ldi	r19, 0x16	; 22
    1966:	76 95       	lsr	r23
    1968:	67 95       	ror	r22
    196a:	57 95       	ror	r21
    196c:	47 95       	ror	r20
    196e:	3a 95       	dec	r19
    1970:	d1 f7       	brne	.-12     	; 0x1966 <usart_set_baudrate+0x46>
    1972:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	22 fd       	sbrc	r18, 2
    1978:	08 c0       	rjmp	.+16     	; 0x198a <usart_set_baudrate+0x6a>
		max_rate /= 2;
    197a:	b6 95       	lsr	r27
    197c:	a7 95       	ror	r26
    197e:	97 95       	ror	r25
    1980:	87 95       	ror	r24
		min_rate /= 2;
    1982:	76 95       	lsr	r23
    1984:	67 95       	ror	r22
    1986:	57 95       	ror	r21
    1988:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    198a:	88 15       	cp	r24, r8
    198c:	99 05       	cpc	r25, r9
    198e:	aa 05       	cpc	r26, r10
    1990:	bb 05       	cpc	r27, r11
    1992:	08 f4       	brcc	.+2      	; 0x1996 <usart_set_baudrate+0x76>
    1994:	aa c0       	rjmp	.+340    	; 0x1aea <usart_set_baudrate+0x1ca>
    1996:	84 16       	cp	r8, r20
    1998:	95 06       	cpc	r9, r21
    199a:	a6 06       	cpc	r10, r22
    199c:	b7 06       	cpc	r11, r23
    199e:	08 f4       	brcc	.+2      	; 0x19a2 <usart_set_baudrate+0x82>
    19a0:	a6 c0       	rjmp	.+332    	; 0x1aee <usart_set_baudrate+0x1ce>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	82 fd       	sbrc	r24, 2
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <usart_set_baudrate+0x90>
		baud *= 2;
    19a8:	88 0c       	add	r8, r8
    19aa:	99 1c       	adc	r9, r9
    19ac:	aa 1c       	adc	r10, r10
    19ae:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    19b0:	c3 01       	movw	r24, r6
    19b2:	b2 01       	movw	r22, r4
    19b4:	a5 01       	movw	r20, r10
    19b6:	94 01       	movw	r18, r8
    19b8:	f5 d7       	rcall	.+4074   	; 0x29a4 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    19ba:	2f 3f       	cpi	r18, 0xFF	; 255
    19bc:	31 05       	cpc	r19, r1
    19be:	41 05       	cpc	r20, r1
    19c0:	51 05       	cpc	r21, r1
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <usart_set_baudrate+0xa6>
    19c4:	96 c0       	rjmp	.+300    	; 0x1af2 <usart_set_baudrate+0x1d2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    19c6:	c1 2c       	mov	r12, r1
    19c8:	d1 2c       	mov	r13, r1
    19ca:	76 01       	movw	r14, r12
    19cc:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    19ce:	19 ef       	ldi	r17, 0xF9	; 249
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    19d2:	2c 15       	cp	r18, r12
    19d4:	3d 05       	cpc	r19, r13
    19d6:	4e 05       	cpc	r20, r14
    19d8:	5f 05       	cpc	r21, r15
    19da:	68 f0       	brcs	.+26     	; 0x19f6 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    19dc:	cc 0c       	add	r12, r12
    19de:	dd 1c       	adc	r13, r13
    19e0:	ee 1c       	adc	r14, r14
    19e2:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    19e4:	1d 3f       	cpi	r17, 0xFD	; 253
    19e6:	14 f4       	brge	.+4      	; 0x19ec <usart_set_baudrate+0xcc>
			limit |= 1;
    19e8:	68 94       	set
    19ea:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    19ec:	1f 5f       	subi	r17, 0xFF	; 255
    19ee:	17 30       	cpi	r17, 0x07	; 7
    19f0:	81 f7       	brne	.-32     	; 0x19d2 <usart_set_baudrate+0xb2>
    19f2:	21 2f       	mov	r18, r17
    19f4:	52 c0       	rjmp	.+164    	; 0x1a9a <usart_set_baudrate+0x17a>
    19f6:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    19f8:	11 23       	and	r17, r17
    19fa:	0c f0       	brlt	.+2      	; 0x19fe <usart_set_baudrate+0xde>
    19fc:	4e c0       	rjmp	.+156    	; 0x1a9a <usart_set_baudrate+0x17a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    19fe:	d5 01       	movw	r26, r10
    1a00:	c4 01       	movw	r24, r8
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	aa 1f       	adc	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	aa 1f       	adc	r26, r26
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	48 1a       	sub	r4, r24
    1a1c:	59 0a       	sbc	r5, r25
    1a1e:	6a 0a       	sbc	r6, r26
    1a20:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1a22:	1e 3f       	cpi	r17, 0xFE	; 254
    1a24:	ec f4       	brge	.+58     	; 0x1a60 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1a26:	6d ef       	ldi	r22, 0xFD	; 253
    1a28:	7f ef       	ldi	r23, 0xFF	; 255
    1a2a:	61 1b       	sub	r22, r17
    1a2c:	71 09       	sbc	r23, r1
    1a2e:	17 fd       	sbrc	r17, 7
    1a30:	73 95       	inc	r23
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <usart_set_baudrate+0x11c>
    1a34:	44 0c       	add	r4, r4
    1a36:	55 1c       	adc	r5, r5
    1a38:	66 1c       	adc	r6, r6
    1a3a:	77 1c       	adc	r7, r7
    1a3c:	6a 95       	dec	r22
    1a3e:	d2 f7       	brpl	.-12     	; 0x1a34 <usart_set_baudrate+0x114>
    1a40:	d5 01       	movw	r26, r10
    1a42:	c4 01       	movw	r24, r8
    1a44:	b6 95       	lsr	r27
    1a46:	a7 95       	ror	r26
    1a48:	97 95       	ror	r25
    1a4a:	87 95       	ror	r24
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	64 0d       	add	r22, r4
    1a52:	75 1d       	adc	r23, r5
    1a54:	86 1d       	adc	r24, r6
    1a56:	97 1d       	adc	r25, r7
    1a58:	a5 01       	movw	r20, r10
    1a5a:	94 01       	movw	r18, r8
    1a5c:	a3 d7       	rcall	.+3910   	; 0x29a4 <__udivmodsi4>
    1a5e:	3c c0       	rjmp	.+120    	; 0x1ad8 <usart_set_baudrate+0x1b8>
		} else {
			baud <<= exp + 3;
    1a60:	21 2f       	mov	r18, r17
    1a62:	33 27       	eor	r19, r19
    1a64:	27 fd       	sbrc	r18, 7
    1a66:	30 95       	com	r19
    1a68:	2d 5f       	subi	r18, 0xFD	; 253
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	d5 01       	movw	r26, r10
    1a6e:	c4 01       	movw	r24, r8
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <usart_set_baudrate+0x15a>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	aa 1f       	adc	r26, r26
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	2a 95       	dec	r18
    1a7c:	d2 f7       	brpl	.-12     	; 0x1a72 <usart_set_baudrate+0x152>
    1a7e:	9c 01       	movw	r18, r24
    1a80:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1a82:	b6 95       	lsr	r27
    1a84:	a7 95       	ror	r26
    1a86:	97 95       	ror	r25
    1a88:	87 95       	ror	r24
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	64 0d       	add	r22, r4
    1a90:	75 1d       	adc	r23, r5
    1a92:	86 1d       	adc	r24, r6
    1a94:	97 1d       	adc	r25, r7
    1a96:	86 d7       	rcall	.+3852   	; 0x29a4 <__udivmodsi4>
    1a98:	1f c0       	rjmp	.+62     	; 0x1ad8 <usart_set_baudrate+0x1b8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1a9a:	33 27       	eor	r19, r19
    1a9c:	27 fd       	sbrc	r18, 7
    1a9e:	30 95       	com	r19
    1aa0:	2d 5f       	subi	r18, 0xFD	; 253
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	d5 01       	movw	r26, r10
    1aa6:	c4 01       	movw	r24, r8
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <usart_set_baudrate+0x192>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	aa 1f       	adc	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	2a 95       	dec	r18
    1ab4:	d2 f7       	brpl	.-12     	; 0x1aaa <usart_set_baudrate+0x18a>
    1ab6:	9c 01       	movw	r18, r24
    1ab8:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1aba:	b6 95       	lsr	r27
    1abc:	a7 95       	ror	r26
    1abe:	97 95       	ror	r25
    1ac0:	87 95       	ror	r24
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	64 0d       	add	r22, r4
    1ac8:	75 1d       	adc	r23, r5
    1aca:	86 1d       	adc	r24, r6
    1acc:	97 1d       	adc	r25, r7
    1ace:	6a d7       	rcall	.+3796   	; 0x29a4 <__udivmodsi4>
    1ad0:	21 50       	subi	r18, 0x01	; 1
    1ad2:	31 09       	sbc	r19, r1
    1ad4:	41 09       	sbc	r20, r1
    1ad6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1ad8:	83 2f       	mov	r24, r19
    1ada:	8f 70       	andi	r24, 0x0F	; 15
    1adc:	12 95       	swap	r17
    1ade:	10 7f       	andi	r17, 0xF0	; 240
    1ae0:	18 2b       	or	r17, r24
    1ae2:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1ae4:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	18 c0       	rjmp	.+48     	; 0x1b1a <usart_set_baudrate+0x1fa>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <usart_set_baudrate+0x1fa>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <usart_set_baudrate+0x1fa>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1af2:	d5 01       	movw	r26, r10
    1af4:	c4 01       	movw	r24, r8
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	48 1a       	sub	r4, r24
    1b10:	59 0a       	sbc	r5, r25
    1b12:	6a 0a       	sbc	r6, r26
    1b14:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1b16:	19 ef       	ldi	r17, 0xF9	; 249
    1b18:	86 cf       	rjmp	.-244    	; 0x1a26 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	5f 90       	pop	r5
    1b38:	4f 90       	pop	r4
    1b3a:	08 95       	ret

00001b3c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <usart_init_rs232+0x12>
    1b4c:	5d c1       	rjmp	.+698    	; 0x1e08 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1b4e:	80 3c       	cpi	r24, 0xC0	; 192
    1b50:	91 05       	cpc	r25, r1
    1b52:	29 f4       	brne	.+10     	; 0x1b5e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1b54:	60 e1       	ldi	r22, 0x10	; 16
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1b5c:	55 c1       	rjmp	.+682    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1b5e:	c0 34       	cpi	r28, 0x40	; 64
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	d8 07       	cpc	r29, r24
    1b64:	29 f4       	brne	.+10     	; 0x1b70 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1b66:	68 e0       	ldi	r22, 0x08	; 8
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1b6e:	4c c1       	rjmp	.+664    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1b70:	c1 15       	cp	r28, r1
    1b72:	e4 e0       	ldi	r30, 0x04	; 4
    1b74:	de 07       	cpc	r29, r30
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1b78:	64 e0       	ldi	r22, 0x04	; 4
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1b80:	43 c1       	rjmp	.+646    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1b82:	c0 38       	cpi	r28, 0x80	; 128
    1b84:	f1 e0       	ldi	r31, 0x01	; 1
    1b86:	df 07       	cpc	r29, r31
    1b88:	29 f4       	brne	.+10     	; 0x1b94 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1b92:	3a c1       	rjmp	.+628    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1b94:	c1 15       	cp	r28, r1
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	d8 07       	cpc	r29, r24
    1b9a:	29 f4       	brne	.+10     	; 0x1ba6 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1b9c:	61 e0       	ldi	r22, 0x01	; 1
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1ba4:	31 c1       	rjmp	.+610    	; 0x1e08 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ba6:	c0 38       	cpi	r28, 0x80	; 128
    1ba8:	e3 e0       	ldi	r30, 0x03	; 3
    1baa:	de 07       	cpc	r29, r30
    1bac:	29 f4       	brne	.+10     	; 0x1bb8 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1bb6:	28 c1       	rjmp	.+592    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1bb8:	c0 39       	cpi	r28, 0x90	; 144
    1bba:	f3 e0       	ldi	r31, 0x03	; 3
    1bbc:	df 07       	cpc	r29, r31
    1bbe:	29 f4       	brne	.+10     	; 0x1bca <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1bc8:	1f c1       	rjmp	.+574    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1bca:	c1 15       	cp	r28, r1
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	d8 07       	cpc	r29, r24
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1bd2:	62 e0       	ldi	r22, 0x02	; 2
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1bda:	16 c1       	rjmp	.+556    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1bdc:	c0 34       	cpi	r28, 0x40	; 64
    1bde:	e2 e0       	ldi	r30, 0x02	; 2
    1be0:	de 07       	cpc	r29, r30
    1be2:	29 f4       	brne	.+10     	; 0x1bee <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1bec:	0d c1       	rjmp	.+538    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1bee:	c1 15       	cp	r28, r1
    1bf0:	f3 e0       	ldi	r31, 0x03	; 3
    1bf2:	df 07       	cpc	r29, r31
    1bf4:	29 f4       	brne	.+10     	; 0x1c00 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1bf6:	64 e0       	ldi	r22, 0x04	; 4
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1bfe:	04 c1       	rjmp	.+520    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1c00:	c0 32       	cpi	r28, 0x20	; 32
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	d8 07       	cpc	r29, r24
    1c06:	29 f4       	brne	.+10     	; 0x1c12 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1c08:	64 e0       	ldi	r22, 0x04	; 4
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c10:	fb c0       	rjmp	.+502    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1c12:	c1 15       	cp	r28, r1
    1c14:	e8 e0       	ldi	r30, 0x08	; 8
    1c16:	de 07       	cpc	r29, r30
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1c1a:	61 e0       	ldi	r22, 0x01	; 1
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c22:	f2 c0       	rjmp	.+484    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1c24:	c1 15       	cp	r28, r1
    1c26:	f9 e0       	ldi	r31, 0x09	; 9
    1c28:	df 07       	cpc	r29, r31
    1c2a:	29 f4       	brne	.+10     	; 0x1c36 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	84 e0       	ldi	r24, 0x04	; 4
    1c30:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c34:	e9 c0       	rjmp	.+466    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1c36:	c1 15       	cp	r28, r1
    1c38:	8a e0       	ldi	r24, 0x0A	; 10
    1c3a:	d8 07       	cpc	r29, r24
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	85 e0       	ldi	r24, 0x05	; 5
    1c42:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c46:	e0 c0       	rjmp	.+448    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1c48:	c1 15       	cp	r28, r1
    1c4a:	eb e0       	ldi	r30, 0x0B	; 11
    1c4c:	de 07       	cpc	r29, r30
    1c4e:	29 f4       	brne	.+10     	; 0x1c5a <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c58:	d7 c0       	rjmp	.+430    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1c5a:	c0 34       	cpi	r28, 0x40	; 64
    1c5c:	f8 e0       	ldi	r31, 0x08	; 8
    1c5e:	df 07       	cpc	r29, r31
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c6a:	ce c0       	rjmp	.+412    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1c6c:	c0 34       	cpi	r28, 0x40	; 64
    1c6e:	89 e0       	ldi	r24, 0x09	; 9
    1c70:	d8 07       	cpc	r29, r24
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c7c:	c5 c0       	rjmp	.+394    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1c7e:	c0 34       	cpi	r28, 0x40	; 64
    1c80:	ea e0       	ldi	r30, 0x0A	; 10
    1c82:	de 07       	cpc	r29, r30
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	85 e0       	ldi	r24, 0x05	; 5
    1c8a:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1c8e:	bc c0       	rjmp	.+376    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1c90:	c0 34       	cpi	r28, 0x40	; 64
    1c92:	fb e0       	ldi	r31, 0x0B	; 11
    1c94:	df 07       	cpc	r29, r31
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	86 e0       	ldi	r24, 0x06	; 6
    1c9c:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1ca0:	b3 c0       	rjmp	.+358    	; 0x1e08 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1ca2:	c0 39       	cpi	r28, 0x90	; 144
    1ca4:	88 e0       	ldi	r24, 0x08	; 8
    1ca6:	d8 07       	cpc	r29, r24
    1ca8:	29 f4       	brne	.+10     	; 0x1cb4 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1caa:	64 e0       	ldi	r22, 0x04	; 4
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1cb2:	aa c0       	rjmp	.+340    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1cb4:	c0 39       	cpi	r28, 0x90	; 144
    1cb6:	e9 e0       	ldi	r30, 0x09	; 9
    1cb8:	de 07       	cpc	r29, r30
    1cba:	29 f4       	brne	.+10     	; 0x1cc6 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	84 e0       	ldi	r24, 0x04	; 4
    1cc0:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1cc4:	a1 c0       	rjmp	.+322    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1cc6:	c0 39       	cpi	r28, 0x90	; 144
    1cc8:	fa e0       	ldi	r31, 0x0A	; 10
    1cca:	df 07       	cpc	r29, r31
    1ccc:	29 f4       	brne	.+10     	; 0x1cd8 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1cce:	64 e0       	ldi	r22, 0x04	; 4
    1cd0:	85 e0       	ldi	r24, 0x05	; 5
    1cd2:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1cd6:	98 c0       	rjmp	.+304    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1cd8:	c0 39       	cpi	r28, 0x90	; 144
    1cda:	8b e0       	ldi	r24, 0x0B	; 11
    1cdc:	d8 07       	cpc	r29, r24
    1cde:	29 f4       	brne	.+10     	; 0x1cea <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ce0:	64 e0       	ldi	r22, 0x04	; 4
    1ce2:	86 e0       	ldi	r24, 0x06	; 6
    1ce4:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1ce8:	8f c0       	rjmp	.+286    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1cea:	c0 3c       	cpi	r28, 0xC0	; 192
    1cec:	e8 e0       	ldi	r30, 0x08	; 8
    1cee:	de 07       	cpc	r29, r30
    1cf0:	29 f4       	brne	.+10     	; 0x1cfc <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1cf2:	68 e0       	ldi	r22, 0x08	; 8
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1cfa:	86 c0       	rjmp	.+268    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1cfc:	c0 3c       	cpi	r28, 0xC0	; 192
    1cfe:	f9 e0       	ldi	r31, 0x09	; 9
    1d00:	df 07       	cpc	r29, r31
    1d02:	29 f4       	brne	.+10     	; 0x1d0e <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1d04:	68 e0       	ldi	r22, 0x08	; 8
    1d06:	84 e0       	ldi	r24, 0x04	; 4
    1d08:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d0c:	7d c0       	rjmp	.+250    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1d0e:	c0 3c       	cpi	r28, 0xC0	; 192
    1d10:	8a e0       	ldi	r24, 0x0A	; 10
    1d12:	d8 07       	cpc	r29, r24
    1d14:	29 f4       	brne	.+10     	; 0x1d20 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1d16:	68 e0       	ldi	r22, 0x08	; 8
    1d18:	85 e0       	ldi	r24, 0x05	; 5
    1d1a:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d1e:	74 c0       	rjmp	.+232    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1d20:	c0 3c       	cpi	r28, 0xC0	; 192
    1d22:	eb e0       	ldi	r30, 0x0B	; 11
    1d24:	de 07       	cpc	r29, r30
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1d28:	68 e0       	ldi	r22, 0x08	; 8
    1d2a:	86 e0       	ldi	r24, 0x06	; 6
    1d2c:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d30:	6b c0       	rjmp	.+214    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1d32:	c0 3a       	cpi	r28, 0xA0	; 160
    1d34:	f8 e0       	ldi	r31, 0x08	; 8
    1d36:	df 07       	cpc	r29, r31
    1d38:	29 f4       	brne	.+10     	; 0x1d44 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1d3a:	60 e1       	ldi	r22, 0x10	; 16
    1d3c:	83 e0       	ldi	r24, 0x03	; 3
    1d3e:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d42:	62 c0       	rjmp	.+196    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1d44:	c0 3a       	cpi	r28, 0xA0	; 160
    1d46:	89 e0       	ldi	r24, 0x09	; 9
    1d48:	d8 07       	cpc	r29, r24
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1d4c:	60 e1       	ldi	r22, 0x10	; 16
    1d4e:	84 e0       	ldi	r24, 0x04	; 4
    1d50:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d54:	59 c0       	rjmp	.+178    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1d56:	c0 3a       	cpi	r28, 0xA0	; 160
    1d58:	ea e0       	ldi	r30, 0x0A	; 10
    1d5a:	de 07       	cpc	r29, r30
    1d5c:	29 f4       	brne	.+10     	; 0x1d68 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1d5e:	60 e1       	ldi	r22, 0x10	; 16
    1d60:	85 e0       	ldi	r24, 0x05	; 5
    1d62:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d66:	50 c0       	rjmp	.+160    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1d68:	c0 3a       	cpi	r28, 0xA0	; 160
    1d6a:	fb e0       	ldi	r31, 0x0B	; 11
    1d6c:	df 07       	cpc	r29, r31
    1d6e:	29 f4       	brne	.+10     	; 0x1d7a <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1d70:	60 e1       	ldi	r22, 0x10	; 16
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d78:	47 c0       	rjmp	.+142    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1d7a:	c0 3b       	cpi	r28, 0xB0	; 176
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	d8 07       	cpc	r29, r24
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1d82:	60 e2       	ldi	r22, 0x20	; 32
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d8a:	3e c0       	rjmp	.+124    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1d8c:	c0 3b       	cpi	r28, 0xB0	; 176
    1d8e:	e9 e0       	ldi	r30, 0x09	; 9
    1d90:	de 07       	cpc	r29, r30
    1d92:	29 f4       	brne	.+10     	; 0x1d9e <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1d94:	60 e2       	ldi	r22, 0x20	; 32
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1d9c:	35 c0       	rjmp	.+106    	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1d9e:	c0 3b       	cpi	r28, 0xB0	; 176
    1da0:	fa e0       	ldi	r31, 0x0A	; 10
    1da2:	df 07       	cpc	r29, r31
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1da6:	60 e2       	ldi	r22, 0x20	; 32
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1dae:	2c c0       	rjmp	.+88     	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1db0:	c0 3b       	cpi	r28, 0xB0	; 176
    1db2:	8b e0       	ldi	r24, 0x0B	; 11
    1db4:	d8 07       	cpc	r29, r24
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1db8:	60 e2       	ldi	r22, 0x20	; 32
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1dc0:	23 c0       	rjmp	.+70     	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1dc2:	c0 38       	cpi	r28, 0x80	; 128
    1dc4:	e4 e0       	ldi	r30, 0x04	; 4
    1dc6:	de 07       	cpc	r29, r30
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1dca:	60 e4       	ldi	r22, 0x40	; 64
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1dd2:	1a c0       	rjmp	.+52     	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1dd4:	c0 39       	cpi	r28, 0x90	; 144
    1dd6:	f4 e0       	ldi	r31, 0x04	; 4
    1dd8:	df 07       	cpc	r29, r31
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1ddc:	60 e4       	ldi	r22, 0x40	; 64
    1dde:	84 e0       	ldi	r24, 0x04	; 4
    1de0:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1de6:	c0 3a       	cpi	r28, 0xA0	; 160
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	d8 07       	cpc	r29, r24
    1dec:	29 f4       	brne	.+10     	; 0x1df8 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1dee:	60 e4       	ldi	r22, 0x40	; 64
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1df8:	c0 3b       	cpi	r28, 0xB0	; 176
    1dfa:	e4 e0       	ldi	r30, 0x04	; 4
    1dfc:	de 07       	cpc	r29, r30
    1dfe:	21 f4       	brne	.+8      	; 0x1e08 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1e00:	60 e4       	ldi	r22, 0x40	; 64
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	0e 94 5f 02 	call	0x4be	; 0x4be <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	8f 73       	andi	r24, 0x3F	; 63
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1e0e:	f8 01       	movw	r30, r16
    1e10:	94 81       	ldd	r25, Z+4	; 0x04
    1e12:	85 81       	ldd	r24, Z+5	; 0x05
    1e14:	89 2b       	or	r24, r25
    1e16:	96 81       	ldd	r25, Z+6	; 0x06
    1e18:	99 23       	and	r25, r25
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <usart_init_rs232+0x2e4>
    1e1c:	98 e0       	ldi	r25, 0x08	; 8
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <usart_init_rs232+0x2e6>
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	89 2b       	or	r24, r25
    1e24:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1e26:	f8 01       	movw	r30, r16
    1e28:	40 81       	ld	r20, Z
    1e2a:	51 81       	ldd	r21, Z+1	; 0x01
    1e2c:	62 81       	ldd	r22, Z+2	; 0x02
    1e2e:	73 81       	ldd	r23, Z+3	; 0x03
    1e30:	00 e0       	ldi	r16, 0x00	; 0
    1e32:	18 e4       	ldi	r17, 0x48	; 72
    1e34:	28 ee       	ldi	r18, 0xE8	; 232
    1e36:	31 e0       	ldi	r19, 0x01	; 1
    1e38:	ce 01       	movw	r24, r28
    1e3a:	72 dd       	rcall	.-1308   	; 0x1920 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	98 60       	ori	r25, 0x08	; 8
    1e40:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	90 61       	ori	r25, 0x10	; 16
    1e46:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	08 95       	ret

00001e52 <main>:
 * The sensor pressure and temperature data, which is formatted and printed
 * via printf() after being read, can be viewed with a terminal application on
 * a machine attached to the serial interface on the development board.
 */
int main(void)
{
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	e4 97       	sbiw	r28, 0x34	; 52
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	de bf       	out	0x3e, r29	; 62

	/* Initialize the board (Xplained UC3 or XMEGA & Xplained Sensor boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */
	sensor_platform_init();
    1e60:	7c da       	rcall	.-2824   	; 0x135a <sensor_platform_init>

	/* Attach a descriptor to the existing sensor device. */
	sensor_attach(&barometer, SENSOR_TYPE_BAROMETER, 0, 0);
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	62 e0       	ldi	r22, 0x02	; 2
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	ce 01       	movw	r24, r28
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	0e 94 ab 06 	call	0xd56	; 0xd56 <sensor_attach>

	if (barometer.err) {
    1e76:	88 85       	ldd	r24, Y+8	; 0x08
    1e78:	99 85       	ldd	r25, Y+9	; 0x09
    1e7a:	89 2b       	or	r24, r25
    1e7c:	21 f0       	breq	.+8      	; 0x1e86 <main+0x34>
		puts("\rSensor initialization error.");
    1e7e:	8f e7       	ldi	r24, 0x7F	; 127
    1e80:	90 e2       	ldi	r25, 0x20	; 32
    1e82:	af d7       	rcall	.+3934   	; 0x2de2 <puts>
    1e84:	ff cf       	rjmp	.-2      	; 0x1e84 <main+0x32>
		while (true) {
			/* Error occurred, loop forever */
		}
	}

	sensor_set_state(&barometer, SENSOR_STATE_HIGHEST_POWER);
    1e86:	67 e0       	ldi	r22, 0x07	; 7
    1e88:	ce 01       	movw	r24, r28
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	0e 94 30 07 	call	0xe60	; 0xe60 <sensor_set_state>

	/* Initialize sensor data structure flags for scaled vs. raw data */
	press_data.scaled = true;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	8e 8f       	std	Y+30, r24	; 0x1e
	temp_data.scaled = true;
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
		uint8_t ver;

		static const char *const banner_format
			= "%s\r\nID = 0x%02x ver. 0x%02x\r\n  %d-bit Resolution\r\n";

		sensor_device_id(&barometer, &id, &ver);
    1e96:	ae 01       	movw	r20, r28
    1e98:	4c 5c       	subi	r20, 0xCC	; 204
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	be 01       	movw	r22, r28
    1e9e:	60 5d       	subi	r22, 0xD0	; 208
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	0e 94 02 07 	call	0xe04	; 0xe04 <sensor_device_id>

		printf(banner_format, barometer.drv->caps.name, (unsigned)id,
				(unsigned)ver, barometer.hal->resolution);
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
		static const char *const banner_format
			= "%s\r\nID = 0x%02x ver. 0x%02x\r\n  %d-bit Resolution\r\n";

		sensor_device_id(&barometer, &id, &ver);

		printf(banner_format, barometer.drv->caps.name, (unsigned)id,
    1eae:	87 8d       	ldd	r24, Z+31	; 0x1f
    1eb0:	8f 93       	push	r24
    1eb2:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eb4:	8f 93       	push	r24
    1eb6:	8c a9       	ldd	r24, Y+52	; 0x34
    1eb8:	1f 92       	push	r1
    1eba:	8f 93       	push	r24
    1ebc:	89 a9       	ldd	r24, Y+49	; 0x31
    1ebe:	8f 93       	push	r24
    1ec0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ec2:	8f 93       	push	r24
    1ec4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec8:	80 8d       	ldd	r24, Z+24	; 0x18
    1eca:	8f 93       	push	r24
    1ecc:	87 89       	ldd	r24, Z+23	; 0x17
    1ece:	8f 93       	push	r24
    1ed0:	8d e9       	ldi	r24, 0x9D	; 157
    1ed2:	90 e2       	ldi	r25, 0x20	; 32
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	73 d7       	rcall	.+3814   	; 0x2dc0 <printf>
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	de bf       	out	0x3e, r29	; 62

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1ede:	0f 2e       	mov	r0, r31
    1ee0:	f0 e8       	ldi	r31, 0x80	; 128
    1ee2:	ef 2e       	mov	r14, r31
    1ee4:	f6 e0       	ldi	r31, 0x06	; 6
    1ee6:	ff 2e       	mov	r15, r31
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	68 94       	set
    1eec:	dd 24       	eor	r13, r13
    1eee:	d1 f8       	bld	r13, 1
		LED_Toggle(ACTIVITY_LED);

		sensor_get_pressure(&barometer, &press_data);
		sensor_get_temperature(&barometer, &temp_data);

		printf("P = %.2f hPa,  T = %.1f C\r\n",
    1ef0:	00 ed       	ldi	r16, 0xD0	; 208
    1ef2:	10 e2       	ldi	r17, 0x20	; 32
    1ef4:	0f 2e       	mov	r0, r31
    1ef6:	fa ea       	ldi	r31, 0xAA	; 170
    1ef8:	8f 2e       	mov	r8, r31
    1efa:	f0 eb       	ldi	r31, 0xB0	; 176
    1efc:	9f 2e       	mov	r9, r31
    1efe:	f8 e2       	ldi	r31, 0x28	; 40
    1f00:	af 2e       	mov	r10, r31
    1f02:	b1 2c       	mov	r11, r1
    1f04:	f0 2d       	mov	r31, r0
    1f06:	f7 01       	movw	r30, r14
    1f08:	d7 82       	std	Z+7, r13	; 0x07
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_pressure(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_PRESSURE, data);
    1f0a:	ae 01       	movw	r20, r28
    1f0c:	42 5f       	subi	r20, 0xF2	; 242
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	0e 94 de 06 	call	0xdbc	; 0xdbc <sensor_read>
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_temperature(sensor_t *sensor,
		sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_TEMPERATURE, data);
    1f1a:	ae 01       	movw	r20, r28
    1f1c:	41 5e       	subi	r20, 0xE1	; 225
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	69 e0       	ldi	r22, 0x09	; 9
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	0e 94 de 06 	call	0xdbc	; 0xdbc <sensor_read>
    1f2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f30:	9a a1       	ldd	r25, Y+34	; 0x22
    1f32:	c7 d0       	rcall	.+398    	; 0x20c2 <__floatsisf>
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e2       	ldi	r20, 0x20	; 32
    1f3a:	51 e4       	ldi	r21, 0x41	; 65
    1f3c:	1e d0       	rcall	.+60     	; 0x1f7a <__divsf3>
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	7f 93       	push	r23
    1f44:	6f 93       	push	r22
    1f46:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f48:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f4a:	88 89       	ldd	r24, Y+16	; 0x10
    1f4c:	99 89       	ldd	r25, Y+17	; 0x11
    1f4e:	b9 d0       	rcall	.+370    	; 0x20c2 <__floatsisf>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	48 ec       	ldi	r20, 0xC8	; 200
    1f56:	52 e4       	ldi	r21, 0x42	; 66
    1f58:	10 d0       	rcall	.+32     	; 0x1f7a <__divsf3>
    1f5a:	9f 93       	push	r25
    1f5c:	8f 93       	push	r24
    1f5e:	7f 93       	push	r23
    1f60:	6f 93       	push	r22
    1f62:	1f 93       	push	r17
    1f64:	0f 93       	push	r16
    1f66:	2c d7       	rcall	.+3672   	; 0x2dc0 <printf>
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	d5 01       	movw	r26, r10
    1f6e:	c4 01       	movw	r24, r8
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	a1 09       	sbc	r26, r1
    1f74:	b1 09       	sbc	r27, r1
    1f76:	e1 f7       	brne	.-8      	; 0x1f70 <main+0x11e>
    1f78:	c6 cf       	rjmp	.-116    	; 0x1f06 <main+0xb4>

00001f7a <__divsf3>:
    1f7a:	0c d0       	rcall	.+24     	; 0x1f94 <__divsf3x>
    1f7c:	42 c1       	rjmp	.+644    	; 0x2202 <__fp_round>
    1f7e:	3a d1       	rcall	.+628    	; 0x21f4 <__fp_pscB>
    1f80:	40 f0       	brcs	.+16     	; 0x1f92 <__divsf3+0x18>
    1f82:	31 d1       	rcall	.+610    	; 0x21e6 <__fp_pscA>
    1f84:	30 f0       	brcs	.+12     	; 0x1f92 <__divsf3+0x18>
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <__divsf3+0x16>
    1f88:	5f 3f       	cpi	r21, 0xFF	; 255
    1f8a:	19 f0       	breq	.+6      	; 0x1f92 <__divsf3+0x18>
    1f8c:	13 c1       	rjmp	.+550    	; 0x21b4 <__fp_inf>
    1f8e:	51 11       	cpse	r21, r1
    1f90:	6c c1       	rjmp	.+728    	; 0x226a <__fp_szero>
    1f92:	16 c1       	rjmp	.+556    	; 0x21c0 <__fp_nan>

00001f94 <__divsf3x>:
    1f94:	47 d1       	rcall	.+654    	; 0x2224 <__fp_split3>
    1f96:	98 f3       	brcs	.-26     	; 0x1f7e <__divsf3+0x4>

00001f98 <__divsf3_pse>:
    1f98:	99 23       	and	r25, r25
    1f9a:	c9 f3       	breq	.-14     	; 0x1f8e <__divsf3+0x14>
    1f9c:	55 23       	and	r21, r21
    1f9e:	b1 f3       	breq	.-20     	; 0x1f8c <__divsf3+0x12>
    1fa0:	95 1b       	sub	r25, r21
    1fa2:	55 0b       	sbc	r21, r21
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	aa 27       	eor	r26, r26
    1fa8:	62 17       	cp	r22, r18
    1faa:	73 07       	cpc	r23, r19
    1fac:	84 07       	cpc	r24, r20
    1fae:	38 f0       	brcs	.+14     	; 0x1fbe <__divsf3_pse+0x26>
    1fb0:	9f 5f       	subi	r25, 0xFF	; 255
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	44 1f       	adc	r20, r20
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	a9 f3       	breq	.-22     	; 0x1fa8 <__divsf3_pse+0x10>
    1fbe:	33 d0       	rcall	.+102    	; 0x2026 <__divsf3_pse+0x8e>
    1fc0:	0e 2e       	mov	r0, r30
    1fc2:	3a f0       	brmi	.+14     	; 0x1fd2 <__divsf3_pse+0x3a>
    1fc4:	e0 e8       	ldi	r30, 0x80	; 128
    1fc6:	30 d0       	rcall	.+96     	; 0x2028 <__divsf3_pse+0x90>
    1fc8:	91 50       	subi	r25, 0x01	; 1
    1fca:	50 40       	sbci	r21, 0x00	; 0
    1fcc:	e6 95       	lsr	r30
    1fce:	00 1c       	adc	r0, r0
    1fd0:	ca f7       	brpl	.-14     	; 0x1fc4 <__divsf3_pse+0x2c>
    1fd2:	29 d0       	rcall	.+82     	; 0x2026 <__divsf3_pse+0x8e>
    1fd4:	fe 2f       	mov	r31, r30
    1fd6:	27 d0       	rcall	.+78     	; 0x2026 <__divsf3_pse+0x8e>
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	26 17       	cp	r18, r22
    1fe2:	37 07       	cpc	r19, r23
    1fe4:	48 07       	cpc	r20, r24
    1fe6:	ab 07       	cpc	r26, r27
    1fe8:	b0 e8       	ldi	r27, 0x80	; 128
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__divsf3_pse+0x56>
    1fec:	bb 0b       	sbc	r27, r27
    1fee:	80 2d       	mov	r24, r0
    1ff0:	bf 01       	movw	r22, r30
    1ff2:	ff 27       	eor	r31, r31
    1ff4:	93 58       	subi	r25, 0x83	; 131
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	2a f0       	brmi	.+10     	; 0x2004 <__divsf3_pse+0x6c>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	68 f0       	brcs	.+26     	; 0x201a <__divsf3_pse+0x82>
    2000:	d9 c0       	rjmp	.+434    	; 0x21b4 <__fp_inf>
    2002:	33 c1       	rjmp	.+614    	; 0x226a <__fp_szero>
    2004:	5f 3f       	cpi	r21, 0xFF	; 255
    2006:	ec f3       	brlt	.-6      	; 0x2002 <__divsf3_pse+0x6a>
    2008:	98 3e       	cpi	r25, 0xE8	; 232
    200a:	dc f3       	brlt	.-10     	; 0x2002 <__divsf3_pse+0x6a>
    200c:	86 95       	lsr	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b7 95       	ror	r27
    2014:	f7 95       	ror	r31
    2016:	9f 5f       	subi	r25, 0xFF	; 255
    2018:	c9 f7       	brne	.-14     	; 0x200c <__divsf3_pse+0x74>
    201a:	88 0f       	add	r24, r24
    201c:	91 1d       	adc	r25, r1
    201e:	96 95       	lsr	r25
    2020:	87 95       	ror	r24
    2022:	97 f9       	bld	r25, 7
    2024:	08 95       	ret
    2026:	e1 e0       	ldi	r30, 0x01	; 1
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	88 1f       	adc	r24, r24
    202e:	bb 1f       	adc	r27, r27
    2030:	62 17       	cp	r22, r18
    2032:	73 07       	cpc	r23, r19
    2034:	84 07       	cpc	r24, r20
    2036:	ba 07       	cpc	r27, r26
    2038:	20 f0       	brcs	.+8      	; 0x2042 <__divsf3_pse+0xaa>
    203a:	62 1b       	sub	r22, r18
    203c:	73 0b       	sbc	r23, r19
    203e:	84 0b       	sbc	r24, r20
    2040:	ba 0b       	sbc	r27, r26
    2042:	ee 1f       	adc	r30, r30
    2044:	88 f7       	brcc	.-30     	; 0x2028 <__divsf3_pse+0x90>
    2046:	e0 95       	com	r30
    2048:	08 95       	ret

0000204a <__fixsfdi>:
    204a:	be e3       	ldi	r27, 0x3E	; 62
    204c:	04 d0       	rcall	.+8      	; 0x2056 <__fixunssfdi+0x2>
    204e:	08 f4       	brcc	.+2      	; 0x2052 <__fixsfdi+0x8>
    2050:	90 e8       	ldi	r25, 0x80	; 128
    2052:	08 95       	ret

00002054 <__fixunssfdi>:
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	22 27       	eor	r18, r18
    2058:	33 27       	eor	r19, r19
    205a:	a9 01       	movw	r20, r18
    205c:	eb d0       	rcall	.+470    	; 0x2234 <__fp_splitA>
    205e:	58 f1       	brcs	.+86     	; 0x20b6 <__fixunssfdi+0x62>
    2060:	9f 57       	subi	r25, 0x7F	; 127
    2062:	40 f1       	brcs	.+80     	; 0x20b4 <__fixunssfdi+0x60>
    2064:	b9 17       	cp	r27, r25
    2066:	38 f1       	brcs	.+78     	; 0x20b6 <__fixunssfdi+0x62>
    2068:	bf e3       	ldi	r27, 0x3F	; 63
    206a:	b9 1b       	sub	r27, r25
    206c:	99 27       	eor	r25, r25
    206e:	b8 50       	subi	r27, 0x08	; 8
    2070:	3a f4       	brpl	.+14     	; 0x2080 <__fixunssfdi+0x2c>
    2072:	66 0f       	add	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	b3 95       	inc	r27
    207c:	d2 f3       	brmi	.-12     	; 0x2072 <__fixunssfdi+0x1e>
    207e:	16 c0       	rjmp	.+44     	; 0x20ac <__fixunssfdi+0x58>
    2080:	b8 50       	subi	r27, 0x08	; 8
    2082:	4a f0       	brmi	.+18     	; 0x2096 <__fixunssfdi+0x42>
    2084:	23 2f       	mov	r18, r19
    2086:	34 2f       	mov	r19, r20
    2088:	45 2f       	mov	r20, r21
    208a:	56 2f       	mov	r21, r22
    208c:	67 2f       	mov	r22, r23
    208e:	78 2f       	mov	r23, r24
    2090:	88 27       	eor	r24, r24
    2092:	b8 50       	subi	r27, 0x08	; 8
    2094:	ba f7       	brpl	.-18     	; 0x2084 <__fixunssfdi+0x30>
    2096:	b8 5f       	subi	r27, 0xF8	; 248
    2098:	49 f0       	breq	.+18     	; 0x20ac <__fixunssfdi+0x58>
    209a:	86 95       	lsr	r24
    209c:	77 95       	ror	r23
    209e:	67 95       	ror	r22
    20a0:	57 95       	ror	r21
    20a2:	47 95       	ror	r20
    20a4:	37 95       	ror	r19
    20a6:	27 95       	ror	r18
    20a8:	ba 95       	dec	r27
    20aa:	b9 f7       	brne	.-18     	; 0x209a <__fixunssfdi+0x46>
    20ac:	0e f4       	brtc	.+2      	; 0x20b0 <__fixunssfdi+0x5c>
    20ae:	8b d0       	rcall	.+278    	; 0x21c6 <__fp_negdi>
    20b0:	88 94       	clc
    20b2:	08 95       	ret
    20b4:	88 94       	clc
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	cb 01       	movw	r24, r22
    20bc:	08 95       	ret

000020be <__floatunsisf>:
    20be:	e8 94       	clt
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <__floatsisf+0x12>

000020c2 <__floatsisf>:
    20c2:	97 fb       	bst	r25, 7
    20c4:	3e f4       	brtc	.+14     	; 0x20d4 <__floatsisf+0x12>
    20c6:	90 95       	com	r25
    20c8:	80 95       	com	r24
    20ca:	70 95       	com	r23
    20cc:	61 95       	neg	r22
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	8f 4f       	sbci	r24, 0xFF	; 255
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	99 23       	and	r25, r25
    20d6:	a9 f0       	breq	.+42     	; 0x2102 <__floatsisf+0x40>
    20d8:	f9 2f       	mov	r31, r25
    20da:	96 e9       	ldi	r25, 0x96	; 150
    20dc:	bb 27       	eor	r27, r27
    20de:	93 95       	inc	r25
    20e0:	f6 95       	lsr	r31
    20e2:	87 95       	ror	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	b7 95       	ror	r27
    20ea:	f1 11       	cpse	r31, r1
    20ec:	f8 cf       	rjmp	.-16     	; 0x20de <__floatsisf+0x1c>
    20ee:	fa f4       	brpl	.+62     	; 0x212e <__floatsisf+0x6c>
    20f0:	bb 0f       	add	r27, r27
    20f2:	11 f4       	brne	.+4      	; 0x20f8 <__floatsisf+0x36>
    20f4:	60 ff       	sbrs	r22, 0
    20f6:	1b c0       	rjmp	.+54     	; 0x212e <__floatsisf+0x6c>
    20f8:	6f 5f       	subi	r22, 0xFF	; 255
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	8f 4f       	sbci	r24, 0xFF	; 255
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	16 c0       	rjmp	.+44     	; 0x212e <__floatsisf+0x6c>
    2102:	88 23       	and	r24, r24
    2104:	11 f0       	breq	.+4      	; 0x210a <__floatsisf+0x48>
    2106:	96 e9       	ldi	r25, 0x96	; 150
    2108:	11 c0       	rjmp	.+34     	; 0x212c <__floatsisf+0x6a>
    210a:	77 23       	and	r23, r23
    210c:	21 f0       	breq	.+8      	; 0x2116 <__floatsisf+0x54>
    210e:	9e e8       	ldi	r25, 0x8E	; 142
    2110:	87 2f       	mov	r24, r23
    2112:	76 2f       	mov	r23, r22
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <__floatsisf+0x5e>
    2116:	66 23       	and	r22, r22
    2118:	71 f0       	breq	.+28     	; 0x2136 <__floatsisf+0x74>
    211a:	96 e8       	ldi	r25, 0x86	; 134
    211c:	86 2f       	mov	r24, r22
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	2a f0       	brmi	.+10     	; 0x212e <__floatsisf+0x6c>
    2124:	9a 95       	dec	r25
    2126:	66 0f       	add	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	da f7       	brpl	.-10     	; 0x2124 <__floatsisf+0x62>
    212e:	88 0f       	add	r24, r24
    2130:	96 95       	lsr	r25
    2132:	87 95       	ror	r24
    2134:	97 f9       	bld	r25, 7
    2136:	08 95       	ret

00002138 <__floatundisf>:
    2138:	e8 94       	clt

0000213a <__fp_di2sf>:
    213a:	f9 2f       	mov	r31, r25
    213c:	96 eb       	ldi	r25, 0xB6	; 182
    213e:	ff 23       	and	r31, r31
    2140:	81 f0       	breq	.+32     	; 0x2162 <__fp_di2sf+0x28>
    2142:	12 16       	cp	r1, r18
    2144:	13 06       	cpc	r1, r19
    2146:	14 06       	cpc	r1, r20
    2148:	44 0b       	sbc	r20, r20
    214a:	93 95       	inc	r25
    214c:	f6 95       	lsr	r31
    214e:	87 95       	ror	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	57 95       	ror	r21
    2156:	40 40       	sbci	r20, 0x00	; 0
    2158:	ff 23       	and	r31, r31
    215a:	b9 f7       	brne	.-18     	; 0x214a <__fp_di2sf+0x10>
    215c:	1b c0       	rjmp	.+54     	; 0x2194 <__fp_di2sf+0x5a>
    215e:	99 27       	eor	r25, r25
    2160:	08 95       	ret
    2162:	88 23       	and	r24, r24
    2164:	51 f4       	brne	.+20     	; 0x217a <__fp_di2sf+0x40>
    2166:	98 50       	subi	r25, 0x08	; 8
    2168:	d2 f7       	brpl	.-12     	; 0x215e <__fp_di2sf+0x24>
    216a:	87 2b       	or	r24, r23
    216c:	76 2f       	mov	r23, r22
    216e:	65 2f       	mov	r22, r21
    2170:	54 2f       	mov	r21, r20
    2172:	43 2f       	mov	r20, r19
    2174:	32 2f       	mov	r19, r18
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	b1 f3       	breq	.-20     	; 0x2166 <__fp_di2sf+0x2c>
    217a:	12 16       	cp	r1, r18
    217c:	13 06       	cpc	r1, r19
    217e:	14 06       	cpc	r1, r20
    2180:	44 0b       	sbc	r20, r20
    2182:	88 23       	and	r24, r24
    2184:	3a f0       	brmi	.+14     	; 0x2194 <__fp_di2sf+0x5a>
    2186:	9a 95       	dec	r25
    2188:	44 0f       	add	r20, r20
    218a:	55 1f       	adc	r21, r21
    218c:	66 1f       	adc	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	ca f7       	brpl	.-14     	; 0x2186 <__fp_di2sf+0x4c>
    2194:	55 23       	and	r21, r21
    2196:	4a f4       	brpl	.+18     	; 0x21aa <__fp_di2sf+0x70>
    2198:	44 0f       	add	r20, r20
    219a:	55 1f       	adc	r21, r21
    219c:	11 f4       	brne	.+4      	; 0x21a2 <__fp_di2sf+0x68>
    219e:	60 ff       	sbrs	r22, 0
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <__fp_di2sf+0x70>
    21a2:	6f 5f       	subi	r22, 0xFF	; 255
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	88 0f       	add	r24, r24
    21ac:	96 95       	lsr	r25
    21ae:	87 95       	ror	r24
    21b0:	97 f9       	bld	r25, 7
    21b2:	08 95       	ret

000021b4 <__fp_inf>:
    21b4:	97 f9       	bld	r25, 7
    21b6:	9f 67       	ori	r25, 0x7F	; 127
    21b8:	80 e8       	ldi	r24, 0x80	; 128
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	08 95       	ret

000021c0 <__fp_nan>:
    21c0:	9f ef       	ldi	r25, 0xFF	; 255
    21c2:	80 ec       	ldi	r24, 0xC0	; 192
    21c4:	08 95       	ret

000021c6 <__fp_negdi>:
    21c6:	90 95       	com	r25
    21c8:	80 95       	com	r24
    21ca:	70 95       	com	r23
    21cc:	60 95       	com	r22
    21ce:	50 95       	com	r21
    21d0:	40 95       	com	r20
    21d2:	30 95       	com	r19
    21d4:	21 95       	neg	r18
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	4f 4f       	sbci	r20, 0xFF	; 255
    21da:	5f 4f       	sbci	r21, 0xFF	; 255
    21dc:	6f 4f       	sbci	r22, 0xFF	; 255
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	8f 4f       	sbci	r24, 0xFF	; 255
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	08 95       	ret

000021e6 <__fp_pscA>:
    21e6:	00 24       	eor	r0, r0
    21e8:	0a 94       	dec	r0
    21ea:	16 16       	cp	r1, r22
    21ec:	17 06       	cpc	r1, r23
    21ee:	18 06       	cpc	r1, r24
    21f0:	09 06       	cpc	r0, r25
    21f2:	08 95       	ret

000021f4 <__fp_pscB>:
    21f4:	00 24       	eor	r0, r0
    21f6:	0a 94       	dec	r0
    21f8:	12 16       	cp	r1, r18
    21fa:	13 06       	cpc	r1, r19
    21fc:	14 06       	cpc	r1, r20
    21fe:	05 06       	cpc	r0, r21
    2200:	08 95       	ret

00002202 <__fp_round>:
    2202:	09 2e       	mov	r0, r25
    2204:	03 94       	inc	r0
    2206:	00 0c       	add	r0, r0
    2208:	11 f4       	brne	.+4      	; 0x220e <__fp_round+0xc>
    220a:	88 23       	and	r24, r24
    220c:	52 f0       	brmi	.+20     	; 0x2222 <__fp_round+0x20>
    220e:	bb 0f       	add	r27, r27
    2210:	40 f4       	brcc	.+16     	; 0x2222 <__fp_round+0x20>
    2212:	bf 2b       	or	r27, r31
    2214:	11 f4       	brne	.+4      	; 0x221a <__fp_round+0x18>
    2216:	60 ff       	sbrs	r22, 0
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <__fp_round+0x20>
    221a:	6f 5f       	subi	r22, 0xFF	; 255
    221c:	7f 4f       	sbci	r23, 0xFF	; 255
    221e:	8f 4f       	sbci	r24, 0xFF	; 255
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	08 95       	ret

00002224 <__fp_split3>:
    2224:	57 fd       	sbrc	r21, 7
    2226:	90 58       	subi	r25, 0x80	; 128
    2228:	44 0f       	add	r20, r20
    222a:	55 1f       	adc	r21, r21
    222c:	59 f0       	breq	.+22     	; 0x2244 <__fp_splitA+0x10>
    222e:	5f 3f       	cpi	r21, 0xFF	; 255
    2230:	71 f0       	breq	.+28     	; 0x224e <__fp_splitA+0x1a>
    2232:	47 95       	ror	r20

00002234 <__fp_splitA>:
    2234:	88 0f       	add	r24, r24
    2236:	97 fb       	bst	r25, 7
    2238:	99 1f       	adc	r25, r25
    223a:	61 f0       	breq	.+24     	; 0x2254 <__fp_splitA+0x20>
    223c:	9f 3f       	cpi	r25, 0xFF	; 255
    223e:	79 f0       	breq	.+30     	; 0x225e <__fp_splitA+0x2a>
    2240:	87 95       	ror	r24
    2242:	08 95       	ret
    2244:	12 16       	cp	r1, r18
    2246:	13 06       	cpc	r1, r19
    2248:	14 06       	cpc	r1, r20
    224a:	55 1f       	adc	r21, r21
    224c:	f2 cf       	rjmp	.-28     	; 0x2232 <__fp_split3+0xe>
    224e:	46 95       	lsr	r20
    2250:	f1 df       	rcall	.-30     	; 0x2234 <__fp_splitA>
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <__fp_splitA+0x30>
    2254:	16 16       	cp	r1, r22
    2256:	17 06       	cpc	r1, r23
    2258:	18 06       	cpc	r1, r24
    225a:	99 1f       	adc	r25, r25
    225c:	f1 cf       	rjmp	.-30     	; 0x2240 <__fp_splitA+0xc>
    225e:	86 95       	lsr	r24
    2260:	71 05       	cpc	r23, r1
    2262:	61 05       	cpc	r22, r1
    2264:	08 94       	sec
    2266:	08 95       	ret

00002268 <__fp_zero>:
    2268:	e8 94       	clt

0000226a <__fp_szero>:
    226a:	bb 27       	eor	r27, r27
    226c:	66 27       	eor	r22, r22
    226e:	77 27       	eor	r23, r23
    2270:	cb 01       	movw	r24, r22
    2272:	97 f9       	bld	r25, 7
    2274:	08 95       	ret

00002276 <vfprintf>:
    2276:	2f 92       	push	r2
    2278:	3f 92       	push	r3
    227a:	4f 92       	push	r4
    227c:	5f 92       	push	r5
    227e:	6f 92       	push	r6
    2280:	7f 92       	push	r7
    2282:	8f 92       	push	r8
    2284:	9f 92       	push	r9
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	62 97       	sbiw	r28, 0x12	; 18
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	7c 01       	movw	r14, r24
    22a6:	1b 01       	movw	r2, r22
    22a8:	6a 01       	movw	r12, r20
    22aa:	fc 01       	movw	r30, r24
    22ac:	16 82       	std	Z+6, r1	; 0x06
    22ae:	17 82       	std	Z+7, r1	; 0x07
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	81 fd       	sbrc	r24, 1
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <vfprintf+0x46>
    22b6:	4e c3       	rjmp	.+1692   	; 0x2954 <vfprintf+0x6de>
    22b8:	65 01       	movw	r12, r10
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <vfprintf+0x50>
    22bc:	88 24       	eor	r8, r8
    22be:	83 94       	inc	r8
    22c0:	91 2c       	mov	r9, r1
    22c2:	8c 0e       	add	r8, r28
    22c4:	9d 1e       	adc	r9, r29
    22c6:	f7 01       	movw	r30, r14
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	f1 01       	movw	r30, r2
    22cc:	93 fd       	sbrc	r25, 3
    22ce:	85 91       	lpm	r24, Z+
    22d0:	93 ff       	sbrs	r25, 3
    22d2:	81 91       	ld	r24, Z+
    22d4:	1f 01       	movw	r2, r30
    22d6:	88 23       	and	r24, r24
    22d8:	09 f4       	brne	.+2      	; 0x22dc <vfprintf+0x66>
    22da:	38 c3       	rjmp	.+1648   	; 0x294c <vfprintf+0x6d6>
    22dc:	85 32       	cpi	r24, 0x25	; 37
    22de:	39 f4       	brne	.+14     	; 0x22ee <vfprintf+0x78>
    22e0:	93 fd       	sbrc	r25, 3
    22e2:	85 91       	lpm	r24, Z+
    22e4:	93 ff       	sbrs	r25, 3
    22e6:	81 91       	ld	r24, Z+
    22e8:	1f 01       	movw	r2, r30
    22ea:	85 32       	cpi	r24, 0x25	; 37
    22ec:	29 f4       	brne	.+10     	; 0x22f8 <vfprintf+0x82>
    22ee:	b7 01       	movw	r22, r14
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	3a d5       	rcall	.+2676   	; 0x2d68 <fputc>
    22f4:	56 01       	movw	r10, r12
    22f6:	e0 cf       	rjmp	.-64     	; 0x22b8 <vfprintf+0x42>
    22f8:	71 2c       	mov	r7, r1
    22fa:	61 2c       	mov	r6, r1
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	20 32       	cpi	r18, 0x20	; 32
    2300:	a8 f4       	brcc	.+42     	; 0x232c <vfprintf+0xb6>
    2302:	8b 32       	cpi	r24, 0x2B	; 43
    2304:	61 f0       	breq	.+24     	; 0x231e <vfprintf+0xa8>
    2306:	28 f4       	brcc	.+10     	; 0x2312 <vfprintf+0x9c>
    2308:	80 32       	cpi	r24, 0x20	; 32
    230a:	51 f0       	breq	.+20     	; 0x2320 <vfprintf+0xaa>
    230c:	83 32       	cpi	r24, 0x23	; 35
    230e:	71 f4       	brne	.+28     	; 0x232c <vfprintf+0xb6>
    2310:	0b c0       	rjmp	.+22     	; 0x2328 <vfprintf+0xb2>
    2312:	8d 32       	cpi	r24, 0x2D	; 45
    2314:	39 f0       	breq	.+14     	; 0x2324 <vfprintf+0xae>
    2316:	80 33       	cpi	r24, 0x30	; 48
    2318:	49 f4       	brne	.+18     	; 0x232c <vfprintf+0xb6>
    231a:	21 60       	ori	r18, 0x01	; 1
    231c:	28 c0       	rjmp	.+80     	; 0x236e <vfprintf+0xf8>
    231e:	22 60       	ori	r18, 0x02	; 2
    2320:	24 60       	ori	r18, 0x04	; 4
    2322:	25 c0       	rjmp	.+74     	; 0x236e <vfprintf+0xf8>
    2324:	28 60       	ori	r18, 0x08	; 8
    2326:	23 c0       	rjmp	.+70     	; 0x236e <vfprintf+0xf8>
    2328:	20 61       	ori	r18, 0x10	; 16
    232a:	21 c0       	rjmp	.+66     	; 0x236e <vfprintf+0xf8>
    232c:	27 fd       	sbrc	r18, 7
    232e:	27 c0       	rjmp	.+78     	; 0x237e <vfprintf+0x108>
    2330:	38 2f       	mov	r19, r24
    2332:	30 53       	subi	r19, 0x30	; 48
    2334:	3a 30       	cpi	r19, 0x0A	; 10
    2336:	78 f4       	brcc	.+30     	; 0x2356 <vfprintf+0xe0>
    2338:	26 ff       	sbrs	r18, 6
    233a:	06 c0       	rjmp	.+12     	; 0x2348 <vfprintf+0xd2>
    233c:	fa e0       	ldi	r31, 0x0A	; 10
    233e:	7f 9e       	mul	r7, r31
    2340:	30 0d       	add	r19, r0
    2342:	11 24       	eor	r1, r1
    2344:	73 2e       	mov	r7, r19
    2346:	13 c0       	rjmp	.+38     	; 0x236e <vfprintf+0xf8>
    2348:	4a e0       	ldi	r20, 0x0A	; 10
    234a:	64 9e       	mul	r6, r20
    234c:	30 0d       	add	r19, r0
    234e:	11 24       	eor	r1, r1
    2350:	63 2e       	mov	r6, r19
    2352:	20 62       	ori	r18, 0x20	; 32
    2354:	0c c0       	rjmp	.+24     	; 0x236e <vfprintf+0xf8>
    2356:	8e 32       	cpi	r24, 0x2E	; 46
    2358:	21 f4       	brne	.+8      	; 0x2362 <vfprintf+0xec>
    235a:	26 fd       	sbrc	r18, 6
    235c:	f7 c2       	rjmp	.+1518   	; 0x294c <vfprintf+0x6d6>
    235e:	20 64       	ori	r18, 0x40	; 64
    2360:	06 c0       	rjmp	.+12     	; 0x236e <vfprintf+0xf8>
    2362:	8c 36       	cpi	r24, 0x6C	; 108
    2364:	11 f4       	brne	.+4      	; 0x236a <vfprintf+0xf4>
    2366:	20 68       	ori	r18, 0x80	; 128
    2368:	02 c0       	rjmp	.+4      	; 0x236e <vfprintf+0xf8>
    236a:	88 36       	cpi	r24, 0x68	; 104
    236c:	41 f4       	brne	.+16     	; 0x237e <vfprintf+0x108>
    236e:	f1 01       	movw	r30, r2
    2370:	93 fd       	sbrc	r25, 3
    2372:	85 91       	lpm	r24, Z+
    2374:	93 ff       	sbrs	r25, 3
    2376:	81 91       	ld	r24, Z+
    2378:	1f 01       	movw	r2, r30
    237a:	81 11       	cpse	r24, r1
    237c:	c0 cf       	rjmp	.-128    	; 0x22fe <vfprintf+0x88>
    237e:	98 2f       	mov	r25, r24
    2380:	95 54       	subi	r25, 0x45	; 69
    2382:	93 30       	cpi	r25, 0x03	; 3
    2384:	18 f4       	brcc	.+6      	; 0x238c <vfprintf+0x116>
    2386:	20 61       	ori	r18, 0x10	; 16
    2388:	80 5e       	subi	r24, 0xE0	; 224
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <vfprintf+0x122>
    238c:	98 2f       	mov	r25, r24
    238e:	95 56       	subi	r25, 0x65	; 101
    2390:	93 30       	cpi	r25, 0x03	; 3
    2392:	08 f0       	brcs	.+2      	; 0x2396 <vfprintf+0x120>
    2394:	94 c1       	rjmp	.+808    	; 0x26be <vfprintf+0x448>
    2396:	2f 7e       	andi	r18, 0xEF	; 239
    2398:	26 fd       	sbrc	r18, 6
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x12a>
    239c:	16 e0       	ldi	r17, 0x06	; 6
    239e:	71 2e       	mov	r7, r17
    23a0:	bf e3       	ldi	r27, 0x3F	; 63
    23a2:	5b 2e       	mov	r5, r27
    23a4:	52 22       	and	r5, r18
    23a6:	85 36       	cpi	r24, 0x65	; 101
    23a8:	19 f4       	brne	.+6      	; 0x23b0 <vfprintf+0x13a>
    23aa:	f0 e4       	ldi	r31, 0x40	; 64
    23ac:	5f 2a       	or	r5, r31
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <vfprintf+0x148>
    23b0:	86 36       	cpi	r24, 0x66	; 102
    23b2:	19 f4       	brne	.+6      	; 0x23ba <vfprintf+0x144>
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	54 2a       	or	r5, r20
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <vfprintf+0x148>
    23ba:	71 10       	cpse	r7, r1
    23bc:	7a 94       	dec	r7
    23be:	57 fe       	sbrs	r5, 7
    23c0:	07 c0       	rjmp	.+14     	; 0x23d0 <vfprintf+0x15a>
    23c2:	5b e3       	ldi	r21, 0x3B	; 59
    23c4:	57 15       	cp	r21, r7
    23c6:	48 f0       	brcs	.+18     	; 0x23da <vfprintf+0x164>
    23c8:	47 2c       	mov	r4, r7
    23ca:	43 94       	inc	r4
    23cc:	27 e0       	ldi	r18, 0x07	; 7
    23ce:	0d c0       	rjmp	.+26     	; 0x23ea <vfprintf+0x174>
    23d0:	87 e0       	ldi	r24, 0x07	; 7
    23d2:	87 15       	cp	r24, r7
    23d4:	30 f0       	brcs	.+12     	; 0x23e2 <vfprintf+0x16c>
    23d6:	27 2d       	mov	r18, r7
    23d8:	07 c0       	rjmp	.+14     	; 0x23e8 <vfprintf+0x172>
    23da:	27 e0       	ldi	r18, 0x07	; 7
    23dc:	ac e3       	ldi	r26, 0x3C	; 60
    23de:	4a 2e       	mov	r4, r26
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <vfprintf+0x174>
    23e2:	27 e0       	ldi	r18, 0x07	; 7
    23e4:	f7 e0       	ldi	r31, 0x07	; 7
    23e6:	7f 2e       	mov	r7, r31
    23e8:	41 2c       	mov	r4, r1
    23ea:	56 01       	movw	r10, r12
    23ec:	94 e0       	ldi	r25, 0x04	; 4
    23ee:	a9 0e       	add	r10, r25
    23f0:	b1 1c       	adc	r11, r1
    23f2:	f6 01       	movw	r30, r12
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	04 2d       	mov	r16, r4
    23fe:	a4 01       	movw	r20, r8
    2400:	7b d3       	rcall	.+1782   	; 0x2af8 <__ftoa_engine>
    2402:	8c 01       	movw	r16, r24
    2404:	49 81       	ldd	r20, Y+1	; 0x01
    2406:	4c 87       	std	Y+12, r20	; 0x0c
    2408:	40 ff       	sbrs	r20, 0
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <vfprintf+0x19a>
    240c:	43 ff       	sbrs	r20, 3
    240e:	07 c0       	rjmp	.+14     	; 0x241e <vfprintf+0x1a8>
    2410:	51 fc       	sbrc	r5, 1
    2412:	08 c0       	rjmp	.+16     	; 0x2424 <vfprintf+0x1ae>
    2414:	52 fe       	sbrs	r5, 2
    2416:	09 c0       	rjmp	.+18     	; 0x242a <vfprintf+0x1b4>
    2418:	e0 e2       	ldi	r30, 0x20	; 32
    241a:	de 2e       	mov	r13, r30
    241c:	07 c0       	rjmp	.+14     	; 0x242c <vfprintf+0x1b6>
    241e:	7d e2       	ldi	r23, 0x2D	; 45
    2420:	d7 2e       	mov	r13, r23
    2422:	04 c0       	rjmp	.+8      	; 0x242c <vfprintf+0x1b6>
    2424:	6b e2       	ldi	r22, 0x2B	; 43
    2426:	d6 2e       	mov	r13, r22
    2428:	01 c0       	rjmp	.+2      	; 0x242c <vfprintf+0x1b6>
    242a:	d1 2c       	mov	r13, r1
    242c:	8c 85       	ldd	r24, Y+12	; 0x0c
    242e:	8c 70       	andi	r24, 0x0C	; 12
    2430:	89 f1       	breq	.+98     	; 0x2494 <vfprintf+0x21e>
    2432:	dd 20       	and	r13, r13
    2434:	11 f0       	breq	.+4      	; 0x243a <vfprintf+0x1c4>
    2436:	84 e0       	ldi	r24, 0x04	; 4
    2438:	01 c0       	rjmp	.+2      	; 0x243c <vfprintf+0x1c6>
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	86 15       	cp	r24, r6
    243e:	10 f0       	brcs	.+4      	; 0x2444 <vfprintf+0x1ce>
    2440:	61 2c       	mov	r6, r1
    2442:	0a c0       	rjmp	.+20     	; 0x2458 <vfprintf+0x1e2>
    2444:	68 1a       	sub	r6, r24
    2446:	53 fc       	sbrc	r5, 3
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <vfprintf+0x1e2>
    244a:	b7 01       	movw	r22, r14
    244c:	80 e2       	ldi	r24, 0x20	; 32
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	8b d4       	rcall	.+2326   	; 0x2d68 <fputc>
    2452:	6a 94       	dec	r6
    2454:	d1 f7       	brne	.-12     	; 0x244a <vfprintf+0x1d4>
    2456:	f4 cf       	rjmp	.-24     	; 0x2440 <vfprintf+0x1ca>
    2458:	dd 20       	and	r13, r13
    245a:	21 f0       	breq	.+8      	; 0x2464 <vfprintf+0x1ee>
    245c:	b7 01       	movw	r22, r14
    245e:	8d 2d       	mov	r24, r13
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	82 d4       	rcall	.+2308   	; 0x2d68 <fputc>
    2464:	5c 85       	ldd	r21, Y+12	; 0x0c
    2466:	53 fd       	sbrc	r21, 3
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <vfprintf+0x1fa>
    246a:	08 ef       	ldi	r16, 0xF8	; 248
    246c:	11 e0       	ldi	r17, 0x01	; 1
    246e:	0b c0       	rjmp	.+22     	; 0x2486 <vfprintf+0x210>
    2470:	04 ef       	ldi	r16, 0xF4	; 244
    2472:	11 e0       	ldi	r17, 0x01	; 1
    2474:	08 c0       	rjmp	.+16     	; 0x2486 <vfprintf+0x210>
    2476:	51 10       	cpse	r5, r1
    2478:	80 52       	subi	r24, 0x20	; 32
    247a:	b7 01       	movw	r22, r14
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	74 d4       	rcall	.+2280   	; 0x2d68 <fputc>
    2480:	0f 5f       	subi	r16, 0xFF	; 255
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	02 c0       	rjmp	.+4      	; 0x248a <vfprintf+0x214>
    2486:	80 e1       	ldi	r24, 0x10	; 16
    2488:	58 22       	and	r5, r24
    248a:	f8 01       	movw	r30, r16
    248c:	84 91       	lpm	r24, Z
    248e:	81 11       	cpse	r24, r1
    2490:	f2 cf       	rjmp	.-28     	; 0x2476 <vfprintf+0x200>
    2492:	59 c2       	rjmp	.+1202   	; 0x2946 <vfprintf+0x6d0>
    2494:	57 fe       	sbrs	r5, 7
    2496:	0e c0       	rjmp	.+28     	; 0x24b4 <vfprintf+0x23e>
    2498:	40 0e       	add	r4, r16
    249a:	4c 85       	ldd	r20, Y+12	; 0x0c
    249c:	44 ff       	sbrs	r20, 4
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <vfprintf+0x232>
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	81 33       	cpi	r24, 0x31	; 49
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <vfprintf+0x232>
    24a6:	4a 94       	dec	r4
    24a8:	14 14       	cp	r1, r4
    24aa:	4c f5       	brge	.+82     	; 0x24fe <vfprintf+0x288>
    24ac:	58 e0       	ldi	r21, 0x08	; 8
    24ae:	54 15       	cp	r21, r4
    24b0:	48 f1       	brcs	.+82     	; 0x2504 <vfprintf+0x28e>
    24b2:	2c c0       	rjmp	.+88     	; 0x250c <vfprintf+0x296>
    24b4:	56 fc       	sbrc	r5, 6
    24b6:	2a c0       	rjmp	.+84     	; 0x250c <vfprintf+0x296>
    24b8:	87 2d       	mov	r24, r7
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	80 17       	cp	r24, r16
    24be:	91 07       	cpc	r25, r17
    24c0:	44 f0       	brlt	.+16     	; 0x24d2 <vfprintf+0x25c>
    24c2:	0c 3f       	cpi	r16, 0xFC	; 252
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	18 07       	cpc	r17, r24
    24c8:	24 f0       	brlt	.+8      	; 0x24d2 <vfprintf+0x25c>
    24ca:	90 e8       	ldi	r25, 0x80	; 128
    24cc:	59 2a       	or	r5, r25
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <vfprintf+0x25c>
    24d0:	7a 94       	dec	r7
    24d2:	77 20       	and	r7, r7
    24d4:	49 f0       	breq	.+18     	; 0x24e8 <vfprintf+0x272>
    24d6:	e2 e0       	ldi	r30, 0x02	; 2
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	ec 0f       	add	r30, r28
    24dc:	fd 1f       	adc	r31, r29
    24de:	e7 0d       	add	r30, r7
    24e0:	f1 1d       	adc	r31, r1
    24e2:	80 81       	ld	r24, Z
    24e4:	80 33       	cpi	r24, 0x30	; 48
    24e6:	a1 f3       	breq	.-24     	; 0x24d0 <vfprintf+0x25a>
    24e8:	57 fe       	sbrs	r5, 7
    24ea:	10 c0       	rjmp	.+32     	; 0x250c <vfprintf+0x296>
    24ec:	47 2c       	mov	r4, r7
    24ee:	43 94       	inc	r4
    24f0:	87 2d       	mov	r24, r7
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	08 17       	cp	r16, r24
    24f6:	19 07       	cpc	r17, r25
    24f8:	44 f4       	brge	.+16     	; 0x250a <vfprintf+0x294>
    24fa:	70 1a       	sub	r7, r16
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <vfprintf+0x296>
    24fe:	44 24       	eor	r4, r4
    2500:	43 94       	inc	r4
    2502:	04 c0       	rjmp	.+8      	; 0x250c <vfprintf+0x296>
    2504:	58 e0       	ldi	r21, 0x08	; 8
    2506:	45 2e       	mov	r4, r21
    2508:	01 c0       	rjmp	.+2      	; 0x250c <vfprintf+0x296>
    250a:	71 2c       	mov	r7, r1
    250c:	57 fe       	sbrs	r5, 7
    250e:	07 c0       	rjmp	.+14     	; 0x251e <vfprintf+0x2a8>
    2510:	10 16       	cp	r1, r16
    2512:	11 06       	cpc	r1, r17
    2514:	3c f4       	brge	.+14     	; 0x2524 <vfprintf+0x2ae>
    2516:	98 01       	movw	r18, r16
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	05 c0       	rjmp	.+10     	; 0x2528 <vfprintf+0x2b2>
    251e:	25 e0       	ldi	r18, 0x05	; 5
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <vfprintf+0x2b2>
    2524:	21 e0       	ldi	r18, 0x01	; 1
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	dd 20       	and	r13, r13
    252a:	11 f0       	breq	.+4      	; 0x2530 <vfprintf+0x2ba>
    252c:	2f 5f       	subi	r18, 0xFF	; 255
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	77 20       	and	r7, r7
    2532:	31 f0       	breq	.+12     	; 0x2540 <vfprintf+0x2ca>
    2534:	47 2d       	mov	r20, r7
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	4f 5f       	subi	r20, 0xFF	; 255
    253a:	5f 4f       	sbci	r21, 0xFF	; 255
    253c:	24 0f       	add	r18, r20
    253e:	35 1f       	adc	r19, r21
    2540:	46 2d       	mov	r20, r6
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	24 17       	cp	r18, r20
    2546:	35 07       	cpc	r19, r21
    2548:	14 f4       	brge	.+4      	; 0x254e <vfprintf+0x2d8>
    254a:	62 1a       	sub	r6, r18
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <vfprintf+0x2da>
    254e:	61 2c       	mov	r6, r1
    2550:	85 2d       	mov	r24, r5
    2552:	89 70       	andi	r24, 0x09	; 9
    2554:	41 f4       	brne	.+16     	; 0x2566 <vfprintf+0x2f0>
    2556:	05 c0       	rjmp	.+10     	; 0x2562 <vfprintf+0x2ec>
    2558:	b7 01       	movw	r22, r14
    255a:	80 e2       	ldi	r24, 0x20	; 32
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	04 d4       	rcall	.+2056   	; 0x2d68 <fputc>
    2560:	6a 94       	dec	r6
    2562:	61 10       	cpse	r6, r1
    2564:	f9 cf       	rjmp	.-14     	; 0x2558 <vfprintf+0x2e2>
    2566:	dd 20       	and	r13, r13
    2568:	21 f0       	breq	.+8      	; 0x2572 <vfprintf+0x2fc>
    256a:	b7 01       	movw	r22, r14
    256c:	8d 2d       	mov	r24, r13
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	fb d3       	rcall	.+2038   	; 0x2d68 <fputc>
    2572:	53 fc       	sbrc	r5, 3
    2574:	08 c0       	rjmp	.+16     	; 0x2586 <vfprintf+0x310>
    2576:	05 c0       	rjmp	.+10     	; 0x2582 <vfprintf+0x30c>
    2578:	b7 01       	movw	r22, r14
    257a:	80 e3       	ldi	r24, 0x30	; 48
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	f4 d3       	rcall	.+2024   	; 0x2d68 <fputc>
    2580:	6a 94       	dec	r6
    2582:	61 10       	cpse	r6, r1
    2584:	f9 cf       	rjmp	.-14     	; 0x2578 <vfprintf+0x302>
    2586:	57 fe       	sbrs	r5, 7
    2588:	54 c0       	rjmp	.+168    	; 0x2632 <vfprintf+0x3bc>
    258a:	68 01       	movw	r12, r16
    258c:	17 ff       	sbrs	r17, 7
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfprintf+0x31e>
    2590:	c1 2c       	mov	r12, r1
    2592:	d1 2c       	mov	r13, r1
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	a8 01       	movw	r20, r16
    259a:	44 19       	sub	r20, r4
    259c:	51 09       	sbc	r21, r1
    259e:	4d 87       	std	Y+13, r20	; 0x0d
    25a0:	5e 87       	std	Y+14, r21	; 0x0e
    25a2:	28 01       	movw	r4, r16
    25a4:	4c 18       	sub	r4, r12
    25a6:	5d 08       	sbc	r5, r13
    25a8:	48 0c       	add	r4, r8
    25aa:	59 1c       	adc	r5, r9
    25ac:	87 2d       	mov	r24, r7
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	44 27       	eor	r20, r20
    25b2:	55 27       	eor	r21, r21
    25b4:	48 1b       	sub	r20, r24
    25b6:	59 0b       	sbc	r21, r25
    25b8:	4f 87       	std	Y+15, r20	; 0x0f
    25ba:	58 8b       	std	Y+16, r21	; 0x10
    25bc:	5f ef       	ldi	r21, 0xFF	; 255
    25be:	c5 16       	cp	r12, r21
    25c0:	d5 06       	cpc	r13, r21
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <vfprintf+0x35e>
    25c4:	b7 01       	movw	r22, r14
    25c6:	8e e2       	ldi	r24, 0x2E	; 46
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	2a 8b       	std	Y+18, r18	; 0x12
    25cc:	39 8b       	std	Y+17, r19	; 0x11
    25ce:	cc d3       	rcall	.+1944   	; 0x2d68 <fputc>
    25d0:	39 89       	ldd	r19, Y+17	; 0x11
    25d2:	2a 89       	ldd	r18, Y+18	; 0x12
    25d4:	0c 15       	cp	r16, r12
    25d6:	1d 05       	cpc	r17, r13
    25d8:	54 f0       	brlt	.+20     	; 0x25ee <vfprintf+0x378>
    25da:	4d 85       	ldd	r20, Y+13	; 0x0d
    25dc:	5e 85       	ldd	r21, Y+14	; 0x0e
    25de:	4c 15       	cp	r20, r12
    25e0:	5d 05       	cpc	r21, r13
    25e2:	2c f4       	brge	.+10     	; 0x25ee <vfprintf+0x378>
    25e4:	f2 01       	movw	r30, r4
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	81 81       	ldd	r24, Z+1	; 0x01
    25ec:	01 c0       	rjmp	.+2      	; 0x25f0 <vfprintf+0x37a>
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	51 e0       	ldi	r21, 0x01	; 1
    25f2:	c5 1a       	sub	r12, r21
    25f4:	d1 08       	sbc	r13, r1
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    25fc:	58 89       	ldd	r21, Y+16	; 0x10
    25fe:	c4 16       	cp	r12, r20
    2600:	d5 06       	cpc	r13, r21
    2602:	44 f0       	brlt	.+16     	; 0x2614 <vfprintf+0x39e>
    2604:	b7 01       	movw	r22, r14
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	2a 8b       	std	Y+18, r18	; 0x12
    260a:	39 8b       	std	Y+17, r19	; 0x11
    260c:	ad d3       	rcall	.+1882   	; 0x2d68 <fputc>
    260e:	2a 89       	ldd	r18, Y+18	; 0x12
    2610:	39 89       	ldd	r19, Y+17	; 0x11
    2612:	d4 cf       	rjmp	.-88     	; 0x25bc <vfprintf+0x346>
    2614:	c0 16       	cp	r12, r16
    2616:	d1 06       	cpc	r13, r17
    2618:	49 f4       	brne	.+18     	; 0x262c <vfprintf+0x3b6>
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	96 33       	cpi	r25, 0x36	; 54
    261e:	28 f4       	brcc	.+10     	; 0x262a <vfprintf+0x3b4>
    2620:	95 33       	cpi	r25, 0x35	; 53
    2622:	21 f4       	brne	.+8      	; 0x262c <vfprintf+0x3b6>
    2624:	5c 85       	ldd	r21, Y+12	; 0x0c
    2626:	54 fd       	sbrc	r21, 4
    2628:	01 c0       	rjmp	.+2      	; 0x262c <vfprintf+0x3b6>
    262a:	81 e3       	ldi	r24, 0x31	; 49
    262c:	b7 01       	movw	r22, r14
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	44 c0       	rjmp	.+136    	; 0x26ba <vfprintf+0x444>
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	81 33       	cpi	r24, 0x31	; 49
    2636:	19 f0       	breq	.+6      	; 0x263e <vfprintf+0x3c8>
    2638:	4c 85       	ldd	r20, Y+12	; 0x0c
    263a:	4f 7e       	andi	r20, 0xEF	; 239
    263c:	4c 87       	std	Y+12, r20	; 0x0c
    263e:	b7 01       	movw	r22, r14
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	92 d3       	rcall	.+1828   	; 0x2d68 <fputc>
    2644:	71 10       	cpse	r7, r1
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <vfprintf+0x3dc>
    2648:	54 fe       	sbrs	r5, 4
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <vfprintf+0x3fe>
    264c:	85 e4       	ldi	r24, 0x45	; 69
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	13 c0       	rjmp	.+38     	; 0x2678 <vfprintf+0x402>
    2652:	b7 01       	movw	r22, r14
    2654:	8e e2       	ldi	r24, 0x2E	; 46
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	87 d3       	rcall	.+1806   	; 0x2d68 <fputc>
    265a:	42 e0       	ldi	r20, 0x02	; 2
    265c:	d4 2e       	mov	r13, r20
    265e:	f4 01       	movw	r30, r8
    2660:	ed 0d       	add	r30, r13
    2662:	f1 1d       	adc	r31, r1
    2664:	d3 94       	inc	r13
    2666:	b7 01       	movw	r22, r14
    2668:	80 81       	ld	r24, Z
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	7d d3       	rcall	.+1786   	; 0x2d68 <fputc>
    266e:	7a 94       	dec	r7
    2670:	b1 f7       	brne	.-20     	; 0x265e <vfprintf+0x3e8>
    2672:	ea cf       	rjmp	.-44     	; 0x2648 <vfprintf+0x3d2>
    2674:	85 e6       	ldi	r24, 0x65	; 101
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	b7 01       	movw	r22, r14
    267a:	76 d3       	rcall	.+1772   	; 0x2d68 <fputc>
    267c:	17 fd       	sbrc	r17, 7
    267e:	06 c0       	rjmp	.+12     	; 0x268c <vfprintf+0x416>
    2680:	01 15       	cp	r16, r1
    2682:	11 05       	cpc	r17, r1
    2684:	41 f4       	brne	.+16     	; 0x2696 <vfprintf+0x420>
    2686:	5c 85       	ldd	r21, Y+12	; 0x0c
    2688:	54 ff       	sbrs	r21, 4
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <vfprintf+0x420>
    268c:	11 95       	neg	r17
    268e:	01 95       	neg	r16
    2690:	11 09       	sbc	r17, r1
    2692:	8d e2       	ldi	r24, 0x2D	; 45
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <vfprintf+0x422>
    2696:	8b e2       	ldi	r24, 0x2B	; 43
    2698:	b7 01       	movw	r22, r14
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	65 d3       	rcall	.+1738   	; 0x2d68 <fputc>
    269e:	80 e3       	ldi	r24, 0x30	; 48
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <vfprintf+0x432>
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	0a 50       	subi	r16, 0x0A	; 10
    26a6:	11 09       	sbc	r17, r1
    26a8:	0a 30       	cpi	r16, 0x0A	; 10
    26aa:	11 05       	cpc	r17, r1
    26ac:	d4 f7       	brge	.-12     	; 0x26a2 <vfprintf+0x42c>
    26ae:	b7 01       	movw	r22, r14
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	5a d3       	rcall	.+1716   	; 0x2d68 <fputc>
    26b4:	b7 01       	movw	r22, r14
    26b6:	c8 01       	movw	r24, r16
    26b8:	c0 96       	adiw	r24, 0x30	; 48
    26ba:	56 d3       	rcall	.+1708   	; 0x2d68 <fputc>
    26bc:	44 c1       	rjmp	.+648    	; 0x2946 <vfprintf+0x6d0>
    26be:	83 36       	cpi	r24, 0x63	; 99
    26c0:	31 f0       	breq	.+12     	; 0x26ce <vfprintf+0x458>
    26c2:	83 37       	cpi	r24, 0x73	; 115
    26c4:	81 f0       	breq	.+32     	; 0x26e6 <vfprintf+0x470>
    26c6:	83 35       	cpi	r24, 0x53	; 83
    26c8:	09 f0       	breq	.+2      	; 0x26cc <vfprintf+0x456>
    26ca:	5a c0       	rjmp	.+180    	; 0x2780 <vfprintf+0x50a>
    26cc:	23 c0       	rjmp	.+70     	; 0x2714 <vfprintf+0x49e>
    26ce:	56 01       	movw	r10, r12
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	a8 0e       	add	r10, r24
    26d4:	b1 1c       	adc	r11, r1
    26d6:	f6 01       	movw	r30, r12
    26d8:	80 81       	ld	r24, Z
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	cc 24       	eor	r12, r12
    26de:	c3 94       	inc	r12
    26e0:	d1 2c       	mov	r13, r1
    26e2:	84 01       	movw	r16, r8
    26e4:	13 c0       	rjmp	.+38     	; 0x270c <vfprintf+0x496>
    26e6:	56 01       	movw	r10, r12
    26e8:	f2 e0       	ldi	r31, 0x02	; 2
    26ea:	af 0e       	add	r10, r31
    26ec:	b1 1c       	adc	r11, r1
    26ee:	f6 01       	movw	r30, r12
    26f0:	00 81       	ld	r16, Z
    26f2:	11 81       	ldd	r17, Z+1	; 0x01
    26f4:	26 ff       	sbrs	r18, 6
    26f6:	03 c0       	rjmp	.+6      	; 0x26fe <vfprintf+0x488>
    26f8:	67 2d       	mov	r22, r7
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <vfprintf+0x48c>
    26fe:	6f ef       	ldi	r22, 0xFF	; 255
    2700:	7f ef       	ldi	r23, 0xFF	; 255
    2702:	c8 01       	movw	r24, r16
    2704:	2a 8b       	std	Y+18, r18	; 0x12
    2706:	db d2       	rcall	.+1462   	; 0x2cbe <strnlen>
    2708:	6c 01       	movw	r12, r24
    270a:	2a 89       	ldd	r18, Y+18	; 0x12
    270c:	9f e7       	ldi	r25, 0x7F	; 127
    270e:	59 2e       	mov	r5, r25
    2710:	52 22       	and	r5, r18
    2712:	16 c0       	rjmp	.+44     	; 0x2740 <vfprintf+0x4ca>
    2714:	56 01       	movw	r10, r12
    2716:	f2 e0       	ldi	r31, 0x02	; 2
    2718:	af 0e       	add	r10, r31
    271a:	b1 1c       	adc	r11, r1
    271c:	f6 01       	movw	r30, r12
    271e:	00 81       	ld	r16, Z
    2720:	11 81       	ldd	r17, Z+1	; 0x01
    2722:	26 ff       	sbrs	r18, 6
    2724:	03 c0       	rjmp	.+6      	; 0x272c <vfprintf+0x4b6>
    2726:	67 2d       	mov	r22, r7
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <vfprintf+0x4ba>
    272c:	6f ef       	ldi	r22, 0xFF	; 255
    272e:	7f ef       	ldi	r23, 0xFF	; 255
    2730:	c8 01       	movw	r24, r16
    2732:	2a 8b       	std	Y+18, r18	; 0x12
    2734:	b9 d2       	rcall	.+1394   	; 0x2ca8 <strnlen_P>
    2736:	6c 01       	movw	r12, r24
    2738:	2a 89       	ldd	r18, Y+18	; 0x12
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	58 2e       	mov	r5, r24
    273e:	52 2a       	or	r5, r18
    2740:	53 fc       	sbrc	r5, 3
    2742:	1a c0       	rjmp	.+52     	; 0x2778 <vfprintf+0x502>
    2744:	05 c0       	rjmp	.+10     	; 0x2750 <vfprintf+0x4da>
    2746:	b7 01       	movw	r22, r14
    2748:	80 e2       	ldi	r24, 0x20	; 32
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0d d3       	rcall	.+1562   	; 0x2d68 <fputc>
    274e:	6a 94       	dec	r6
    2750:	86 2d       	mov	r24, r6
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	c8 16       	cp	r12, r24
    2756:	d9 06       	cpc	r13, r25
    2758:	b0 f3       	brcs	.-20     	; 0x2746 <vfprintf+0x4d0>
    275a:	0e c0       	rjmp	.+28     	; 0x2778 <vfprintf+0x502>
    275c:	f8 01       	movw	r30, r16
    275e:	57 fc       	sbrc	r5, 7
    2760:	85 91       	lpm	r24, Z+
    2762:	57 fe       	sbrs	r5, 7
    2764:	81 91       	ld	r24, Z+
    2766:	8f 01       	movw	r16, r30
    2768:	b7 01       	movw	r22, r14
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	fd d2       	rcall	.+1530   	; 0x2d68 <fputc>
    276e:	61 10       	cpse	r6, r1
    2770:	6a 94       	dec	r6
    2772:	f1 e0       	ldi	r31, 0x01	; 1
    2774:	cf 1a       	sub	r12, r31
    2776:	d1 08       	sbc	r13, r1
    2778:	c1 14       	cp	r12, r1
    277a:	d1 04       	cpc	r13, r1
    277c:	79 f7       	brne	.-34     	; 0x275c <vfprintf+0x4e6>
    277e:	e3 c0       	rjmp	.+454    	; 0x2946 <vfprintf+0x6d0>
    2780:	84 36       	cpi	r24, 0x64	; 100
    2782:	11 f0       	breq	.+4      	; 0x2788 <vfprintf+0x512>
    2784:	89 36       	cpi	r24, 0x69	; 105
    2786:	49 f5       	brne	.+82     	; 0x27da <vfprintf+0x564>
    2788:	56 01       	movw	r10, r12
    278a:	27 ff       	sbrs	r18, 7
    278c:	09 c0       	rjmp	.+18     	; 0x27a0 <vfprintf+0x52a>
    278e:	44 e0       	ldi	r20, 0x04	; 4
    2790:	a4 0e       	add	r10, r20
    2792:	b1 1c       	adc	r11, r1
    2794:	f6 01       	movw	r30, r12
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	0a c0       	rjmp	.+20     	; 0x27b4 <vfprintf+0x53e>
    27a0:	f2 e0       	ldi	r31, 0x02	; 2
    27a2:	af 0e       	add	r10, r31
    27a4:	b1 1c       	adc	r11, r1
    27a6:	f6 01       	movw	r30, r12
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	88 27       	eor	r24, r24
    27ae:	77 fd       	sbrc	r23, 7
    27b0:	80 95       	com	r24
    27b2:	98 2f       	mov	r25, r24
    27b4:	12 2f       	mov	r17, r18
    27b6:	1f 76       	andi	r17, 0x6F	; 111
    27b8:	97 ff       	sbrs	r25, 7
    27ba:	08 c0       	rjmp	.+16     	; 0x27cc <vfprintf+0x556>
    27bc:	90 95       	com	r25
    27be:	80 95       	com	r24
    27c0:	70 95       	com	r23
    27c2:	61 95       	neg	r22
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	8f 4f       	sbci	r24, 0xFF	; 255
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	10 68       	ori	r17, 0x80	; 128
    27cc:	2a e0       	ldi	r18, 0x0A	; 10
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	a4 01       	movw	r20, r8
    27d2:	36 d3       	rcall	.+1644   	; 0x2e40 <__ultoa_invert>
    27d4:	d8 2e       	mov	r13, r24
    27d6:	d8 18       	sub	r13, r8
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <vfprintf+0x5e2>
    27da:	12 2f       	mov	r17, r18
    27dc:	85 37       	cpi	r24, 0x75	; 117
    27de:	21 f4       	brne	.+8      	; 0x27e8 <vfprintf+0x572>
    27e0:	1f 7e       	andi	r17, 0xEF	; 239
    27e2:	2a e0       	ldi	r18, 0x0A	; 10
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	1f c0       	rjmp	.+62     	; 0x2826 <vfprintf+0x5b0>
    27e8:	19 7f       	andi	r17, 0xF9	; 249
    27ea:	8f 36       	cpi	r24, 0x6F	; 111
    27ec:	a1 f0       	breq	.+40     	; 0x2816 <vfprintf+0x5a0>
    27ee:	20 f4       	brcc	.+8      	; 0x27f8 <vfprintf+0x582>
    27f0:	88 35       	cpi	r24, 0x58	; 88
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <vfprintf+0x580>
    27f4:	ab c0       	rjmp	.+342    	; 0x294c <vfprintf+0x6d6>
    27f6:	0b c0       	rjmp	.+22     	; 0x280e <vfprintf+0x598>
    27f8:	80 37       	cpi	r24, 0x70	; 112
    27fa:	21 f0       	breq	.+8      	; 0x2804 <vfprintf+0x58e>
    27fc:	88 37       	cpi	r24, 0x78	; 120
    27fe:	09 f0       	breq	.+2      	; 0x2802 <vfprintf+0x58c>
    2800:	a5 c0       	rjmp	.+330    	; 0x294c <vfprintf+0x6d6>
    2802:	01 c0       	rjmp	.+2      	; 0x2806 <vfprintf+0x590>
    2804:	10 61       	ori	r17, 0x10	; 16
    2806:	14 ff       	sbrs	r17, 4
    2808:	09 c0       	rjmp	.+18     	; 0x281c <vfprintf+0x5a6>
    280a:	14 60       	ori	r17, 0x04	; 4
    280c:	07 c0       	rjmp	.+14     	; 0x281c <vfprintf+0x5a6>
    280e:	24 ff       	sbrs	r18, 4
    2810:	08 c0       	rjmp	.+16     	; 0x2822 <vfprintf+0x5ac>
    2812:	16 60       	ori	r17, 0x06	; 6
    2814:	06 c0       	rjmp	.+12     	; 0x2822 <vfprintf+0x5ac>
    2816:	28 e0       	ldi	r18, 0x08	; 8
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	05 c0       	rjmp	.+10     	; 0x2826 <vfprintf+0x5b0>
    281c:	20 e1       	ldi	r18, 0x10	; 16
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <vfprintf+0x5b0>
    2822:	20 e1       	ldi	r18, 0x10	; 16
    2824:	32 e0       	ldi	r19, 0x02	; 2
    2826:	56 01       	movw	r10, r12
    2828:	17 ff       	sbrs	r17, 7
    282a:	09 c0       	rjmp	.+18     	; 0x283e <vfprintf+0x5c8>
    282c:	f4 e0       	ldi	r31, 0x04	; 4
    282e:	af 0e       	add	r10, r31
    2830:	b1 1c       	adc	r11, r1
    2832:	f6 01       	movw	r30, r12
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	08 c0       	rjmp	.+16     	; 0x284e <vfprintf+0x5d8>
    283e:	f2 e0       	ldi	r31, 0x02	; 2
    2840:	af 0e       	add	r10, r31
    2842:	b1 1c       	adc	r11, r1
    2844:	f6 01       	movw	r30, r12
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	a4 01       	movw	r20, r8
    2850:	f7 d2       	rcall	.+1518   	; 0x2e40 <__ultoa_invert>
    2852:	d8 2e       	mov	r13, r24
    2854:	d8 18       	sub	r13, r8
    2856:	1f 77       	andi	r17, 0x7F	; 127
    2858:	16 ff       	sbrs	r17, 6
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <vfprintf+0x5fc>
    285c:	21 2f       	mov	r18, r17
    285e:	2e 7f       	andi	r18, 0xFE	; 254
    2860:	d7 14       	cp	r13, r7
    2862:	50 f4       	brcc	.+20     	; 0x2878 <vfprintf+0x602>
    2864:	14 ff       	sbrs	r17, 4
    2866:	0a c0       	rjmp	.+20     	; 0x287c <vfprintf+0x606>
    2868:	12 fd       	sbrc	r17, 2
    286a:	08 c0       	rjmp	.+16     	; 0x287c <vfprintf+0x606>
    286c:	21 2f       	mov	r18, r17
    286e:	2e 7e       	andi	r18, 0xEE	; 238
    2870:	05 c0       	rjmp	.+10     	; 0x287c <vfprintf+0x606>
    2872:	0d 2d       	mov	r16, r13
    2874:	21 2f       	mov	r18, r17
    2876:	03 c0       	rjmp	.+6      	; 0x287e <vfprintf+0x608>
    2878:	0d 2d       	mov	r16, r13
    287a:	01 c0       	rjmp	.+2      	; 0x287e <vfprintf+0x608>
    287c:	07 2d       	mov	r16, r7
    287e:	24 ff       	sbrs	r18, 4
    2880:	0c c0       	rjmp	.+24     	; 0x289a <vfprintf+0x624>
    2882:	fe 01       	movw	r30, r28
    2884:	ed 0d       	add	r30, r13
    2886:	f1 1d       	adc	r31, r1
    2888:	80 81       	ld	r24, Z
    288a:	80 33       	cpi	r24, 0x30	; 48
    288c:	11 f4       	brne	.+4      	; 0x2892 <vfprintf+0x61c>
    288e:	29 7e       	andi	r18, 0xE9	; 233
    2890:	08 c0       	rjmp	.+16     	; 0x28a2 <vfprintf+0x62c>
    2892:	22 ff       	sbrs	r18, 2
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <vfprintf+0x62a>
    2896:	0e 5f       	subi	r16, 0xFE	; 254
    2898:	04 c0       	rjmp	.+8      	; 0x28a2 <vfprintf+0x62c>
    289a:	82 2f       	mov	r24, r18
    289c:	86 78       	andi	r24, 0x86	; 134
    289e:	09 f0       	breq	.+2      	; 0x28a2 <vfprintf+0x62c>
    28a0:	0f 5f       	subi	r16, 0xFF	; 255
    28a2:	23 fd       	sbrc	r18, 3
    28a4:	13 c0       	rjmp	.+38     	; 0x28cc <vfprintf+0x656>
    28a6:	20 ff       	sbrs	r18, 0
    28a8:	0e c0       	rjmp	.+28     	; 0x28c6 <vfprintf+0x650>
    28aa:	7d 2c       	mov	r7, r13
    28ac:	06 15       	cp	r16, r6
    28ae:	58 f4       	brcc	.+22     	; 0x28c6 <vfprintf+0x650>
    28b0:	76 0c       	add	r7, r6
    28b2:	70 1a       	sub	r7, r16
    28b4:	06 2d       	mov	r16, r6
    28b6:	07 c0       	rjmp	.+14     	; 0x28c6 <vfprintf+0x650>
    28b8:	b7 01       	movw	r22, r14
    28ba:	80 e2       	ldi	r24, 0x20	; 32
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	2a 8b       	std	Y+18, r18	; 0x12
    28c0:	53 d2       	rcall	.+1190   	; 0x2d68 <fputc>
    28c2:	0f 5f       	subi	r16, 0xFF	; 255
    28c4:	2a 89       	ldd	r18, Y+18	; 0x12
    28c6:	06 15       	cp	r16, r6
    28c8:	b8 f3       	brcs	.-18     	; 0x28b8 <vfprintf+0x642>
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <vfprintf+0x65e>
    28cc:	06 15       	cp	r16, r6
    28ce:	10 f4       	brcc	.+4      	; 0x28d4 <vfprintf+0x65e>
    28d0:	60 1a       	sub	r6, r16
    28d2:	01 c0       	rjmp	.+2      	; 0x28d6 <vfprintf+0x660>
    28d4:	61 2c       	mov	r6, r1
    28d6:	24 ff       	sbrs	r18, 4
    28d8:	11 c0       	rjmp	.+34     	; 0x28fc <vfprintf+0x686>
    28da:	b7 01       	movw	r22, r14
    28dc:	80 e3       	ldi	r24, 0x30	; 48
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	2a 8b       	std	Y+18, r18	; 0x12
    28e2:	42 d2       	rcall	.+1156   	; 0x2d68 <fputc>
    28e4:	2a 89       	ldd	r18, Y+18	; 0x12
    28e6:	22 ff       	sbrs	r18, 2
    28e8:	1c c0       	rjmp	.+56     	; 0x2922 <vfprintf+0x6ac>
    28ea:	21 ff       	sbrs	r18, 1
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <vfprintf+0x67e>
    28ee:	88 e5       	ldi	r24, 0x58	; 88
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <vfprintf+0x682>
    28f4:	88 e7       	ldi	r24, 0x78	; 120
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	b7 01       	movw	r22, r14
    28fa:	0c c0       	rjmp	.+24     	; 0x2914 <vfprintf+0x69e>
    28fc:	82 2f       	mov	r24, r18
    28fe:	86 78       	andi	r24, 0x86	; 134
    2900:	81 f0       	breq	.+32     	; 0x2922 <vfprintf+0x6ac>
    2902:	21 fd       	sbrc	r18, 1
    2904:	02 c0       	rjmp	.+4      	; 0x290a <vfprintf+0x694>
    2906:	80 e2       	ldi	r24, 0x20	; 32
    2908:	01 c0       	rjmp	.+2      	; 0x290c <vfprintf+0x696>
    290a:	8b e2       	ldi	r24, 0x2B	; 43
    290c:	27 fd       	sbrc	r18, 7
    290e:	8d e2       	ldi	r24, 0x2D	; 45
    2910:	b7 01       	movw	r22, r14
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	29 d2       	rcall	.+1106   	; 0x2d68 <fputc>
    2916:	05 c0       	rjmp	.+10     	; 0x2922 <vfprintf+0x6ac>
    2918:	b7 01       	movw	r22, r14
    291a:	80 e3       	ldi	r24, 0x30	; 48
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	24 d2       	rcall	.+1096   	; 0x2d68 <fputc>
    2920:	7a 94       	dec	r7
    2922:	d7 14       	cp	r13, r7
    2924:	c8 f3       	brcs	.-14     	; 0x2918 <vfprintf+0x6a2>
    2926:	da 94       	dec	r13
    2928:	f4 01       	movw	r30, r8
    292a:	ed 0d       	add	r30, r13
    292c:	f1 1d       	adc	r31, r1
    292e:	b7 01       	movw	r22, r14
    2930:	80 81       	ld	r24, Z
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	19 d2       	rcall	.+1074   	; 0x2d68 <fputc>
    2936:	d1 10       	cpse	r13, r1
    2938:	f6 cf       	rjmp	.-20     	; 0x2926 <vfprintf+0x6b0>
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <vfprintf+0x6d0>
    293c:	b7 01       	movw	r22, r14
    293e:	80 e2       	ldi	r24, 0x20	; 32
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	12 d2       	rcall	.+1060   	; 0x2d68 <fputc>
    2944:	6a 94       	dec	r6
    2946:	61 10       	cpse	r6, r1
    2948:	f9 cf       	rjmp	.-14     	; 0x293c <vfprintf+0x6c6>
    294a:	b6 cc       	rjmp	.-1684   	; 0x22b8 <vfprintf+0x42>
    294c:	f7 01       	movw	r30, r14
    294e:	26 81       	ldd	r18, Z+6	; 0x06
    2950:	37 81       	ldd	r19, Z+7	; 0x07
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <vfprintf+0x6e2>
    2954:	2f ef       	ldi	r18, 0xFF	; 255
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	c9 01       	movw	r24, r18
    295a:	62 96       	adiw	r28, 0x12	; 18
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	4f 90       	pop	r4
    2980:	3f 90       	pop	r3
    2982:	2f 90       	pop	r2
    2984:	08 95       	ret

00002986 <__mulsi3>:
    2986:	db 01       	movw	r26, r22
    2988:	8f 93       	push	r24
    298a:	9f 93       	push	r25
    298c:	54 d0       	rcall	.+168    	; 0x2a36 <__muluhisi3>
    298e:	bf 91       	pop	r27
    2990:	af 91       	pop	r26
    2992:	a2 9f       	mul	r26, r18
    2994:	80 0d       	add	r24, r0
    2996:	91 1d       	adc	r25, r1
    2998:	a3 9f       	mul	r26, r19
    299a:	90 0d       	add	r25, r0
    299c:	b2 9f       	mul	r27, r18
    299e:	90 0d       	add	r25, r0
    29a0:	11 24       	eor	r1, r1
    29a2:	08 95       	ret

000029a4 <__udivmodsi4>:
    29a4:	a1 e2       	ldi	r26, 0x21	; 33
    29a6:	1a 2e       	mov	r1, r26
    29a8:	aa 1b       	sub	r26, r26
    29aa:	bb 1b       	sub	r27, r27
    29ac:	fd 01       	movw	r30, r26
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <__udivmodsi4_ep>

000029b0 <__udivmodsi4_loop>:
    29b0:	aa 1f       	adc	r26, r26
    29b2:	bb 1f       	adc	r27, r27
    29b4:	ee 1f       	adc	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	a2 17       	cp	r26, r18
    29ba:	b3 07       	cpc	r27, r19
    29bc:	e4 07       	cpc	r30, r20
    29be:	f5 07       	cpc	r31, r21
    29c0:	20 f0       	brcs	.+8      	; 0x29ca <__udivmodsi4_ep>
    29c2:	a2 1b       	sub	r26, r18
    29c4:	b3 0b       	sbc	r27, r19
    29c6:	e4 0b       	sbc	r30, r20
    29c8:	f5 0b       	sbc	r31, r21

000029ca <__udivmodsi4_ep>:
    29ca:	66 1f       	adc	r22, r22
    29cc:	77 1f       	adc	r23, r23
    29ce:	88 1f       	adc	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	1a 94       	dec	r1
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <__udivmodsi4_loop>
    29d6:	60 95       	com	r22
    29d8:	70 95       	com	r23
    29da:	80 95       	com	r24
    29dc:	90 95       	com	r25
    29de:	9b 01       	movw	r18, r22
    29e0:	ac 01       	movw	r20, r24
    29e2:	bd 01       	movw	r22, r26
    29e4:	cf 01       	movw	r24, r30
    29e6:	08 95       	ret

000029e8 <__divmodsi4>:
    29e8:	05 2e       	mov	r0, r21
    29ea:	97 fb       	bst	r25, 7
    29ec:	16 f4       	brtc	.+4      	; 0x29f2 <__divmodsi4+0xa>
    29ee:	00 94       	com	r0
    29f0:	06 d0       	rcall	.+12     	; 0x29fe <__divmodsi4_neg1>
    29f2:	57 fd       	sbrc	r21, 7
    29f4:	0c d0       	rcall	.+24     	; 0x2a0e <__divmodsi4_neg2>
    29f6:	d6 df       	rcall	.-84     	; 0x29a4 <__udivmodsi4>
    29f8:	07 fc       	sbrc	r0, 7
    29fa:	09 d0       	rcall	.+18     	; 0x2a0e <__divmodsi4_neg2>
    29fc:	7e f4       	brtc	.+30     	; 0x2a1c <__divmodsi4_exit>

000029fe <__divmodsi4_neg1>:
    29fe:	90 95       	com	r25
    2a00:	80 95       	com	r24
    2a02:	70 95       	com	r23
    2a04:	61 95       	neg	r22
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	08 95       	ret

00002a0e <__divmodsi4_neg2>:
    2a0e:	50 95       	com	r21
    2a10:	40 95       	com	r20
    2a12:	30 95       	com	r19
    2a14:	21 95       	neg	r18
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255

00002a1c <__divmodsi4_exit>:
    2a1c:	08 95       	ret

00002a1e <__umulhisi3>:
    2a1e:	a2 9f       	mul	r26, r18
    2a20:	b0 01       	movw	r22, r0
    2a22:	b3 9f       	mul	r27, r19
    2a24:	c0 01       	movw	r24, r0
    2a26:	a3 9f       	mul	r26, r19
    2a28:	01 d0       	rcall	.+2      	; 0x2a2c <__umulhisi3+0xe>
    2a2a:	b2 9f       	mul	r27, r18
    2a2c:	70 0d       	add	r23, r0
    2a2e:	81 1d       	adc	r24, r1
    2a30:	11 24       	eor	r1, r1
    2a32:	91 1d       	adc	r25, r1
    2a34:	08 95       	ret

00002a36 <__muluhisi3>:
    2a36:	f3 df       	rcall	.-26     	; 0x2a1e <__umulhisi3>
    2a38:	a5 9f       	mul	r26, r21
    2a3a:	90 0d       	add	r25, r0
    2a3c:	b4 9f       	mul	r27, r20
    2a3e:	90 0d       	add	r25, r0
    2a40:	a4 9f       	mul	r26, r20
    2a42:	80 0d       	add	r24, r0
    2a44:	91 1d       	adc	r25, r1
    2a46:	11 24       	eor	r1, r1
    2a48:	08 95       	ret

00002a4a <__mulshisi3>:
    2a4a:	b7 ff       	sbrs	r27, 7
    2a4c:	f4 cf       	rjmp	.-24     	; 0x2a36 <__muluhisi3>

00002a4e <__mulohisi3>:
    2a4e:	f3 df       	rcall	.-26     	; 0x2a36 <__muluhisi3>
    2a50:	82 1b       	sub	r24, r18
    2a52:	93 0b       	sbc	r25, r19
    2a54:	08 95       	ret

00002a56 <__muldi3>:
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	1f 93       	push	r17
    2a5c:	0f 93       	push	r16
    2a5e:	9a 9d       	mul	r25, r10
    2a60:	f0 2d       	mov	r31, r0
    2a62:	21 9f       	mul	r18, r17
    2a64:	f0 0d       	add	r31, r0
    2a66:	8b 9d       	mul	r24, r11
    2a68:	f0 0d       	add	r31, r0
    2a6a:	8a 9d       	mul	r24, r10
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	f1 0d       	add	r31, r1
    2a70:	03 9f       	mul	r16, r19
    2a72:	f0 0d       	add	r31, r0
    2a74:	02 9f       	mul	r16, r18
    2a76:	e0 0d       	add	r30, r0
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	4e 9d       	mul	r20, r14
    2a7c:	e0 0d       	add	r30, r0
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	5e 9d       	mul	r21, r14
    2a82:	f0 0d       	add	r31, r0
    2a84:	4f 9d       	mul	r20, r15
    2a86:	f0 0d       	add	r31, r0
    2a88:	7f 93       	push	r23
    2a8a:	6f 93       	push	r22
    2a8c:	bf 92       	push	r11
    2a8e:	af 92       	push	r10
    2a90:	5f 93       	push	r21
    2a92:	4f 93       	push	r20
    2a94:	d5 01       	movw	r26, r10
    2a96:	c3 df       	rcall	.-122    	; 0x2a1e <__umulhisi3>
    2a98:	8b 01       	movw	r16, r22
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	d7 01       	movw	r26, r14
    2a9e:	bf df       	rcall	.-130    	; 0x2a1e <__umulhisi3>
    2aa0:	eb 01       	movw	r28, r22
    2aa2:	e8 0f       	add	r30, r24
    2aa4:	f9 1f       	adc	r31, r25
    2aa6:	d6 01       	movw	r26, r12
    2aa8:	1f d0       	rcall	.+62     	; 0x2ae8 <__muldi3_6>
    2aaa:	2f 91       	pop	r18
    2aac:	3f 91       	pop	r19
    2aae:	d6 01       	movw	r26, r12
    2ab0:	b6 df       	rcall	.-148    	; 0x2a1e <__umulhisi3>
    2ab2:	c6 0f       	add	r28, r22
    2ab4:	d7 1f       	adc	r29, r23
    2ab6:	e8 1f       	adc	r30, r24
    2ab8:	f9 1f       	adc	r31, r25
    2aba:	af 91       	pop	r26
    2abc:	bf 91       	pop	r27
    2abe:	14 d0       	rcall	.+40     	; 0x2ae8 <__muldi3_6>
    2ac0:	2f 91       	pop	r18
    2ac2:	3f 91       	pop	r19
    2ac4:	ac df       	rcall	.-168    	; 0x2a1e <__umulhisi3>
    2ac6:	c6 0f       	add	r28, r22
    2ac8:	d7 1f       	adc	r29, r23
    2aca:	e8 1f       	adc	r30, r24
    2acc:	f9 1f       	adc	r31, r25
    2ace:	d6 01       	movw	r26, r12
    2ad0:	a6 df       	rcall	.-180    	; 0x2a1e <__umulhisi3>
    2ad2:	e6 0f       	add	r30, r22
    2ad4:	f7 1f       	adc	r31, r23
    2ad6:	98 01       	movw	r18, r16
    2ad8:	be 01       	movw	r22, r28
    2ada:	cf 01       	movw	r24, r30
    2adc:	11 24       	eor	r1, r1
    2ade:	0f 91       	pop	r16
    2ae0:	1f 91       	pop	r17
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <__muldi3_6>:
    2ae8:	9a df       	rcall	.-204    	; 0x2a1e <__umulhisi3>
    2aea:	46 0f       	add	r20, r22
    2aec:	57 1f       	adc	r21, r23
    2aee:	c8 1f       	adc	r28, r24
    2af0:	d9 1f       	adc	r29, r25
    2af2:	08 f4       	brcc	.+2      	; 0x2af6 <__muldi3_6+0xe>
    2af4:	31 96       	adiw	r30, 0x01	; 1
    2af6:	08 95       	ret

00002af8 <__ftoa_engine>:
    2af8:	28 30       	cpi	r18, 0x08	; 8
    2afa:	08 f0       	brcs	.+2      	; 0x2afe <__ftoa_engine+0x6>
    2afc:	27 e0       	ldi	r18, 0x07	; 7
    2afe:	33 27       	eor	r19, r19
    2b00:	da 01       	movw	r26, r20
    2b02:	99 0f       	add	r25, r25
    2b04:	31 1d       	adc	r19, r1
    2b06:	87 fd       	sbrc	r24, 7
    2b08:	91 60       	ori	r25, 0x01	; 1
    2b0a:	00 96       	adiw	r24, 0x00	; 0
    2b0c:	61 05       	cpc	r22, r1
    2b0e:	71 05       	cpc	r23, r1
    2b10:	39 f4       	brne	.+14     	; 0x2b20 <__ftoa_engine+0x28>
    2b12:	32 60       	ori	r19, 0x02	; 2
    2b14:	2e 5f       	subi	r18, 0xFE	; 254
    2b16:	3d 93       	st	X+, r19
    2b18:	30 e3       	ldi	r19, 0x30	; 48
    2b1a:	2a 95       	dec	r18
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <__ftoa_engine+0x1e>
    2b1e:	08 95       	ret
    2b20:	9f 3f       	cpi	r25, 0xFF	; 255
    2b22:	30 f0       	brcs	.+12     	; 0x2b30 <__ftoa_engine+0x38>
    2b24:	80 38       	cpi	r24, 0x80	; 128
    2b26:	71 05       	cpc	r23, r1
    2b28:	61 05       	cpc	r22, r1
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <__ftoa_engine+0x36>
    2b2c:	3c 5f       	subi	r19, 0xFC	; 252
    2b2e:	3c 5f       	subi	r19, 0xFC	; 252
    2b30:	3d 93       	st	X+, r19
    2b32:	91 30       	cpi	r25, 0x01	; 1
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <__ftoa_engine+0x40>
    2b36:	80 68       	ori	r24, 0x80	; 128
    2b38:	91 1d       	adc	r25, r1
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	1f 93       	push	r17
    2b40:	0f 93       	push	r16
    2b42:	ff 92       	push	r15
    2b44:	ef 92       	push	r14
    2b46:	19 2f       	mov	r17, r25
    2b48:	98 7f       	andi	r25, 0xF8	; 248
    2b4a:	96 95       	lsr	r25
    2b4c:	e9 2f       	mov	r30, r25
    2b4e:	96 95       	lsr	r25
    2b50:	96 95       	lsr	r25
    2b52:	e9 0f       	add	r30, r25
    2b54:	ff 27       	eor	r31, r31
    2b56:	ea 5a       	subi	r30, 0xAA	; 170
    2b58:	fd 4f       	sbci	r31, 0xFD	; 253
    2b5a:	99 27       	eor	r25, r25
    2b5c:	33 27       	eor	r19, r19
    2b5e:	ee 24       	eor	r14, r14
    2b60:	ff 24       	eor	r15, r15
    2b62:	a7 01       	movw	r20, r14
    2b64:	e7 01       	movw	r28, r14
    2b66:	05 90       	lpm	r0, Z+
    2b68:	08 94       	sec
    2b6a:	07 94       	ror	r0
    2b6c:	28 f4       	brcc	.+10     	; 0x2b78 <__ftoa_engine+0x80>
    2b6e:	36 0f       	add	r19, r22
    2b70:	e7 1e       	adc	r14, r23
    2b72:	f8 1e       	adc	r15, r24
    2b74:	49 1f       	adc	r20, r25
    2b76:	51 1d       	adc	r21, r1
    2b78:	66 0f       	add	r22, r22
    2b7a:	77 1f       	adc	r23, r23
    2b7c:	88 1f       	adc	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	06 94       	lsr	r0
    2b82:	a1 f7       	brne	.-24     	; 0x2b6c <__ftoa_engine+0x74>
    2b84:	05 90       	lpm	r0, Z+
    2b86:	07 94       	ror	r0
    2b88:	28 f4       	brcc	.+10     	; 0x2b94 <__ftoa_engine+0x9c>
    2b8a:	e7 0e       	add	r14, r23
    2b8c:	f8 1e       	adc	r15, r24
    2b8e:	49 1f       	adc	r20, r25
    2b90:	56 1f       	adc	r21, r22
    2b92:	c1 1d       	adc	r28, r1
    2b94:	77 0f       	add	r23, r23
    2b96:	88 1f       	adc	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	66 1f       	adc	r22, r22
    2b9c:	06 94       	lsr	r0
    2b9e:	a1 f7       	brne	.-24     	; 0x2b88 <__ftoa_engine+0x90>
    2ba0:	05 90       	lpm	r0, Z+
    2ba2:	07 94       	ror	r0
    2ba4:	28 f4       	brcc	.+10     	; 0x2bb0 <__ftoa_engine+0xb8>
    2ba6:	f8 0e       	add	r15, r24
    2ba8:	49 1f       	adc	r20, r25
    2baa:	56 1f       	adc	r21, r22
    2bac:	c7 1f       	adc	r28, r23
    2bae:	d1 1d       	adc	r29, r1
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	06 94       	lsr	r0
    2bba:	a1 f7       	brne	.-24     	; 0x2ba4 <__ftoa_engine+0xac>
    2bbc:	05 90       	lpm	r0, Z+
    2bbe:	07 94       	ror	r0
    2bc0:	20 f4       	brcc	.+8      	; 0x2bca <__ftoa_engine+0xd2>
    2bc2:	49 0f       	add	r20, r25
    2bc4:	56 1f       	adc	r21, r22
    2bc6:	c7 1f       	adc	r28, r23
    2bc8:	d8 1f       	adc	r29, r24
    2bca:	99 0f       	add	r25, r25
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	06 94       	lsr	r0
    2bd4:	a9 f7       	brne	.-22     	; 0x2bc0 <__ftoa_engine+0xc8>
    2bd6:	84 91       	lpm	r24, Z
    2bd8:	10 95       	com	r17
    2bda:	17 70       	andi	r17, 0x07	; 7
    2bdc:	41 f0       	breq	.+16     	; 0x2bee <__ftoa_engine+0xf6>
    2bde:	d6 95       	lsr	r29
    2be0:	c7 95       	ror	r28
    2be2:	57 95       	ror	r21
    2be4:	47 95       	ror	r20
    2be6:	f7 94       	ror	r15
    2be8:	e7 94       	ror	r14
    2bea:	1a 95       	dec	r17
    2bec:	c1 f7       	brne	.-16     	; 0x2bde <__ftoa_engine+0xe6>
    2bee:	ec ef       	ldi	r30, 0xFC	; 252
    2bf0:	f1 e0       	ldi	r31, 0x01	; 1
    2bf2:	68 94       	set
    2bf4:	15 90       	lpm	r1, Z+
    2bf6:	15 91       	lpm	r17, Z+
    2bf8:	35 91       	lpm	r19, Z+
    2bfa:	65 91       	lpm	r22, Z+
    2bfc:	95 91       	lpm	r25, Z+
    2bfe:	05 90       	lpm	r0, Z+
    2c00:	7f e2       	ldi	r23, 0x2F	; 47
    2c02:	73 95       	inc	r23
    2c04:	e1 18       	sub	r14, r1
    2c06:	f1 0a       	sbc	r15, r17
    2c08:	43 0b       	sbc	r20, r19
    2c0a:	56 0b       	sbc	r21, r22
    2c0c:	c9 0b       	sbc	r28, r25
    2c0e:	d0 09       	sbc	r29, r0
    2c10:	c0 f7       	brcc	.-16     	; 0x2c02 <__ftoa_engine+0x10a>
    2c12:	e1 0c       	add	r14, r1
    2c14:	f1 1e       	adc	r15, r17
    2c16:	43 1f       	adc	r20, r19
    2c18:	56 1f       	adc	r21, r22
    2c1a:	c9 1f       	adc	r28, r25
    2c1c:	d0 1d       	adc	r29, r0
    2c1e:	7e f4       	brtc	.+30     	; 0x2c3e <__ftoa_engine+0x146>
    2c20:	70 33       	cpi	r23, 0x30	; 48
    2c22:	11 f4       	brne	.+4      	; 0x2c28 <__ftoa_engine+0x130>
    2c24:	8a 95       	dec	r24
    2c26:	e6 cf       	rjmp	.-52     	; 0x2bf4 <__ftoa_engine+0xfc>
    2c28:	e8 94       	clt
    2c2a:	01 50       	subi	r16, 0x01	; 1
    2c2c:	30 f0       	brcs	.+12     	; 0x2c3a <__ftoa_engine+0x142>
    2c2e:	08 0f       	add	r16, r24
    2c30:	0a f4       	brpl	.+2      	; 0x2c34 <__ftoa_engine+0x13c>
    2c32:	00 27       	eor	r16, r16
    2c34:	02 17       	cp	r16, r18
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <__ftoa_engine+0x142>
    2c38:	20 2f       	mov	r18, r16
    2c3a:	23 95       	inc	r18
    2c3c:	02 2f       	mov	r16, r18
    2c3e:	7a 33       	cpi	r23, 0x3A	; 58
    2c40:	28 f0       	brcs	.+10     	; 0x2c4c <__ftoa_engine+0x154>
    2c42:	79 e3       	ldi	r23, 0x39	; 57
    2c44:	7d 93       	st	X+, r23
    2c46:	2a 95       	dec	r18
    2c48:	e9 f7       	brne	.-6      	; 0x2c44 <__ftoa_engine+0x14c>
    2c4a:	10 c0       	rjmp	.+32     	; 0x2c6c <__ftoa_engine+0x174>
    2c4c:	7d 93       	st	X+, r23
    2c4e:	2a 95       	dec	r18
    2c50:	89 f6       	brne	.-94     	; 0x2bf4 <__ftoa_engine+0xfc>
    2c52:	06 94       	lsr	r0
    2c54:	97 95       	ror	r25
    2c56:	67 95       	ror	r22
    2c58:	37 95       	ror	r19
    2c5a:	17 95       	ror	r17
    2c5c:	17 94       	ror	r1
    2c5e:	e1 18       	sub	r14, r1
    2c60:	f1 0a       	sbc	r15, r17
    2c62:	43 0b       	sbc	r20, r19
    2c64:	56 0b       	sbc	r21, r22
    2c66:	c9 0b       	sbc	r28, r25
    2c68:	d0 09       	sbc	r29, r0
    2c6a:	98 f0       	brcs	.+38     	; 0x2c92 <__ftoa_engine+0x19a>
    2c6c:	23 95       	inc	r18
    2c6e:	7e 91       	ld	r23, -X
    2c70:	73 95       	inc	r23
    2c72:	7a 33       	cpi	r23, 0x3A	; 58
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <__ftoa_engine+0x180>
    2c76:	70 e3       	ldi	r23, 0x30	; 48
    2c78:	7c 93       	st	X, r23
    2c7a:	20 13       	cpse	r18, r16
    2c7c:	b8 f7       	brcc	.-18     	; 0x2c6c <__ftoa_engine+0x174>
    2c7e:	7e 91       	ld	r23, -X
    2c80:	70 61       	ori	r23, 0x10	; 16
    2c82:	7d 93       	st	X+, r23
    2c84:	30 f0       	brcs	.+12     	; 0x2c92 <__ftoa_engine+0x19a>
    2c86:	83 95       	inc	r24
    2c88:	71 e3       	ldi	r23, 0x31	; 49
    2c8a:	7d 93       	st	X+, r23
    2c8c:	70 e3       	ldi	r23, 0x30	; 48
    2c8e:	2a 95       	dec	r18
    2c90:	e1 f7       	brne	.-8      	; 0x2c8a <__ftoa_engine+0x192>
    2c92:	11 24       	eor	r1, r1
    2c94:	ef 90       	pop	r14
    2c96:	ff 90       	pop	r15
    2c98:	0f 91       	pop	r16
    2c9a:	1f 91       	pop	r17
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	99 27       	eor	r25, r25
    2ca2:	87 fd       	sbrc	r24, 7
    2ca4:	90 95       	com	r25
    2ca6:	08 95       	ret

00002ca8 <strnlen_P>:
    2ca8:	fc 01       	movw	r30, r24
    2caa:	05 90       	lpm	r0, Z+
    2cac:	61 50       	subi	r22, 0x01	; 1
    2cae:	70 40       	sbci	r23, 0x00	; 0
    2cb0:	01 10       	cpse	r0, r1
    2cb2:	d8 f7       	brcc	.-10     	; 0x2caa <strnlen_P+0x2>
    2cb4:	80 95       	com	r24
    2cb6:	90 95       	com	r25
    2cb8:	8e 0f       	add	r24, r30
    2cba:	9f 1f       	adc	r25, r31
    2cbc:	08 95       	ret

00002cbe <strnlen>:
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	61 50       	subi	r22, 0x01	; 1
    2cc2:	70 40       	sbci	r23, 0x00	; 0
    2cc4:	01 90       	ld	r0, Z+
    2cc6:	01 10       	cpse	r0, r1
    2cc8:	d8 f7       	brcc	.-10     	; 0x2cc0 <strnlen+0x2>
    2cca:	80 95       	com	r24
    2ccc:	90 95       	com	r25
    2cce:	8e 0f       	add	r24, r30
    2cd0:	9f 1f       	adc	r25, r31
    2cd2:	08 95       	ret

00002cd4 <fdevopen>:
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	8b 01       	movw	r16, r22
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	31 f4       	brne	.+12     	; 0x2cf0 <fdevopen+0x1c>
    2ce4:	61 15       	cp	r22, r1
    2ce6:	71 05       	cpc	r23, r1
    2ce8:	19 f4       	brne	.+6      	; 0x2cf0 <fdevopen+0x1c>
    2cea:	e0 e0       	ldi	r30, 0x00	; 0
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	36 c0       	rjmp	.+108    	; 0x2d5c <fdevopen+0x88>
    2cf0:	6e e0       	ldi	r22, 0x0E	; 14
    2cf2:	70 e0       	ldi	r23, 0x00	; 0
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	01 d1       	rcall	.+514    	; 0x2efc <calloc>
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	a9 f3       	breq	.-22     	; 0x2cea <fdevopen+0x16>
    2d00:	80 e8       	ldi	r24, 0x80	; 128
    2d02:	83 83       	std	Z+3, r24	; 0x03
    2d04:	01 15       	cp	r16, r1
    2d06:	11 05       	cpc	r17, r1
    2d08:	71 f0       	breq	.+28     	; 0x2d26 <fdevopen+0x52>
    2d0a:	02 87       	std	Z+10, r16	; 0x0a
    2d0c:	13 87       	std	Z+11, r17	; 0x0b
    2d0e:	81 e8       	ldi	r24, 0x81	; 129
    2d10:	83 83       	std	Z+3, r24	; 0x03
    2d12:	80 91 20 21 	lds	r24, 0x2120
    2d16:	90 91 21 21 	lds	r25, 0x2121
    2d1a:	89 2b       	or	r24, r25
    2d1c:	21 f4       	brne	.+8      	; 0x2d26 <fdevopen+0x52>
    2d1e:	e0 93 20 21 	sts	0x2120, r30
    2d22:	f0 93 21 21 	sts	0x2121, r31
    2d26:	20 97       	sbiw	r28, 0x00	; 0
    2d28:	c9 f0       	breq	.+50     	; 0x2d5c <fdevopen+0x88>
    2d2a:	c0 87       	std	Z+8, r28	; 0x08
    2d2c:	d1 87       	std	Z+9, r29	; 0x09
    2d2e:	83 81       	ldd	r24, Z+3	; 0x03
    2d30:	82 60       	ori	r24, 0x02	; 2
    2d32:	83 83       	std	Z+3, r24	; 0x03
    2d34:	80 91 22 21 	lds	r24, 0x2122
    2d38:	90 91 23 21 	lds	r25, 0x2123
    2d3c:	89 2b       	or	r24, r25
    2d3e:	71 f4       	brne	.+28     	; 0x2d5c <fdevopen+0x88>
    2d40:	e0 93 22 21 	sts	0x2122, r30
    2d44:	f0 93 23 21 	sts	0x2123, r31
    2d48:	80 91 24 21 	lds	r24, 0x2124
    2d4c:	90 91 25 21 	lds	r25, 0x2125
    2d50:	89 2b       	or	r24, r25
    2d52:	21 f4       	brne	.+8      	; 0x2d5c <fdevopen+0x88>
    2d54:	e0 93 24 21 	sts	0x2124, r30
    2d58:	f0 93 25 21 	sts	0x2125, r31
    2d5c:	cf 01       	movw	r24, r30
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	08 95       	ret

00002d68 <fputc>:
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	8c 01       	movw	r16, r24
    2d72:	eb 01       	movw	r28, r22
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	81 fd       	sbrc	r24, 1
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <fputc+0x18>
    2d7a:	0f ef       	ldi	r16, 0xFF	; 255
    2d7c:	1f ef       	ldi	r17, 0xFF	; 255
    2d7e:	1a c0       	rjmp	.+52     	; 0x2db4 <fputc+0x4c>
    2d80:	82 ff       	sbrs	r24, 2
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <fputc+0x36>
    2d84:	2e 81       	ldd	r18, Y+6	; 0x06
    2d86:	3f 81       	ldd	r19, Y+7	; 0x07
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	28 17       	cp	r18, r24
    2d8e:	39 07       	cpc	r19, r25
    2d90:	64 f4       	brge	.+24     	; 0x2daa <fputc+0x42>
    2d92:	e8 81       	ld	r30, Y
    2d94:	f9 81       	ldd	r31, Y+1	; 0x01
    2d96:	01 93       	st	Z+, r16
    2d98:	e8 83       	st	Y, r30
    2d9a:	f9 83       	std	Y+1, r31	; 0x01
    2d9c:	06 c0       	rjmp	.+12     	; 0x2daa <fputc+0x42>
    2d9e:	e8 85       	ldd	r30, Y+8	; 0x08
    2da0:	f9 85       	ldd	r31, Y+9	; 0x09
    2da2:	80 2f       	mov	r24, r16
    2da4:	19 95       	eicall
    2da6:	89 2b       	or	r24, r25
    2da8:	41 f7       	brne	.-48     	; 0x2d7a <fputc+0x12>
    2daa:	8e 81       	ldd	r24, Y+6	; 0x06
    2dac:	9f 81       	ldd	r25, Y+7	; 0x07
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	8e 83       	std	Y+6, r24	; 0x06
    2db2:	9f 83       	std	Y+7, r25	; 0x07
    2db4:	c8 01       	movw	r24, r16
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	08 95       	ret

00002dc0 <printf>:
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	fe 01       	movw	r30, r28
    2dca:	36 96       	adiw	r30, 0x06	; 6
    2dcc:	61 91       	ld	r22, Z+
    2dce:	71 91       	ld	r23, Z+
    2dd0:	af 01       	movw	r20, r30
    2dd2:	80 91 22 21 	lds	r24, 0x2122
    2dd6:	90 91 23 21 	lds	r25, 0x2123
    2dda:	4d da       	rcall	.-2918   	; 0x2276 <vfprintf>
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	08 95       	ret

00002de2 <puts>:
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	8c 01       	movw	r16, r24
    2dec:	e0 91 22 21 	lds	r30, 0x2122
    2df0:	f0 91 23 21 	lds	r31, 0x2123
    2df4:	83 81       	ldd	r24, Z+3	; 0x03
    2df6:	81 ff       	sbrs	r24, 1
    2df8:	1b c0       	rjmp	.+54     	; 0x2e30 <puts+0x4e>
    2dfa:	c0 e0       	ldi	r28, 0x00	; 0
    2dfc:	d0 e0       	ldi	r29, 0x00	; 0
    2dfe:	05 c0       	rjmp	.+10     	; 0x2e0a <puts+0x28>
    2e00:	19 95       	eicall
    2e02:	89 2b       	or	r24, r25
    2e04:	11 f0       	breq	.+4      	; 0x2e0a <puts+0x28>
    2e06:	cf ef       	ldi	r28, 0xFF	; 255
    2e08:	df ef       	ldi	r29, 0xFF	; 255
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	81 91       	ld	r24, Z+
    2e0e:	8f 01       	movw	r16, r30
    2e10:	60 91 22 21 	lds	r22, 0x2122
    2e14:	70 91 23 21 	lds	r23, 0x2123
    2e18:	db 01       	movw	r26, r22
    2e1a:	18 96       	adiw	r26, 0x08	; 8
    2e1c:	ed 91       	ld	r30, X+
    2e1e:	fc 91       	ld	r31, X
    2e20:	19 97       	sbiw	r26, 0x09	; 9
    2e22:	81 11       	cpse	r24, r1
    2e24:	ed cf       	rjmp	.-38     	; 0x2e00 <puts+0x1e>
    2e26:	8a e0       	ldi	r24, 0x0A	; 10
    2e28:	19 95       	eicall
    2e2a:	89 2b       	or	r24, r25
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <puts+0x4e>
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <puts+0x52>
    2e30:	cf ef       	ldi	r28, 0xFF	; 255
    2e32:	df ef       	ldi	r29, 0xFF	; 255
    2e34:	ce 01       	movw	r24, r28
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	08 95       	ret

00002e40 <__ultoa_invert>:
    2e40:	fa 01       	movw	r30, r20
    2e42:	aa 27       	eor	r26, r26
    2e44:	28 30       	cpi	r18, 0x08	; 8
    2e46:	51 f1       	breq	.+84     	; 0x2e9c <__ultoa_invert+0x5c>
    2e48:	20 31       	cpi	r18, 0x10	; 16
    2e4a:	81 f1       	breq	.+96     	; 0x2eac <__ultoa_invert+0x6c>
    2e4c:	e8 94       	clt
    2e4e:	6f 93       	push	r22
    2e50:	6e 7f       	andi	r22, 0xFE	; 254
    2e52:	6e 5f       	subi	r22, 0xFE	; 254
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255
    2e56:	8f 4f       	sbci	r24, 0xFF	; 255
    2e58:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5a:	af 4f       	sbci	r26, 0xFF	; 255
    2e5c:	b1 e0       	ldi	r27, 0x01	; 1
    2e5e:	3e d0       	rcall	.+124    	; 0x2edc <__ultoa_invert+0x9c>
    2e60:	b4 e0       	ldi	r27, 0x04	; 4
    2e62:	3c d0       	rcall	.+120    	; 0x2edc <__ultoa_invert+0x9c>
    2e64:	67 0f       	add	r22, r23
    2e66:	78 1f       	adc	r23, r24
    2e68:	89 1f       	adc	r24, r25
    2e6a:	9a 1f       	adc	r25, r26
    2e6c:	a1 1d       	adc	r26, r1
    2e6e:	68 0f       	add	r22, r24
    2e70:	79 1f       	adc	r23, r25
    2e72:	8a 1f       	adc	r24, r26
    2e74:	91 1d       	adc	r25, r1
    2e76:	a1 1d       	adc	r26, r1
    2e78:	6a 0f       	add	r22, r26
    2e7a:	71 1d       	adc	r23, r1
    2e7c:	81 1d       	adc	r24, r1
    2e7e:	91 1d       	adc	r25, r1
    2e80:	a1 1d       	adc	r26, r1
    2e82:	20 d0       	rcall	.+64     	; 0x2ec4 <__ultoa_invert+0x84>
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <__ultoa_invert+0x48>
    2e86:	68 94       	set
    2e88:	3f 91       	pop	r19
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	26 9f       	mul	r18, r22
    2e8e:	11 24       	eor	r1, r1
    2e90:	30 19       	sub	r19, r0
    2e92:	30 5d       	subi	r19, 0xD0	; 208
    2e94:	31 93       	st	Z+, r19
    2e96:	de f6       	brtc	.-74     	; 0x2e4e <__ultoa_invert+0xe>
    2e98:	cf 01       	movw	r24, r30
    2e9a:	08 95       	ret
    2e9c:	46 2f       	mov	r20, r22
    2e9e:	47 70       	andi	r20, 0x07	; 7
    2ea0:	40 5d       	subi	r20, 0xD0	; 208
    2ea2:	41 93       	st	Z+, r20
    2ea4:	b3 e0       	ldi	r27, 0x03	; 3
    2ea6:	0f d0       	rcall	.+30     	; 0x2ec6 <__ultoa_invert+0x86>
    2ea8:	c9 f7       	brne	.-14     	; 0x2e9c <__ultoa_invert+0x5c>
    2eaa:	f6 cf       	rjmp	.-20     	; 0x2e98 <__ultoa_invert+0x58>
    2eac:	46 2f       	mov	r20, r22
    2eae:	4f 70       	andi	r20, 0x0F	; 15
    2eb0:	40 5d       	subi	r20, 0xD0	; 208
    2eb2:	4a 33       	cpi	r20, 0x3A	; 58
    2eb4:	18 f0       	brcs	.+6      	; 0x2ebc <__ultoa_invert+0x7c>
    2eb6:	49 5d       	subi	r20, 0xD9	; 217
    2eb8:	31 fd       	sbrc	r19, 1
    2eba:	40 52       	subi	r20, 0x20	; 32
    2ebc:	41 93       	st	Z+, r20
    2ebe:	02 d0       	rcall	.+4      	; 0x2ec4 <__ultoa_invert+0x84>
    2ec0:	a9 f7       	brne	.-22     	; 0x2eac <__ultoa_invert+0x6c>
    2ec2:	ea cf       	rjmp	.-44     	; 0x2e98 <__ultoa_invert+0x58>
    2ec4:	b4 e0       	ldi	r27, 0x04	; 4
    2ec6:	a6 95       	lsr	r26
    2ec8:	97 95       	ror	r25
    2eca:	87 95       	ror	r24
    2ecc:	77 95       	ror	r23
    2ece:	67 95       	ror	r22
    2ed0:	ba 95       	dec	r27
    2ed2:	c9 f7       	brne	.-14     	; 0x2ec6 <__ultoa_invert+0x86>
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	61 05       	cpc	r22, r1
    2ed8:	71 05       	cpc	r23, r1
    2eda:	08 95       	ret
    2edc:	9b 01       	movw	r18, r22
    2ede:	ac 01       	movw	r20, r24
    2ee0:	0a 2e       	mov	r0, r26
    2ee2:	06 94       	lsr	r0
    2ee4:	57 95       	ror	r21
    2ee6:	47 95       	ror	r20
    2ee8:	37 95       	ror	r19
    2eea:	27 95       	ror	r18
    2eec:	ba 95       	dec	r27
    2eee:	c9 f7       	brne	.-14     	; 0x2ee2 <__ultoa_invert+0xa2>
    2ef0:	62 0f       	add	r22, r18
    2ef2:	73 1f       	adc	r23, r19
    2ef4:	84 1f       	adc	r24, r20
    2ef6:	95 1f       	adc	r25, r21
    2ef8:	a0 1d       	adc	r26, r0
    2efa:	08 95       	ret

00002efc <calloc>:
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	68 9f       	mul	r22, r24
    2f06:	80 01       	movw	r16, r0
    2f08:	69 9f       	mul	r22, r25
    2f0a:	10 0d       	add	r17, r0
    2f0c:	78 9f       	mul	r23, r24
    2f0e:	10 0d       	add	r17, r0
    2f10:	11 24       	eor	r1, r1
    2f12:	c8 01       	movw	r24, r16
    2f14:	0f d0       	rcall	.+30     	; 0x2f34 <malloc>
    2f16:	c8 2f       	mov	r28, r24
    2f18:	d9 2f       	mov	r29, r25
    2f1a:	20 97       	sbiw	r28, 0x00	; 0
    2f1c:	29 f0       	breq	.+10     	; 0x2f28 <calloc+0x2c>
    2f1e:	a8 01       	movw	r20, r16
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	8c 2f       	mov	r24, r28
    2f26:	40 d1       	rcall	.+640    	; 0x31a8 <memset>
    2f28:	ce 01       	movw	r24, r28
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	1f 91       	pop	r17
    2f30:	0f 91       	pop	r16
    2f32:	08 95       	ret

00002f34 <malloc>:
    2f34:	0f 93       	push	r16
    2f36:	1f 93       	push	r17
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	91 05       	cpc	r25, r1
    2f40:	10 f4       	brcc	.+4      	; 0x2f46 <malloc+0x12>
    2f42:	82 e0       	ldi	r24, 0x02	; 2
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	e0 91 28 21 	lds	r30, 0x2128
    2f4a:	f0 91 29 21 	lds	r31, 0x2129
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	c0 e0       	ldi	r28, 0x00	; 0
    2f54:	d0 e0       	ldi	r29, 0x00	; 0
    2f56:	23 c0       	rjmp	.+70     	; 0x2f9e <malloc+0x6a>
    2f58:	40 81       	ld	r20, Z
    2f5a:	51 81       	ldd	r21, Z+1	; 0x01
    2f5c:	48 17       	cp	r20, r24
    2f5e:	59 07       	cpc	r21, r25
    2f60:	a8 f0       	brcs	.+42     	; 0x2f8c <malloc+0x58>
    2f62:	48 17       	cp	r20, r24
    2f64:	59 07       	cpc	r21, r25
    2f66:	61 f4       	brne	.+24     	; 0x2f80 <malloc+0x4c>
    2f68:	82 81       	ldd	r24, Z+2	; 0x02
    2f6a:	93 81       	ldd	r25, Z+3	; 0x03
    2f6c:	20 97       	sbiw	r28, 0x00	; 0
    2f6e:	19 f0       	breq	.+6      	; 0x2f76 <malloc+0x42>
    2f70:	8a 83       	std	Y+2, r24	; 0x02
    2f72:	9b 83       	std	Y+3, r25	; 0x03
    2f74:	2e c0       	rjmp	.+92     	; 0x2fd2 <malloc+0x9e>
    2f76:	80 93 28 21 	sts	0x2128, r24
    2f7a:	90 93 29 21 	sts	0x2129, r25
    2f7e:	29 c0       	rjmp	.+82     	; 0x2fd2 <malloc+0x9e>
    2f80:	21 15       	cp	r18, r1
    2f82:	31 05       	cpc	r19, r1
    2f84:	29 f0       	breq	.+10     	; 0x2f90 <malloc+0x5c>
    2f86:	42 17       	cp	r20, r18
    2f88:	53 07       	cpc	r21, r19
    2f8a:	10 f0       	brcs	.+4      	; 0x2f90 <malloc+0x5c>
    2f8c:	a9 01       	movw	r20, r18
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <malloc+0x60>
    2f90:	be 01       	movw	r22, r28
    2f92:	df 01       	movw	r26, r30
    2f94:	02 81       	ldd	r16, Z+2	; 0x02
    2f96:	13 81       	ldd	r17, Z+3	; 0x03
    2f98:	ef 01       	movw	r28, r30
    2f9a:	9a 01       	movw	r18, r20
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	30 97       	sbiw	r30, 0x00	; 0
    2fa0:	d9 f6       	brne	.-74     	; 0x2f58 <malloc+0x24>
    2fa2:	21 15       	cp	r18, r1
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	09 f1       	breq	.+66     	; 0x2fea <malloc+0xb6>
    2fa8:	28 1b       	sub	r18, r24
    2faa:	39 0b       	sbc	r19, r25
    2fac:	24 30       	cpi	r18, 0x04	; 4
    2fae:	31 05       	cpc	r19, r1
    2fb0:	90 f4       	brcc	.+36     	; 0x2fd6 <malloc+0xa2>
    2fb2:	12 96       	adiw	r26, 0x02	; 2
    2fb4:	8d 91       	ld	r24, X+
    2fb6:	9c 91       	ld	r25, X
    2fb8:	13 97       	sbiw	r26, 0x03	; 3
    2fba:	61 15       	cp	r22, r1
    2fbc:	71 05       	cpc	r23, r1
    2fbe:	21 f0       	breq	.+8      	; 0x2fc8 <malloc+0x94>
    2fc0:	fb 01       	movw	r30, r22
    2fc2:	82 83       	std	Z+2, r24	; 0x02
    2fc4:	93 83       	std	Z+3, r25	; 0x03
    2fc6:	04 c0       	rjmp	.+8      	; 0x2fd0 <malloc+0x9c>
    2fc8:	80 93 28 21 	sts	0x2128, r24
    2fcc:	90 93 29 21 	sts	0x2129, r25
    2fd0:	fd 01       	movw	r30, r26
    2fd2:	32 96       	adiw	r30, 0x02	; 2
    2fd4:	44 c0       	rjmp	.+136    	; 0x305e <malloc+0x12a>
    2fd6:	fd 01       	movw	r30, r26
    2fd8:	e2 0f       	add	r30, r18
    2fda:	f3 1f       	adc	r31, r19
    2fdc:	81 93       	st	Z+, r24
    2fde:	91 93       	st	Z+, r25
    2fe0:	22 50       	subi	r18, 0x02	; 2
    2fe2:	31 09       	sbc	r19, r1
    2fe4:	2d 93       	st	X+, r18
    2fe6:	3c 93       	st	X, r19
    2fe8:	3a c0       	rjmp	.+116    	; 0x305e <malloc+0x12a>
    2fea:	20 91 26 21 	lds	r18, 0x2126
    2fee:	30 91 27 21 	lds	r19, 0x2127
    2ff2:	23 2b       	or	r18, r19
    2ff4:	41 f4       	brne	.+16     	; 0x3006 <malloc+0xd2>
    2ff6:	20 91 02 20 	lds	r18, 0x2002
    2ffa:	30 91 03 20 	lds	r19, 0x2003
    2ffe:	20 93 26 21 	sts	0x2126, r18
    3002:	30 93 27 21 	sts	0x2127, r19
    3006:	20 91 00 20 	lds	r18, 0x2000
    300a:	30 91 01 20 	lds	r19, 0x2001
    300e:	21 15       	cp	r18, r1
    3010:	31 05       	cpc	r19, r1
    3012:	41 f4       	brne	.+16     	; 0x3024 <malloc+0xf0>
    3014:	2d b7       	in	r18, 0x3d	; 61
    3016:	3e b7       	in	r19, 0x3e	; 62
    3018:	40 91 04 20 	lds	r20, 0x2004
    301c:	50 91 05 20 	lds	r21, 0x2005
    3020:	24 1b       	sub	r18, r20
    3022:	35 0b       	sbc	r19, r21
    3024:	e0 91 26 21 	lds	r30, 0x2126
    3028:	f0 91 27 21 	lds	r31, 0x2127
    302c:	e2 17       	cp	r30, r18
    302e:	f3 07       	cpc	r31, r19
    3030:	a0 f4       	brcc	.+40     	; 0x305a <malloc+0x126>
    3032:	2e 1b       	sub	r18, r30
    3034:	3f 0b       	sbc	r19, r31
    3036:	28 17       	cp	r18, r24
    3038:	39 07       	cpc	r19, r25
    303a:	78 f0       	brcs	.+30     	; 0x305a <malloc+0x126>
    303c:	ac 01       	movw	r20, r24
    303e:	4e 5f       	subi	r20, 0xFE	; 254
    3040:	5f 4f       	sbci	r21, 0xFF	; 255
    3042:	24 17       	cp	r18, r20
    3044:	35 07       	cpc	r19, r21
    3046:	48 f0       	brcs	.+18     	; 0x305a <malloc+0x126>
    3048:	4e 0f       	add	r20, r30
    304a:	5f 1f       	adc	r21, r31
    304c:	40 93 26 21 	sts	0x2126, r20
    3050:	50 93 27 21 	sts	0x2127, r21
    3054:	81 93       	st	Z+, r24
    3056:	91 93       	st	Z+, r25
    3058:	02 c0       	rjmp	.+4      	; 0x305e <malloc+0x12a>
    305a:	e0 e0       	ldi	r30, 0x00	; 0
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	cf 01       	movw	r24, r30
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	08 95       	ret

0000306a <free>:
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	09 f4       	brne	.+2      	; 0x307c <free+0x12>
    307a:	8f c0       	rjmp	.+286    	; 0x319a <free+0x130>
    307c:	dc 01       	movw	r26, r24
    307e:	12 97       	sbiw	r26, 0x02	; 2
    3080:	12 96       	adiw	r26, 0x02	; 2
    3082:	1d 92       	st	X+, r1
    3084:	1c 92       	st	X, r1
    3086:	13 97       	sbiw	r26, 0x03	; 3
    3088:	e0 90 28 21 	lds	r14, 0x2128
    308c:	f0 90 29 21 	lds	r15, 0x2129
    3090:	e1 14       	cp	r14, r1
    3092:	f1 04       	cpc	r15, r1
    3094:	89 f4       	brne	.+34     	; 0x30b8 <free+0x4e>
    3096:	2d 91       	ld	r18, X+
    3098:	3c 91       	ld	r19, X
    309a:	11 97       	sbiw	r26, 0x01	; 1
    309c:	28 0f       	add	r18, r24
    309e:	39 1f       	adc	r19, r25
    30a0:	80 91 26 21 	lds	r24, 0x2126
    30a4:	90 91 27 21 	lds	r25, 0x2127
    30a8:	82 17       	cp	r24, r18
    30aa:	93 07       	cpc	r25, r19
    30ac:	89 f5       	brne	.+98     	; 0x3110 <free+0xa6>
    30ae:	a0 93 26 21 	sts	0x2126, r26
    30b2:	b0 93 27 21 	sts	0x2127, r27
    30b6:	71 c0       	rjmp	.+226    	; 0x319a <free+0x130>
    30b8:	e7 01       	movw	r28, r14
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <free+0x58>
    30c0:	ea 01       	movw	r28, r20
    30c2:	ca 17       	cp	r28, r26
    30c4:	db 07       	cpc	r29, r27
    30c6:	38 f4       	brcc	.+14     	; 0x30d6 <free+0x6c>
    30c8:	4a 81       	ldd	r20, Y+2	; 0x02
    30ca:	5b 81       	ldd	r21, Y+3	; 0x03
    30cc:	9e 01       	movw	r18, r28
    30ce:	41 15       	cp	r20, r1
    30d0:	51 05       	cpc	r21, r1
    30d2:	b1 f7       	brne	.-20     	; 0x30c0 <free+0x56>
    30d4:	22 c0       	rjmp	.+68     	; 0x311a <free+0xb0>
    30d6:	bc 01       	movw	r22, r24
    30d8:	62 50       	subi	r22, 0x02	; 2
    30da:	71 09       	sbc	r23, r1
    30dc:	fb 01       	movw	r30, r22
    30de:	c2 83       	std	Z+2, r28	; 0x02
    30e0:	d3 83       	std	Z+3, r29	; 0x03
    30e2:	00 81       	ld	r16, Z
    30e4:	11 81       	ldd	r17, Z+1	; 0x01
    30e6:	ac 01       	movw	r20, r24
    30e8:	40 0f       	add	r20, r16
    30ea:	51 1f       	adc	r21, r17
    30ec:	4c 17       	cp	r20, r28
    30ee:	5d 07       	cpc	r21, r29
    30f0:	61 f4       	brne	.+24     	; 0x310a <free+0xa0>
    30f2:	48 81       	ld	r20, Y
    30f4:	59 81       	ldd	r21, Y+1	; 0x01
    30f6:	40 0f       	add	r20, r16
    30f8:	51 1f       	adc	r21, r17
    30fa:	4e 5f       	subi	r20, 0xFE	; 254
    30fc:	5f 4f       	sbci	r21, 0xFF	; 255
    30fe:	40 83       	st	Z, r20
    3100:	51 83       	std	Z+1, r21	; 0x01
    3102:	4a 81       	ldd	r20, Y+2	; 0x02
    3104:	5b 81       	ldd	r21, Y+3	; 0x03
    3106:	42 83       	std	Z+2, r20	; 0x02
    3108:	53 83       	std	Z+3, r21	; 0x03
    310a:	21 15       	cp	r18, r1
    310c:	31 05       	cpc	r19, r1
    310e:	29 f4       	brne	.+10     	; 0x311a <free+0xb0>
    3110:	a0 93 28 21 	sts	0x2128, r26
    3114:	b0 93 29 21 	sts	0x2129, r27
    3118:	40 c0       	rjmp	.+128    	; 0x319a <free+0x130>
    311a:	f9 01       	movw	r30, r18
    311c:	a2 83       	std	Z+2, r26	; 0x02
    311e:	b3 83       	std	Z+3, r27	; 0x03
    3120:	e9 01       	movw	r28, r18
    3122:	69 91       	ld	r22, Y+
    3124:	79 91       	ld	r23, Y+
    3126:	c6 0f       	add	r28, r22
    3128:	d7 1f       	adc	r29, r23
    312a:	ac 17       	cp	r26, r28
    312c:	bd 07       	cpc	r27, r29
    312e:	79 f4       	brne	.+30     	; 0x314e <free+0xe4>
    3130:	dc 01       	movw	r26, r24
    3132:	5e 91       	ld	r21, -X
    3134:	4e 91       	ld	r20, -X
    3136:	46 0f       	add	r20, r22
    3138:	57 1f       	adc	r21, r23
    313a:	4e 5f       	subi	r20, 0xFE	; 254
    313c:	5f 4f       	sbci	r21, 0xFF	; 255
    313e:	40 83       	st	Z, r20
    3140:	51 83       	std	Z+1, r21	; 0x01
    3142:	12 96       	adiw	r26, 0x02	; 2
    3144:	8d 91       	ld	r24, X+
    3146:	9c 91       	ld	r25, X
    3148:	13 97       	sbiw	r26, 0x03	; 3
    314a:	82 83       	std	Z+2, r24	; 0x02
    314c:	93 83       	std	Z+3, r25	; 0x03
    314e:	a0 e0       	ldi	r26, 0x00	; 0
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <free+0xee>
    3154:	d7 01       	movw	r26, r14
    3156:	7c 01       	movw	r14, r24
    3158:	f7 01       	movw	r30, r14
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	c9 f7       	brne	.-14     	; 0x3154 <free+0xea>
    3162:	c7 01       	movw	r24, r14
    3164:	02 96       	adiw	r24, 0x02	; 2
    3166:	20 81       	ld	r18, Z
    3168:	31 81       	ldd	r19, Z+1	; 0x01
    316a:	82 0f       	add	r24, r18
    316c:	93 1f       	adc	r25, r19
    316e:	20 91 26 21 	lds	r18, 0x2126
    3172:	30 91 27 21 	lds	r19, 0x2127
    3176:	28 17       	cp	r18, r24
    3178:	39 07       	cpc	r19, r25
    317a:	79 f4       	brne	.+30     	; 0x319a <free+0x130>
    317c:	10 97       	sbiw	r26, 0x00	; 0
    317e:	29 f4       	brne	.+10     	; 0x318a <free+0x120>
    3180:	10 92 28 21 	sts	0x2128, r1
    3184:	10 92 29 21 	sts	0x2129, r1
    3188:	04 c0       	rjmp	.+8      	; 0x3192 <free+0x128>
    318a:	12 96       	adiw	r26, 0x02	; 2
    318c:	1d 92       	st	X+, r1
    318e:	1c 92       	st	X, r1
    3190:	13 97       	sbiw	r26, 0x03	; 3
    3192:	e0 92 26 21 	sts	0x2126, r14
    3196:	f0 92 27 21 	sts	0x2127, r15
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	08 95       	ret

000031a8 <memset>:
    31a8:	dc 01       	movw	r26, r24
    31aa:	01 c0       	rjmp	.+2      	; 0x31ae <memset+0x6>
    31ac:	6d 93       	st	X+, r22
    31ae:	41 50       	subi	r20, 0x01	; 1
    31b0:	50 40       	sbci	r21, 0x00	; 0
    31b2:	e0 f7       	brcc	.-8      	; 0x31ac <memset+0x4>
    31b4:	08 95       	ret

000031b6 <_exit>:
    31b6:	f8 94       	cli

000031b8 <__stop_program>:
    31b8:	ff cf       	rjmp	.-2      	; 0x31b8 <__stop_program>
