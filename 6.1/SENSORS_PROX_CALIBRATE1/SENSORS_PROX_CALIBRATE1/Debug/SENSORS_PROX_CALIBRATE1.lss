
SENSORS_PROX_CALIBRATE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000044  00020000  00020000  000039fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000370e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         0000023c  00802000  0000370e  000037c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000002f  0080223c  0080223c  00003a42  2**0
                  ALLOC
  4 .stab         00004dc4  00000000  00000000  00003a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000133d  00000000  00000000  00008808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00009b45  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a68  00000000  00000000  00009b78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002fac8  00000000  00000000  0000a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006d80  00000000  00000000  0003a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00019882  00000000  00000000  00040e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000289c  00000000  00000000  0005a6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00033a6b  00000000  00000000  0005cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00018da0  00000000  00000000  000909b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bb8  00000000  00000000  000a9758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000112d8  00000000  00000000  000aa310  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20000:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20002:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20004:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20006:	80 91 ca 01 	lds	r24, 0x01CA
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2000a:	40 93 ca 01 	sts	0x01CA, r20
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   2000e:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20010:	70 93 34 00 	sts	0x0034, r23
	spm                   ; Self-program.
   20014:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   20016:	80 93 ca 01 	sts	0x01CA, r24
	out RAMPZ, r25        ; Restore RAMPZ register.
   2001a:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   2001c:	08 95       	ret

0002001e <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   2001e:	20 91 cf 01 	lds	r18, 0x01CF
	sbrc r18, NVM_NVMBUSY_bp
   20022:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20024:	fc cf       	rjmp	.-8      	; 0x2001e <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20026:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20028:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2002a:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2002c:	80 91 ca 01 	lds	r24, 0x01CA
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20030:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20032:	20 93 ca 01 	sts	0x01CA, r18

	movw r0, r20          ; Load R20:R21 into R0:R1
   20036:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   20038:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2003a:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   2003c:	80 93 ca 01 	sts	0x01CA, r24
	out RAMPZ, r25        ; Restore RAMPZ register.
   20040:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20042:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c1       	rjmp	.+756    	; 0x2f6 <__ctors_end>
       2:	00 00       	nop
       4:	9e c1       	rjmp	.+828    	; 0x342 <__bad_interrupt>
       6:	00 00       	nop
       8:	9c c1       	rjmp	.+824    	; 0x342 <__bad_interrupt>
       a:	00 00       	nop
       c:	9a c1       	rjmp	.+820    	; 0x342 <__bad_interrupt>
       e:	00 00       	nop
      10:	98 c1       	rjmp	.+816    	; 0x342 <__bad_interrupt>
      12:	00 00       	nop
      14:	96 c1       	rjmp	.+812    	; 0x342 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c1       	rjmp	.+808    	; 0x342 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	92 c1       	rjmp	.+804    	; 0x342 <__bad_interrupt>
      1e:	00 00       	nop
      20:	90 c1       	rjmp	.+800    	; 0x342 <__bad_interrupt>
      22:	00 00       	nop
      24:	8e c1       	rjmp	.+796    	; 0x342 <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c1       	rjmp	.+792    	; 0x342 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8a c1       	rjmp	.+788    	; 0x342 <__bad_interrupt>
      2e:	00 00       	nop
      30:	88 c1       	rjmp	.+784    	; 0x342 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_13>
      38:	84 c1       	rjmp	.+776    	; 0x342 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	82 c1       	rjmp	.+772    	; 0x342 <__bad_interrupt>
      3e:	00 00       	nop
      40:	80 c1       	rjmp	.+768    	; 0x342 <__bad_interrupt>
      42:	00 00       	nop
      44:	7e c1       	rjmp	.+764    	; 0x342 <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c1       	rjmp	.+760    	; 0x342 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c1       	rjmp	.+756    	; 0x342 <__bad_interrupt>
      4e:	00 00       	nop
      50:	78 c1       	rjmp	.+752    	; 0x342 <__bad_interrupt>
      52:	00 00       	nop
      54:	76 c1       	rjmp	.+748    	; 0x342 <__bad_interrupt>
      56:	00 00       	nop
      58:	74 c1       	rjmp	.+744    	; 0x342 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	72 c1       	rjmp	.+740    	; 0x342 <__bad_interrupt>
      5e:	00 00       	nop
      60:	70 c1       	rjmp	.+736    	; 0x342 <__bad_interrupt>
      62:	00 00       	nop
      64:	6e c1       	rjmp	.+732    	; 0x342 <__bad_interrupt>
      66:	00 00       	nop
      68:	6c c1       	rjmp	.+728    	; 0x342 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6a c1       	rjmp	.+724    	; 0x342 <__bad_interrupt>
      6e:	00 00       	nop
      70:	68 c1       	rjmp	.+720    	; 0x342 <__bad_interrupt>
      72:	00 00       	nop
      74:	66 c1       	rjmp	.+716    	; 0x342 <__bad_interrupt>
      76:	00 00       	nop
      78:	64 c1       	rjmp	.+712    	; 0x342 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	62 c1       	rjmp	.+708    	; 0x342 <__bad_interrupt>
      7e:	00 00       	nop
      80:	60 c1       	rjmp	.+704    	; 0x342 <__bad_interrupt>
      82:	00 00       	nop
      84:	5e c1       	rjmp	.+700    	; 0x342 <__bad_interrupt>
      86:	00 00       	nop
      88:	5c c1       	rjmp	.+696    	; 0x342 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5a c1       	rjmp	.+692    	; 0x342 <__bad_interrupt>
      8e:	00 00       	nop
      90:	58 c1       	rjmp	.+688    	; 0x342 <__bad_interrupt>
      92:	00 00       	nop
      94:	56 c1       	rjmp	.+684    	; 0x342 <__bad_interrupt>
      96:	00 00       	nop
      98:	54 c1       	rjmp	.+680    	; 0x342 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	52 c1       	rjmp	.+676    	; 0x342 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	50 c1       	rjmp	.+672    	; 0x342 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4e c1       	rjmp	.+668    	; 0x342 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4c c1       	rjmp	.+664    	; 0x342 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4a c1       	rjmp	.+660    	; 0x342 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	48 c1       	rjmp	.+656    	; 0x342 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	46 c1       	rjmp	.+652    	; 0x342 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_46>
      bc:	42 c1       	rjmp	.+644    	; 0x342 <__bad_interrupt>
      be:	00 00       	nop
      c0:	40 c1       	rjmp	.+640    	; 0x342 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3e c1       	rjmp	.+636    	; 0x342 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3c c1       	rjmp	.+632    	; 0x342 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3a c1       	rjmp	.+628    	; 0x342 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	38 c1       	rjmp	.+624    	; 0x342 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	36 c1       	rjmp	.+620    	; 0x342 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	34 c1       	rjmp	.+616    	; 0x342 <__bad_interrupt>
      da:	00 00       	nop
      dc:	32 c1       	rjmp	.+612    	; 0x342 <__bad_interrupt>
      de:	00 00       	nop
      e0:	30 c1       	rjmp	.+608    	; 0x342 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2e c1       	rjmp	.+604    	; 0x342 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2c c1       	rjmp	.+600    	; 0x342 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2a c1       	rjmp	.+596    	; 0x342 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	28 c1       	rjmp	.+592    	; 0x342 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	26 c1       	rjmp	.+588    	; 0x342 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	24 c1       	rjmp	.+584    	; 0x342 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	22 c1       	rjmp	.+580    	; 0x342 <__bad_interrupt>
      fe:	00 00       	nop
     100:	20 c1       	rjmp	.+576    	; 0x342 <__bad_interrupt>
     102:	00 00       	nop
     104:	1e c1       	rjmp	.+572    	; 0x342 <__bad_interrupt>
     106:	00 00       	nop
     108:	1c c1       	rjmp	.+568    	; 0x342 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1a c1       	rjmp	.+564    	; 0x342 <__bad_interrupt>
     10e:	00 00       	nop
     110:	18 c1       	rjmp	.+560    	; 0x342 <__bad_interrupt>
     112:	00 00       	nop
     114:	16 c1       	rjmp	.+556    	; 0x342 <__bad_interrupt>
     116:	00 00       	nop
     118:	14 c1       	rjmp	.+552    	; 0x342 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	12 c1       	rjmp	.+548    	; 0x342 <__bad_interrupt>
     11e:	00 00       	nop
     120:	10 c1       	rjmp	.+544    	; 0x342 <__bad_interrupt>
     122:	00 00       	nop
     124:	0e c1       	rjmp	.+540    	; 0x342 <__bad_interrupt>
     126:	00 00       	nop
     128:	0c c1       	rjmp	.+536    	; 0x342 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	0a c1       	rjmp	.+532    	; 0x342 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__vector_76>
     134:	06 c1       	rjmp	.+524    	; 0x342 <__bad_interrupt>
     136:	00 00       	nop
     138:	04 c1       	rjmp	.+520    	; 0x342 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	02 c1       	rjmp	.+516    	; 0x342 <__bad_interrupt>
     13e:	00 00       	nop
     140:	00 c1       	rjmp	.+512    	; 0x342 <__bad_interrupt>
     142:	00 00       	nop
     144:	fe c0       	rjmp	.+508    	; 0x342 <__bad_interrupt>
     146:	00 00       	nop
     148:	fc c0       	rjmp	.+504    	; 0x342 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fa c0       	rjmp	.+500    	; 0x342 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f8 c0       	rjmp	.+496    	; 0x342 <__bad_interrupt>
     152:	00 00       	nop
     154:	f6 c0       	rjmp	.+492    	; 0x342 <__bad_interrupt>
     156:	00 00       	nop
     158:	f4 c0       	rjmp	.+488    	; 0x342 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f2 c0       	rjmp	.+484    	; 0x342 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f0 c0       	rjmp	.+480    	; 0x342 <__bad_interrupt>
     162:	00 00       	nop
     164:	ee c0       	rjmp	.+476    	; 0x342 <__bad_interrupt>
     166:	00 00       	nop
     168:	ec c0       	rjmp	.+472    	; 0x342 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ea c0       	rjmp	.+468    	; 0x342 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e8 c0       	rjmp	.+464    	; 0x342 <__bad_interrupt>
     172:	00 00       	nop
     174:	e6 c0       	rjmp	.+460    	; 0x342 <__bad_interrupt>
     176:	00 00       	nop
     178:	e4 c0       	rjmp	.+456    	; 0x342 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e2 c0       	rjmp	.+452    	; 0x342 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e0 c0       	rjmp	.+448    	; 0x342 <__bad_interrupt>
     182:	00 00       	nop
     184:	de c0       	rjmp	.+444    	; 0x342 <__bad_interrupt>
     186:	00 00       	nop
     188:	dc c0       	rjmp	.+440    	; 0x342 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	da c0       	rjmp	.+436    	; 0x342 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d8 c0       	rjmp	.+432    	; 0x342 <__bad_interrupt>
     192:	00 00       	nop
     194:	d6 c0       	rjmp	.+428    	; 0x342 <__bad_interrupt>
     196:	00 00       	nop
     198:	d4 c0       	rjmp	.+424    	; 0x342 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d2 c0       	rjmp	.+420    	; 0x342 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d1 c0       	rjmp	.+418    	; 0x344 <__vector_104>
     1a2:	00 00       	nop
     1a4:	ce c0       	rjmp	.+412    	; 0x342 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cc c0       	rjmp	.+408    	; 0x342 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_107>
     1b0:	c8 c0       	rjmp	.+400    	; 0x342 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c6 c0       	rjmp	.+396    	; 0x342 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c4 c0       	rjmp	.+392    	; 0x342 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c2 c0       	rjmp	.+388    	; 0x342 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c0 c0       	rjmp	.+384    	; 0x342 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	be c0       	rjmp	.+380    	; 0x342 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bc c0       	rjmp	.+376    	; 0x342 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	ba c0       	rjmp	.+372    	; 0x342 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b8 c0       	rjmp	.+368    	; 0x342 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b6 c0       	rjmp	.+364    	; 0x342 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b4 c0       	rjmp	.+360    	; 0x342 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b2 c0       	rjmp	.+356    	; 0x342 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b0 c0       	rjmp	.+352    	; 0x342 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ae c0       	rjmp	.+348    	; 0x342 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ac c0       	rjmp	.+344    	; 0x342 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	aa c0       	rjmp	.+340    	; 0x342 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a8 c0       	rjmp	.+336    	; 0x342 <__bad_interrupt>
	...

000001f4 <__c.2006>:
     1f4:	6e 61 6e 00                                         nan.

000001f8 <__c.2004>:
     1f8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     208:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     218:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     228:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     238:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     248:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     258:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     268:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     278:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     288:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     298:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2a8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2b8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2c8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2d8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2e8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002f6 <__ctors_end>:
     2f6:	11 24       	eor	r1, r1
     2f8:	1f be       	out	0x3f, r1	; 63
     2fa:	cf ef       	ldi	r28, 0xFF	; 255
     2fc:	df e3       	ldi	r29, 0x3F	; 63
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	cd bf       	out	0x3d, r28	; 61
     302:	00 e0       	ldi	r16, 0x00	; 0
     304:	0c bf       	out	0x3c, r16	; 60
     306:	18 be       	out	0x38, r1	; 56
     308:	19 be       	out	0x39, r1	; 57
     30a:	1a be       	out	0x3a, r1	; 58
     30c:	1b be       	out	0x3b, r1	; 59

0000030e <__do_copy_data>:
     30e:	12 e2       	ldi	r17, 0x22	; 34
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	ee e0       	ldi	r30, 0x0E	; 14
     316:	f7 e3       	ldi	r31, 0x37	; 55
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	ac 33       	cpi	r26, 0x3C	; 60
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>
     328:	1b be       	out	0x3b, r1	; 59

0000032a <__do_clear_bss>:
     32a:	22 e2       	ldi	r18, 0x22	; 34
     32c:	ac e3       	ldi	r26, 0x3C	; 60
     32e:	b2 e2       	ldi	r27, 0x22	; 34
     330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
     332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
     334:	ab 36       	cpi	r26, 0x6B	; 107
     336:	b2 07       	cpc	r27, r18
     338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
     33a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <main>
     33e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <_exit>

00000342 <__bad_interrupt>:
     342:	5e ce       	rjmp	.-836    	; 0x0 <__vectors>

00000344 <__vector_104>:
 * the argument specified when the handler was installed..
 *
 * \return  Nothing.
 */
ISR(SENSOR_BOARD_PORT_vect)
{
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	08 b6       	in	r0, 0x38	; 56
     350:	0f 92       	push	r0
     352:	18 be       	out	0x38, r1	; 56
     354:	09 b6       	in	r0, 0x39	; 57
     356:	0f 92       	push	r0
     358:	19 be       	out	0x39, r1	; 57
     35a:	0b b6       	in	r0, 0x3b	; 59
     35c:	0f 92       	push	r0
     35e:	1b be       	out	0x3b, r1	; 59
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	PORT_t *const port = &(SENSOR_BOARD_PORT);

	/* Call the interrupt handler (if any). */
	if (sensor_pin3_handler && (port->IN & PIN2_bm)) {
     378:	e0 91 3c 22 	lds	r30, 0x223C
     37c:	f0 91 3d 22 	lds	r31, 0x223D
     380:	30 97       	sbiw	r30, 0x00	; 0
     382:	61 f0       	breq	.+24     	; 0x39c <__vector_104+0x58>
     384:	a0 ea       	ldi	r26, 0xA0	; 160
     386:	b6 e0       	ldi	r27, 0x06	; 6
     388:	18 96       	adiw	r26, 0x08	; 8
     38a:	8c 91       	ld	r24, X
     38c:	82 ff       	sbrs	r24, 2
     38e:	06 c0       	rjmp	.+12     	; 0x39c <__vector_104+0x58>
		/* Note: header pin 3 = io port pin 2 */
		sensor_pin3_handler(sensor_pin3_arg);
     390:	80 91 3e 22 	lds	r24, 0x223E
     394:	90 91 3f 22 	lds	r25, 0x223F
     398:	19 95       	eicall
     39a:	23 c0       	rjmp	.+70     	; 0x3e2 <__vector_104+0x9e>
	} else if (sensor_pin4_handler && (port->IN & PIN3_bm)) {
     39c:	e0 91 40 22 	lds	r30, 0x2240
     3a0:	f0 91 41 22 	lds	r31, 0x2241
     3a4:	30 97       	sbiw	r30, 0x00	; 0
     3a6:	61 f0       	breq	.+24     	; 0x3c0 <__vector_104+0x7c>
     3a8:	a0 ea       	ldi	r26, 0xA0	; 160
     3aa:	b6 e0       	ldi	r27, 0x06	; 6
     3ac:	18 96       	adiw	r26, 0x08	; 8
     3ae:	8c 91       	ld	r24, X
     3b0:	83 ff       	sbrs	r24, 3
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__vector_104+0x7c>
		/* Note: header pin 4 = io port pin 3 */
		sensor_pin4_handler(sensor_pin4_arg);
     3b4:	80 91 42 22 	lds	r24, 0x2242
     3b8:	90 91 43 22 	lds	r25, 0x2243
     3bc:	19 95       	eicall
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <__vector_104+0x9e>
	} else if (sensor_pin5_handler && (port->IN & PIN4_bm)) {
     3c0:	e0 91 44 22 	lds	r30, 0x2244
     3c4:	f0 91 45 22 	lds	r31, 0x2245
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	59 f0       	breq	.+22     	; 0x3e2 <__vector_104+0x9e>
     3cc:	a0 ea       	ldi	r26, 0xA0	; 160
     3ce:	b6 e0       	ldi	r27, 0x06	; 6
     3d0:	18 96       	adiw	r26, 0x08	; 8
     3d2:	8c 91       	ld	r24, X
     3d4:	84 ff       	sbrs	r24, 4
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <__vector_104+0x9e>
		/* Note: header pin 5 = io port pin 4 */
		sensor_pin5_handler(sensor_pin5_arg);
     3d8:	80 91 46 22 	lds	r24, 0x2246
     3dc:	90 91 47 22 	lds	r25, 0x2247
     3e0:	19 95       	eicall
	}

	/* Clear the port interrupt flag */
	port->INTFLAGS = PORT_INT0IF_bm;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	e0 ea       	ldi	r30, 0xA0	; 160
     3e6:	f6 e0       	ldi	r31, 0x06	; 6
     3e8:	84 87       	std	Z+12, r24	; 0x0c
}
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	bf 91       	pop	r27
     3f0:	af 91       	pop	r26
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	7f 91       	pop	r23
     3f8:	6f 91       	pop	r22
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0b be       	out	0x3b, r0	; 59
     406:	0f 90       	pop	r0
     408:	09 be       	out	0x39, r0	; 57
     40a:	0f 90       	pop	r0
     40c:	08 be       	out	0x38, r0	; 56
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <sensor_board_irq_connect>:
	PORT_t *sensor_port;
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
     418:	41 15       	cp	r20, r1
     41a:	51 05       	cpc	r21, r1
     41c:	09 f4       	brne	.+2      	; 0x420 <sensor_board_irq_connect+0x8>
     41e:	60 c0       	rjmp	.+192    	; 0x4e0 <sensor_board_irq_connect+0xc8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     420:	af b7       	in	r26, 0x3f	; 63
	cpu_irq_disable();
     422:	f8 94       	cli

	/* Save the interrupt flag state and disable MCU interrupts. */

	irqflags_t const irq_flags = cpu_irq_save();

	cpu_irq_disable();
     424:	f8 94       	cli

	/* Initialize an interrupt for a specified I/O pin. */

	if (SENSOR_BOARD_PIN3 == gpio_pin) {
     426:	6a 32       	cpi	r22, 0x2A	; 42
     428:	71 05       	cpc	r23, r1
     42a:	81 05       	cpc	r24, r1
     42c:	91 05       	cpc	r25, r1
     42e:	c9 f4       	brne	.+50     	; 0x462 <sensor_board_irq_connect+0x4a>
		sensor_pin3_handler = handler;
     430:	40 93 3c 22 	sts	0x223C, r20
     434:	50 93 3d 22 	sts	0x223D, r21
		sensor_pin3_arg     = arg;
     438:	20 93 3e 22 	sts	0x223E, r18
     43c:	30 93 3f 22 	sts	0x223F, r19
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN3_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN3);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     440:	e0 ea       	ldi	r30, 0xA0	; 160
     442:	f6 e0       	ldi	r31, 0x06	; 6
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN3);
     448:	82 85       	ldd	r24, Z+10	; 0x0a
     44a:	84 60       	ori	r24, 0x04	; 4
     44c:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     44e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     450:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     452:	92 89       	ldd	r25, Z+18	; 0x12
     454:	98 7f       	andi	r25, 0xF8	; 248
     456:	92 8b       	std	Z+18, r25	; 0x12
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     458:	92 89       	ldd	r25, Z+18	; 0x12
     45a:	92 8b       	std	Z+18, r25	; 0x12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     45c:	8f bf       	out	0x3f, r24	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN3,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	3d c0       	rjmp	.+122    	; 0x4dc <sensor_board_irq_connect+0xc4>
	} else if (SENSOR_BOARD_PIN4 == gpio_pin) {
     462:	6b 32       	cpi	r22, 0x2B	; 43
     464:	71 05       	cpc	r23, r1
     466:	81 05       	cpc	r24, r1
     468:	91 05       	cpc	r25, r1
     46a:	c9 f4       	brne	.+50     	; 0x49e <sensor_board_irq_connect+0x86>
		sensor_pin4_handler = handler;
     46c:	40 93 40 22 	sts	0x2240, r20
     470:	50 93 41 22 	sts	0x2241, r21
		sensor_pin4_arg     = arg;
     474:	20 93 42 22 	sts	0x2242, r18
     478:	30 93 43 22 	sts	0x2243, r19
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN4_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN4);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     47c:	e0 ea       	ldi	r30, 0xA0	; 160
     47e:	f6 e0       	ldi	r31, 0x06	; 6
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN4);
     484:	82 85       	ldd	r24, Z+10	; 0x0a
     486:	88 60       	ori	r24, 0x08	; 8
     488:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     48a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     48c:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     48e:	93 89       	ldd	r25, Z+19	; 0x13
     490:	98 7f       	andi	r25, 0xF8	; 248
     492:	93 8b       	std	Z+19, r25	; 0x13
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     494:	93 89       	ldd	r25, Z+19	; 0x13
     496:	93 8b       	std	Z+19, r25	; 0x13
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     498:	8f bf       	out	0x3f, r24	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN4,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	1f c0       	rjmp	.+62     	; 0x4dc <sensor_board_irq_connect+0xc4>
	} else if (SENSOR_BOARD_PIN5 == gpio_pin) {
     49e:	6c 32       	cpi	r22, 0x2C	; 44
     4a0:	71 05       	cpc	r23, r1
     4a2:	81 05       	cpc	r24, r1
     4a4:	91 05       	cpc	r25, r1
     4a6:	c9 f4       	brne	.+50     	; 0x4da <sensor_board_irq_connect+0xc2>
		sensor_pin5_handler = handler;
     4a8:	40 93 44 22 	sts	0x2244, r20
     4ac:	50 93 45 22 	sts	0x2245, r21
		sensor_pin5_arg     = arg;
     4b0:	20 93 46 22 	sts	0x2246, r18
     4b4:	30 93 47 22 	sts	0x2247, r19
#  else
		gpio_irq_connect(gpio_pin, SENSOR_PIN5_IRQ);
#  endif
#elif XMEGA
		sensor_port = ioport_pin_to_port(SENSOR_BOARD_PIN5);
		sensor_port->INTCTRL   = PORT_INT0LVL_LO_gc;
     4b8:	e0 ea       	ldi	r30, 0xA0	; 160
     4ba:	f6 e0       	ldi	r31, 0x06	; 6
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	81 87       	std	Z+9, r24	; 0x09
		sensor_port->INT0MASK |= ioport_pin_to_mask(SENSOR_BOARD_PIN5);
     4c0:	82 85       	ldd	r24, Z+10	; 0x0a
     4c2:	80 61       	ori	r24, 0x10	; 16
     4c4:	82 87       	std	Z+10, r24	; 0x0a

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4c6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     4c8:	f8 94       	cli
	volatile uint8_t *pin_ctrl =
			(&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
     4ca:	94 89       	ldd	r25, Z+20	; 0x14
     4cc:	98 7f       	andi	r25, 0xF8	; 248
     4ce:	94 8b       	std	Z+20, r25	; 0x14
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
     4d0:	94 89       	ldd	r25, Z+20	; 0x14
     4d2:	94 8b       	std	Z+20, r25	; 0x14
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4d4:	8f bf       	out	0x3f, r24	; 63
		 * pins, which requires them to be sensing on both edges.
		 */
		ioport_set_pin_sense_mode(SENSOR_BOARD_PIN5,
				IOPORT_SENSE_BOTHEDGES);
#endif
		status = true;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <sensor_board_irq_connect+0xc4>
 * \return  bool        true if the call succeeds, else false.
 */
bool sensor_board_irq_connect(uint32_t gpio_pin,
		SENSOR_IRQ_HANDLER handler, void *arg)
{
	bool status = false;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	af bf       	out	0x3f, r26	; 63

	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
     4de:	08 95       	ret
#endif

	/* Ensure that the caller has specified a function address. */

	if (handler == NULL) {
		return status;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
	/* Restore the MCU interrupt flag state. */

	cpu_irq_restore(irq_flags);

	return status;
}
     4e2:	08 95       	ret

000004e4 <sensor_board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	80 ea       	ldi	r24, 0xA0	; 160
     4ec:	96 e0       	ldi	r25, 0x06	; 6
     4ee:	53 d0       	rcall	.+166    	; 0x596 <ioport_configure_port_pin>
#elif (EXT_BOARD == SENSORS_XPLAINED_BREADBOARD)
	gpio_configure_pin(SENSOR_BOARD_PIN4, PIN_INPUT_FLAGS);
#endif

	/* Global Interrupt Disable */
	cpu_irq_disable();
     4f0:	f8 94       	cli

	/* Initialize interrupt vector table support. */
	irq_initialize_vectors();
     4f2:	87 e0       	ldi	r24, 0x07	; 7
     4f4:	e0 ea       	ldi	r30, 0xA0	; 160
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	82 83       	std	Z+2, r24	; 0x02

	/* Global Interrupt Enable */
	cpu_irq_enable();
     4fa:	78 94       	sei
     4fc:	08 95       	ret

000004fe <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	80 93 70 00 	sts	0x0070, r24
     504:	80 93 71 00 	sts	0x0071, r24
     508:	80 93 72 00 	sts	0x0072, r24
     50c:	80 93 73 00 	sts	0x0073, r24
     510:	80 93 74 00 	sts	0x0074, r24
     514:	80 93 75 00 	sts	0x0075, r24
     518:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e4       	ldi	r24, 0x41	; 65
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     526:	e0 e5       	ldi	r30, 0x50	; 80
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     52c:	84 fd       	sbrc	r24, 4
     52e:	19 c0       	rjmp	.+50     	; 0x562 <sysclk_init+0x64>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     530:	81 81       	ldd	r24, Z+1	; 0x01
	switch (src) {
	case PLL_SRC_RC2MHZ:
		break;

	case PLL_SRC_RC32MHZ:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     532:	81 fd       	sbrc	r24, 1
     534:	09 c0       	rjmp	.+18     	; 0x548 <sysclk_init+0x4a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     536:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     538:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     53a:	90 81       	ld	r25, Z
     53c:	92 60       	ori	r25, 0x02	; 2
     53e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     540:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     542:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     544:	81 ff       	sbrs	r24, 1
     546:	fd cf       	rjmp	.-6      	; 0x542 <sysclk_init+0x44>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     548:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     54a:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     54c:	e0 e5       	ldi	r30, 0x50	; 80
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	98 e8       	ldi	r25, 0x88	; 136
     552:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     554:	90 81       	ld	r25, Z
     556:	90 61       	ori	r25, 0x10	; 16
     558:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     55a:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     55c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     55e:	84 ff       	sbrs	r24, 4
     560:	fd cf       	rjmp	.-6      	; 0x55c <sysclk_init+0x5e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     562:	64 e0       	ldi	r22, 0x04	; 4
     564:	80 e4       	ldi	r24, 0x40	; 64
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     56c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     56e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     570:	e0 e5       	ldi	r30, 0x50	; 80
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	90 81       	ld	r25, Z
     576:	9e 7f       	andi	r25, 0xFE	; 254
     578:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     57a:	8f bf       	out	0x3f, r24	; 63
     57c:	08 95       	ret

0000057e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     57e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     580:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     582:	e8 2f       	mov	r30, r24
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	e0 59       	subi	r30, 0x90	; 144
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	60 95       	com	r22
     58c:	80 81       	ld	r24, Z
     58e:	68 23       	and	r22, r24
     590:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     592:	9f bf       	out	0x3f, r25	; 63
     594:	08 95       	ret

00000596 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     59a:	fc 01       	movw	r30, r24
     59c:	70 96       	adiw	r30, 0x10	; 16
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     5a2:	c6 2f       	mov	r28, r22
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
     5a6:	de 01       	movw	r26, r28
     5a8:	02 2e       	mov	r0, r18
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <ioport_configure_port_pin+0x1a>
     5ac:	b5 95       	asr	r27
     5ae:	a7 95       	ror	r26
     5b0:	0a 94       	dec	r0
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <ioport_configure_port_pin+0x16>
     5b4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     5b6:	50 83       	st	Z, r21
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     5be:	28 30       	cpi	r18, 0x08	; 8
     5c0:	31 05       	cpc	r19, r1
     5c2:	89 f7       	brne	.-30     	; 0x5a6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     5c4:	40 ff       	sbrs	r20, 0
     5c6:	0a c0       	rjmp	.+20     	; 0x5dc <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     5c8:	41 ff       	sbrs	r20, 1
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     5cc:	fc 01       	movw	r30, r24
     5ce:	65 83       	std	Z+5, r22	; 0x05
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     5d2:	fc 01       	movw	r30, r24
     5d4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     5d6:	fc 01       	movw	r30, r24
     5d8:	61 83       	std	Z+1, r22	; 0x01
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     5dc:	fc 01       	movw	r30, r24
     5de:	62 83       	std	Z+2, r22	; 0x02
	}
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <sfh7770_isr>:
 *
 * @param arg       The address of the driver sensor_hal_t descriptor.
 * @return Nothing.
 */
static void sfh7770_isr(volatile void *arg)
{
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	27 97       	sbiw	r28, 0x07	; 7
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	8c 01       	movw	r16, r24
		uint8_t int_set;        /* interrupt status */
	}
	regs;

	/* Do not wait for a busy bus when reading data. */
	hal->bus.no_wait = true;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	f8 01       	movw	r30, r16
     5fe:	86 83       	std	Z+6, r24	; 0x06
	sensor_bus_read(hal, hal->burst_addr, (uint8_t *)&regs, sizeof(regs));
     600:	27 e0       	ldi	r18, 0x07	; 7
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	ae 01       	movw	r20, r28
     606:	4f 5f       	subi	r20, 0xFF	; 255
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	67 81       	ldd	r22, Z+7	; 0x07
     60c:	c8 01       	movw	r24, r16
     60e:	0e 94 04 0c 	call	0x1808	; 0x1808 <bus_read>
	hal->bus.no_wait = false;
     612:	f8 01       	movw	r30, r16
     614:	16 82       	std	Z+6, r1	; 0x06

	if (STATUS_OK == hal->bus.status) {
     616:	85 81       	ldd	r24, Z+5	; 0x05
     618:	81 11       	cpse	r24, r1
     61a:	ca c0       	rjmp	.+404    	; 0x7b0 <sfh7770_isr+0x1ca>
		static sensor_event_data_t event_data = {.data.scaled = true};

		event_data.data.timestamp = sensor_timestamp();
     61c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <sensor_timestamp>
     620:	60 93 16 20 	sts	0x2016, r22
     624:	70 93 17 20 	sts	0x2017, r23
     628:	80 93 18 20 	sts	0x2018, r24
     62c:	90 93 19 20 	sts	0x2019, r25
		event_data.event = SENSOR_EVENT_UNKNOWN;
     630:	10 92 06 20 	sts	0x2006, r1
     634:	10 92 07 20 	sts	0x2007, r1

		/*
		 * Determine the interrupt source then combine measurement
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);
     638:	2f 81       	ldd	r18, Y+7	; 0x07
     63a:	20 76       	andi	r18, 0x60	; 96

		uint16_t const light_level
			= ((regs.als_data_msb << 8) | regs.als_data_lsb);
     63c:	4a 81       	ldd	r20, Y+2	; 0x02
     63e:	39 81       	ldd	r19, Y+1	; 0x01

		switch (int_source) {
     640:	20 34       	cpi	r18, 0x40	; 64
     642:	09 f4       	brne	.+2      	; 0x646 <sfh7770_isr+0x60>
     644:	55 c0       	rjmp	.+170    	; 0x6f0 <sfh7770_isr+0x10a>
     646:	30 f4       	brcc	.+12     	; 0x654 <sfh7770_isr+0x6e>
     648:	22 23       	and	r18, r18
     64a:	41 f0       	breq	.+16     	; 0x65c <sfh7770_isr+0x76>
     64c:	20 32       	cpi	r18, 0x20	; 32
     64e:	09 f0       	breq	.+2      	; 0x652 <sfh7770_isr+0x6c>
     650:	af c0       	rjmp	.+350    	; 0x7b0 <sfh7770_isr+0x1ca>
     652:	4e c0       	rjmp	.+156    	; 0x6f0 <sfh7770_isr+0x10a>
     654:	20 36       	cpi	r18, 0x60	; 96
     656:	09 f0       	breq	.+2      	; 0x65a <sfh7770_isr+0x74>
     658:	ab c0       	rjmp	.+342    	; 0x7b0 <sfh7770_isr+0x1ca>
     65a:	4a c0       	rjmp	.+148    	; 0x6f0 <sfh7770_isr+0x10a>
		 * register values into a single 16-bit measurement value.
		 */
		uint8_t const int_source = (regs.int_set & INT_SOURCE_MASK);

		uint16_t const light_level
			= ((regs.als_data_msb << 8) | regs.als_data_lsb);
     65c:	94 2f       	mov	r25, r20
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	83 2b       	or	r24, r19

		switch (int_source) {
		case INT_SOURCE_ALS:

			/* Determine if low or high light interrupt */
			if (light_level >= high_light_threshold) {
     662:	20 91 49 22 	lds	r18, 0x2249
     666:	30 91 4a 22 	lds	r19, 0x224A
     66a:	82 17       	cp	r24, r18
     66c:	93 07       	cpc	r25, r19
     66e:	e0 f0       	brcs	.+56     	; 0x6a8 <sfh7770_isr+0xc2>
				event_data.event = SENSOR_EVENT_HIGH_LIGHT;
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e1       	ldi	r19, 0x10	; 16
     674:	20 93 06 20 	sts	0x2006, r18
     678:	30 93 07 20 	sts	0x2007, r19
				event_data.data.light.value = light_level;
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	80 93 0a 20 	sts	0x200A, r24
     684:	90 93 0b 20 	sts	0x200B, r25
     688:	a0 93 0c 20 	sts	0x200C, r26
     68c:	b0 93 0d 20 	sts	0x200D, r27

				(event_cb[2].handler)(&event_data,
     690:	60 91 25 20 	lds	r22, 0x2025
     694:	70 91 26 20 	lds	r23, 0x2026
     698:	e0 91 23 20 	lds	r30, 0x2023
     69c:	f0 91 24 20 	lds	r31, 0x2024
     6a0:	86 e0       	ldi	r24, 0x06	; 6
     6a2:	90 e2       	ldi	r25, 0x20	; 32
     6a4:	19 95       	eicall
     6a6:	84 c0       	rjmp	.+264    	; 0x7b0 <sfh7770_isr+0x1ca>
						event_cb[2].arg);
			} else if (light_level <= low_light_threshold) {
     6a8:	20 91 4b 22 	lds	r18, 0x224B
     6ac:	30 91 4c 22 	lds	r19, 0x224C
     6b0:	28 17       	cp	r18, r24
     6b2:	39 07       	cpc	r19, r25
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <sfh7770_isr+0xd2>
     6b6:	7c c0       	rjmp	.+248    	; 0x7b0 <sfh7770_isr+0x1ca>
				event_data.event = SENSOR_EVENT_LOW_LIGHT;
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	38 e0       	ldi	r19, 0x08	; 8
     6bc:	20 93 06 20 	sts	0x2006, r18
     6c0:	30 93 07 20 	sts	0x2007, r19
				event_data.data.light.value = light_level;
     6c4:	a0 e0       	ldi	r26, 0x00	; 0
     6c6:	b0 e0       	ldi	r27, 0x00	; 0
     6c8:	80 93 0a 20 	sts	0x200A, r24
     6cc:	90 93 0b 20 	sts	0x200B, r25
     6d0:	a0 93 0c 20 	sts	0x200C, r26
     6d4:	b0 93 0d 20 	sts	0x200D, r27

				(event_cb[1].handler)(&event_data,
     6d8:	60 91 21 20 	lds	r22, 0x2021
     6dc:	70 91 22 20 	lds	r23, 0x2022
     6e0:	e0 91 1f 20 	lds	r30, 0x201F
     6e4:	f0 91 20 20 	lds	r31, 0x2020
     6e8:	86 e0       	ldi	r24, 0x06	; 6
     6ea:	90 e2       	ldi	r25, 0x20	; 32
     6ec:	19 95       	eicall
     6ee:	60 c0       	rjmp	.+192    	; 0x7b0 <sfh7770_isr+0x1ca>

		case INT_SOURCE_LED1:
		case INT_SOURCE_LED2:
		case INT_SOURCE_LED3:

			event_data.event = SENSOR_EVENT_NEAR_PROXIMITY;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	80 93 06 20 	sts	0x2006, r24
     6f8:	90 93 07 20 	sts	0x2007, r25

			if (int_source == INT_SOURCE_LED1) {
     6fc:	20 32       	cpi	r18, 0x20	; 32
     6fe:	39 f4       	brne	.+14     	; 0x70e <sfh7770_isr+0x128>
				event_data.channel = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	80 93 08 20 	sts	0x2008, r24
     708:	90 93 09 20 	sts	0x2009, r25
     70c:	0f c0       	rjmp	.+30     	; 0x72c <sfh7770_isr+0x146>
			} else if (int_source == INT_SOURCE_LED2) {
     70e:	20 34       	cpi	r18, 0x40	; 64
     710:	39 f4       	brne	.+14     	; 0x720 <sfh7770_isr+0x13a>
				event_data.channel = 2;
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	80 93 08 20 	sts	0x2008, r24
     71a:	90 93 09 20 	sts	0x2009, r25
     71e:	06 c0       	rjmp	.+12     	; 0x72c <sfh7770_isr+0x146>
			} else { /* INT_SOURCE_LED3 */
				event_data.channel = 3;
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	80 93 08 20 	sts	0x2008, r24
     728:	90 93 09 20 	sts	0x2009, r25

			/* Use internal device threshold status to
			 * determine scaled values.
			 */
			event_data.data.proximity.value[0]
				= (regs.als_ps_status & PS_LED1_THRESH) ?
     72c:	2b 81       	ldd	r18, Y+3	; 0x03
     72e:	21 ff       	sbrs	r18, 1
     730:	05 c0       	rjmp	.+10     	; 0x73c <sfh7770_isr+0x156>
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	a0 e0       	ldi	r26, 0x00	; 0
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	03 c0       	rjmp	.+6      	; 0x742 <sfh7770_isr+0x15c>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	dc 01       	movw	r26, r24
     742:	80 93 0a 20 	sts	0x200A, r24
     746:	90 93 0b 20 	sts	0x200B, r25
     74a:	a0 93 0c 20 	sts	0x200C, r26
     74e:	b0 93 0d 20 	sts	0x200D, r27
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[1]
				= (regs.als_ps_status & PS_LED2_THRESH) ?
     752:	23 ff       	sbrs	r18, 3
     754:	05 c0       	rjmp	.+10     	; 0x760 <sfh7770_isr+0x17a>
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	03 c0       	rjmp	.+6      	; 0x766 <sfh7770_isr+0x180>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	dc 01       	movw	r26, r24
     766:	80 93 0e 20 	sts	0x200E, r24
     76a:	90 93 0f 20 	sts	0x200F, r25
     76e:	a0 93 10 20 	sts	0x2010, r26
     772:	b0 93 11 20 	sts	0x2011, r27
					PROXIMITY_NEAR : PROXIMITY_NONE;

			event_data.data.proximity.value[2]
				= (regs.als_ps_status & PS_LED3_THRESH) ?
     776:	25 ff       	sbrs	r18, 5
     778:	05 c0       	rjmp	.+10     	; 0x784 <sfh7770_isr+0x19e>
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	03 c0       	rjmp	.+6      	; 0x78a <sfh7770_isr+0x1a4>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	dc 01       	movw	r26, r24
     78a:	80 93 12 20 	sts	0x2012, r24
     78e:	90 93 13 20 	sts	0x2013, r25
     792:	a0 93 14 20 	sts	0x2014, r26
     796:	b0 93 15 20 	sts	0x2015, r27
					PROXIMITY_NEAR : PROXIMITY_NONE;

			(event_cb[0].handler)(&event_data, event_cb[0].arg);
     79a:	60 91 1d 20 	lds	r22, 0x201D
     79e:	70 91 1e 20 	lds	r23, 0x201E
     7a2:	e0 91 1b 20 	lds	r30, 0x201B
     7a6:	f0 91 1c 20 	lds	r31, 0x201C
     7aa:	86 e0       	ldi	r24, 0x06	; 6
     7ac:	90 e2       	ldi	r25, 0x20	; 32
     7ae:	19 95       	eicall
		}
	}
}
     7b0:	27 96       	adiw	r28, 0x07	; 7
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	08 95       	ret

000007c0 <sfh7770_read>:
 * @param data      The address where data values are returned.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_read(sensor_t *sensor, sensor_read_t type,
		sensor_data_t *data)
{
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	25 97       	sbiw	r28, 0x05	; 5
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	fc 01       	movw	r30, r24
     7d8:	7a 01       	movw	r14, r20
	sensor_hal_t *const hal = sensor->hal;
     7da:	80 81       	ld	r24, Z
     7dc:	91 81       	ldd	r25, Z+1	; 0x01

	switch (type) {
     7de:	65 30       	cpi	r22, 0x05	; 5
     7e0:	31 f0       	breq	.+12     	; 0x7ee <sfh7770_read+0x2e>
     7e2:	67 30       	cpi	r22, 0x07	; 7
     7e4:	01 f1       	breq	.+64     	; 0x826 <sfh7770_read+0x66>
     7e6:	63 30       	cpi	r22, 0x03	; 3
     7e8:	09 f0       	breq	.+2      	; 0x7ec <sfh7770_read+0x2c>
     7ea:	95 c0       	rjmp	.+298    	; 0x916 <sfh7770_read+0x156>
     7ec:	76 c0       	rjmp	.+236    	; 0x8da <sfh7770_read+0x11a>
	light_data;

	/* Read and combine two light level data registers
	 *   NOTE:  LSB register must be read first!
	 */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_DATA_LSB,
     7ee:	22 e0       	ldi	r18, 0x02	; 2
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	ae 01       	movw	r20, r28
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	6c e8       	ldi	r22, 0x8C	; 140
     7fa:	0e 94 04 0c 	call	0x1808	; 0x1808 <bus_read>
			(uint8_t *)&light_data, sizeof(light_data));

	/* Device uses lux for internal values, so raw is the same as scaled */
	data->light.value = (uint32_t)((light_data.msb << 8) | light_data.lsb);
     7fe:	3a 81       	ldd	r19, Y+2	; 0x02
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	49 81       	ldd	r20, Y+1	; 0x01
     804:	89 01       	movw	r16, r18
     806:	04 2b       	or	r16, r20
     808:	22 27       	eor	r18, r18
     80a:	17 fd       	sbrc	r17, 7
     80c:	20 95       	com	r18
     80e:	32 2f       	mov	r19, r18
     810:	f7 01       	movw	r30, r14
     812:	00 83       	st	Z, r16
     814:	11 83       	std	Z+1, r17	; 0x01
     816:	22 83       	std	Z+2, r18	; 0x02
     818:	33 83       	std	Z+3, r19	; 0x03

	return (count == sizeof(light_data));
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	09 f4       	brne	.+2      	; 0x822 <sfh7770_read+0x62>
     820:	7f c0       	rjmp	.+254    	; 0x920 <sfh7770_read+0x160>
     822:	40 e0       	ldi	r20, 0x00	; 0
{
	sensor_hal_t *const hal = sensor->hal;

	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);
     824:	7d c0       	rjmp	.+250    	; 0x920 <sfh7770_read+0x160>
		uint8_t ps_data_led3;
	}
	regs;

	/* Read three LED proximity measurements + status */
	size_t const count = sensor_bus_read(hal, SFH7770_ALS_PS_STATUS,
     826:	24 e0       	ldi	r18, 0x04	; 4
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	ae 01       	movw	r20, r28
     82c:	4f 5f       	subi	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	6e e8       	ldi	r22, 0x8E	; 142
     832:	ea d7       	rcall	.+4052   	; 0x1808 <bus_read>
     834:	9c 01       	movw	r18, r24
			(uint8_t *)&regs, sizeof(regs));

	/* Fill in return values based on "scaled" or raw selection */
	if (data->scaled) {
     836:	f7 01       	movw	r30, r14
     838:	80 89       	ldd	r24, Z+16	; 0x10
     83a:	88 23       	and	r24, r24
     83c:	79 f1       	breq	.+94     	; 0x89c <sfh7770_read+0xdc>
		/* Use internal device threshold status to determine values */
		data->proximity.value[0]
			= (regs.als_ps_status & PS_LED1_THRESH) ?
     83e:	49 81       	ldd	r20, Y+1	; 0x01
     840:	41 ff       	sbrs	r20, 1
     842:	05 c0       	rjmp	.+10     	; 0x84e <sfh7770_read+0x8e>
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	03 c0       	rjmp	.+6      	; 0x854 <sfh7770_read+0x94>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	dc 01       	movw	r26, r24
     854:	f7 01       	movw	r30, r14
     856:	80 83       	st	Z, r24
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	a2 83       	std	Z+2, r26	; 0x02
     85c:	b3 83       	std	Z+3, r27	; 0x03
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[1]
			= (regs.als_ps_status & PS_LED2_THRESH) ?
     85e:	43 ff       	sbrs	r20, 3
     860:	05 c0       	rjmp	.+10     	; 0x86c <sfh7770_read+0xac>
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	03 c0       	rjmp	.+6      	; 0x872 <sfh7770_read+0xb2>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	dc 01       	movw	r26, r24
     872:	f7 01       	movw	r30, r14
     874:	84 83       	std	Z+4, r24	; 0x04
     876:	95 83       	std	Z+5, r25	; 0x05
     878:	a6 83       	std	Z+6, r26	; 0x06
     87a:	b7 83       	std	Z+7, r27	; 0x07
				PROXIMITY_NEAR : PROXIMITY_NONE;

		data->proximity.value[2]
			= (regs.als_ps_status & PS_LED3_THRESH) ?
     87c:	45 ff       	sbrs	r20, 5
     87e:	05 c0       	rjmp	.+10     	; 0x88a <sfh7770_read+0xca>
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a0 e0       	ldi	r26, 0x00	; 0
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	03 c0       	rjmp	.+6      	; 0x890 <sfh7770_read+0xd0>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	dc 01       	movw	r26, r24
     890:	f7 01       	movw	r30, r14
     892:	80 87       	std	Z+8, r24	; 0x08
     894:	91 87       	std	Z+9, r25	; 0x09
     896:	a2 87       	std	Z+10, r26	; 0x0a
     898:	b3 87       	std	Z+11, r27	; 0x0b
     89a:	19 c0       	rjmp	.+50     	; 0x8ce <sfh7770_read+0x10e>
				PROXIMITY_NEAR : PROXIMITY_NONE;
	} else {
		/* Use internal raw values */
		data->proximity.value[0] = (int32_t)regs.ps_data_led1;
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a0 e0       	ldi	r26, 0x00	; 0
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	f7 01       	movw	r30, r14
     8a6:	80 83       	st	Z, r24
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	a2 83       	std	Z+2, r26	; 0x02
     8ac:	b3 83       	std	Z+3, r27	; 0x03
		data->proximity.value[1] = (int32_t)regs.ps_data_led2;
     8ae:	4b 81       	ldd	r20, Y+3	; 0x03
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	44 83       	std	Z+4, r20	; 0x04
     8b8:	55 83       	std	Z+5, r21	; 0x05
     8ba:	66 83       	std	Z+6, r22	; 0x06
     8bc:	77 83       	std	Z+7, r23	; 0x07
		data->proximity.value[2] = (int32_t)regs.ps_data_led3;
     8be:	4c 81       	ldd	r20, Y+4	; 0x04
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	40 87       	std	Z+8, r20	; 0x08
     8c8:	51 87       	std	Z+9, r21	; 0x09
     8ca:	62 87       	std	Z+10, r22	; 0x0a
     8cc:	73 87       	std	Z+11, r23	; 0x0b
	}

	return (count == sizeof(regs));
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	24 30       	cpi	r18, 0x04	; 4
     8d2:	31 05       	cpc	r19, r1
     8d4:	29 f1       	breq	.+74     	; 0x920 <sfh7770_read+0x160>
     8d6:	40 e0       	ldi	r20, 0x00	; 0
	switch (type) {
	case SENSOR_READ_LIGHT:
		return sfh7770_get_light(hal, data);

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);
     8d8:	23 c0       	rjmp	.+70     	; 0x920 <sfh7770_read+0x160>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     8da:	1d 82       	std	Y+5, r1	; 0x05
	bus_read(bus, addr, &data, sizeof(uint8_t));
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	ae 01       	movw	r20, r28
     8e2:	4b 5f       	subi	r20, 0xFB	; 251
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	6a e8       	ldi	r22, 0x8A	; 138
     8e8:	8f d7       	rcall	.+3870   	; 0x1808 <bus_read>

	return data;
     8ea:	8d 81       	ldd	r24, Y+5	; 0x05
 */
static bool sfh7770_device_id(sensor_hal_t *hal, sensor_data_t *data)
{
	uint8_t const part_id = sensor_bus_get(hal, SFH7770_PART_ID);

	data->device.id = (uint32_t)(part_id & PART_ID_MASK) >> PART_ID_SHIFT;
     8ec:	48 2f       	mov	r20, r24
     8ee:	42 95       	swap	r20
     8f0:	4f 70       	andi	r20, 0x0F	; 15
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	f7 01       	movw	r30, r14
     8fa:	40 83       	st	Z, r20
     8fc:	51 83       	std	Z+1, r21	; 0x01
     8fe:	62 83       	std	Z+2, r22	; 0x02
     900:	73 83       	std	Z+3, r23	; 0x03
	data->device.version = (uint32_t)(part_id & PART_REV_MASK);
     902:	8f 70       	andi	r24, 0x0F	; 15
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	84 83       	std	Z+4, r24	; 0x04
     90c:	95 83       	std	Z+5, r25	; 0x05
     90e:	a6 83       	std	Z+6, r26	; 0x06
     910:	b7 83       	std	Z+7, r27	; 0x07

	case SENSOR_READ_PROXIMITY:
		return sfh7770_get_proximity(hal, data);

	case SENSOR_READ_ID:
		return sfh7770_device_id(hal, data);
     912:	41 e0       	ldi	r20, 0x01	; 1
     914:	05 c0       	rjmp	.+10     	; 0x920 <sfh7770_read+0x160>

	default:
		sensor->err = SENSOR_ERR_FUNCTION;
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	92 e8       	ldi	r25, 0x82	; 130
     91a:	87 83       	std	Z+7, r24	; 0x07
     91c:	90 87       	std	Z+8, r25	; 0x08
		return false;
     91e:	40 e0       	ldi	r20, 0x00	; 0
	}
}
     920:	84 2f       	mov	r24, r20
     922:	25 96       	adiw	r28, 0x05	; 5
     924:	cd bf       	out	0x3d, r28	; 61
     926:	de bf       	out	0x3e, r29	; 62
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	08 95       	ret

00000936 <sfh7770_event>:
 * @param  enable    Enable flag: true = enable event, false = disable event
 * @return bool      true if the call succeeds, else false is returned
 */
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	1f 92       	push	r1
     94c:	1f 92       	push	r1
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	7b 01       	movw	r14, r22
     954:	6a 01       	movw	r12, r20
     956:	b2 2e       	mov	r11, r18
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;

	uint8_t int_set = sensor_bus_get(hal, SFH7770_INT_SET);
     958:	fc 01       	movw	r30, r24
     95a:	00 81       	ld	r16, Z
     95c:	11 81       	ldd	r17, Z+1	; 0x01
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     95e:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	ae 01       	movw	r20, r28
     966:	4f 5f       	subi	r20, 0xFF	; 255
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	62 e9       	ldi	r22, 0x92	; 146
     96c:	c8 01       	movw	r24, r16
     96e:	4c d7       	rcall	.+3736   	; 0x1808 <bus_read>

	return data;
     970:	29 81       	ldd	r18, Y+1	; 0x01

	if (sensor_event & SENSOR_EVENT_NEAR_PROXIMITY) {
     972:	f0 fe       	sbrs	r15, 0
     974:	1a c0       	rjmp	.+52     	; 0x9aa <sfh7770_event+0x74>
		if (callback) {
     976:	c1 14       	cp	r12, r1
     978:	d1 04       	cpc	r13, r1
     97a:	69 f0       	breq	.+26     	; 0x996 <sfh7770_event+0x60>
			event_cb[0] = *callback;
     97c:	f6 01       	movw	r30, r12
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	a2 81       	ldd	r26, Z+2	; 0x02
     984:	b3 81       	ldd	r27, Z+3	; 0x03
     986:	80 93 1b 20 	sts	0x201B, r24
     98a:	90 93 1c 20 	sts	0x201C, r25
     98e:	a0 93 1d 20 	sts	0x201D, r26
     992:	b0 93 1e 20 	sts	0x201E, r27
		}

		if (enable) {
     996:	bb 20       	and	r11, r11
     998:	21 f0       	breq	.+8      	; 0x9a2 <sfh7770_event+0x6c>
			int_set |= INT_MODE_PS;
     99a:	21 60       	ori	r18, 0x01	; 1
		} else {
			int_set &= ~INT_MODE_PS;
		}

		status = true;
     99c:	aa 24       	eor	r10, r10
     99e:	a3 94       	inc	r10
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <sfh7770_event+0x76>
		}

		if (enable) {
			int_set |= INT_MODE_PS;
		} else {
			int_set &= ~INT_MODE_PS;
     9a2:	2e 7f       	andi	r18, 0xFE	; 254
		}

		status = true;
     9a4:	aa 24       	eor	r10, r10
     9a6:	a3 94       	inc	r10
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <sfh7770_event+0x76>
static bool sfh7770_event(sensor_t *sensor, sensor_event_t sensor_event,
		sensor_event_callback_t *callback, bool enable)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     9aa:	a1 2c       	mov	r10, r1
		}

		status = true;
	}

	if (sensor_event & SENSOR_EVENT_LOW_LIGHT) {
     9ac:	f3 fe       	sbrs	r15, 3
     9ae:	19 c0       	rjmp	.+50     	; 0x9e2 <sfh7770_event+0xac>
		if (callback) {
     9b0:	c1 14       	cp	r12, r1
     9b2:	d1 04       	cpc	r13, r1
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <sfh7770_event+0x9a>
			event_cb[1] = *callback;
     9b6:	f6 01       	movw	r30, r12
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	a2 81       	ldd	r26, Z+2	; 0x02
     9be:	b3 81       	ldd	r27, Z+3	; 0x03
     9c0:	80 93 1f 20 	sts	0x201F, r24
     9c4:	90 93 20 20 	sts	0x2020, r25
     9c8:	a0 93 21 20 	sts	0x2021, r26
     9cc:	b0 93 22 20 	sts	0x2022, r27
		}

		if (enable) {
     9d0:	bb 20       	and	r11, r11
     9d2:	21 f0       	breq	.+8      	; 0x9dc <sfh7770_event+0xa6>
			int_set |= INT_MODE_ALS;
     9d4:	22 60       	ori	r18, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     9d6:	aa 24       	eor	r10, r10
     9d8:	a3 94       	inc	r10
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <sfh7770_event+0xac>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     9dc:	2d 7f       	andi	r18, 0xFD	; 253
		}

		status = true;
     9de:	aa 24       	eor	r10, r10
     9e0:	a3 94       	inc	r10
	}

	if (sensor_event & SENSOR_EVENT_HIGH_LIGHT) {
     9e2:	f4 fe       	sbrs	r15, 4
     9e4:	19 c0       	rjmp	.+50     	; 0xa18 <sfh7770_event+0xe2>
		if (callback) {
     9e6:	c1 14       	cp	r12, r1
     9e8:	d1 04       	cpc	r13, r1
     9ea:	69 f0       	breq	.+26     	; 0xa06 <sfh7770_event+0xd0>
			event_cb[2] = *callback;
     9ec:	f6 01       	movw	r30, r12
     9ee:	40 81       	ld	r20, Z
     9f0:	51 81       	ldd	r21, Z+1	; 0x01
     9f2:	62 81       	ldd	r22, Z+2	; 0x02
     9f4:	73 81       	ldd	r23, Z+3	; 0x03
     9f6:	40 93 23 20 	sts	0x2023, r20
     9fa:	50 93 24 20 	sts	0x2024, r21
     9fe:	60 93 25 20 	sts	0x2025, r22
     a02:	70 93 26 20 	sts	0x2026, r23
		}

		if (enable) {
     a06:	bb 20       	and	r11, r11
     a08:	21 f0       	breq	.+8      	; 0xa12 <sfh7770_event+0xdc>
			int_set |= INT_MODE_ALS;
     a0a:	22 60       	ori	r18, 0x02	; 2
		} else {
			int_set &= ~INT_MODE_ALS;
		}

		status = true;
     a0c:	aa 24       	eor	r10, r10
     a0e:	a3 94       	inc	r10
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <sfh7770_event+0xe2>
		}

		if (enable) {
			int_set |= INT_MODE_ALS;
		} else {
			int_set &= ~INT_MODE_ALS;
     a12:	2d 7f       	andi	r18, 0xFD	; 253
		}

		status = true;
     a14:	aa 24       	eor	r10, r10
     a16:	a3 94       	inc	r10
     a18:	2a 83       	std	Y+2, r18	; 0x02
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	ae 01       	movw	r20, r28
     a20:	4e 5f       	subi	r20, 0xFE	; 254
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	62 e9       	ldi	r22, 0x92	; 146
     a26:	c8 01       	movw	r24, r16
     a28:	2e d7       	rcall	.+3676   	; 0x1886 <bus_write>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     a2a:	19 82       	std	Y+1, r1	; 0x01
	bus_read(bus, addr, &data, sizeof(uint8_t));
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	ae 01       	movw	r20, r28
     a32:	4f 5f       	subi	r20, 0xFF	; 255
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	62 e9       	ldi	r22, 0x92	; 146
     a38:	c8 01       	movw	r24, r16
     a3a:	e6 d6       	rcall	.+3532   	; 0x1808 <bus_read>
	sensor_bus_put(hal, SFH7770_INT_SET, int_set);

	int_set = sensor_bus_get(hal, SFH7770_INT_SET);

	return status;
}
     a3c:	8a 2d       	mov	r24, r10
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	08 95       	ret

00000a58 <sfh7770_calibrate>:
 * @param info       Unimplemented (ignored) parameter.
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_calibrate(sensor_t *sensor,
		sensor_calibration_t calib_type, int step, void *info)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <sfh7770_calibrate+0xe>
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	8c 01       	movw	r16, r24
	sensor_hal_t *const hal = sensor->hal;
     a6e:	fc 01       	movw	r30, r24
     a70:	e0 80       	ld	r14, Z
     a72:	f1 80       	ldd	r15, Z+1	; 0x01

	static uint8_t prox_data[3];
	uint8_t read_data[3];

	/* Validate the specified calibration type */
	if (calib_type != MANUAL_CALIBRATE) {
     a74:	61 30       	cpi	r22, 0x01	; 1
     a76:	31 f0       	breq	.+12     	; 0xa84 <sfh7770_calibrate+0x2c>
		sensor->err = SENSOR_ERR_PARAMS;
     a78:	80 e2       	ldi	r24, 0x20	; 32
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	87 83       	std	Z+7, r24	; 0x07
     a7e:	90 87       	std	Z+8, r25	; 0x08
		return false;
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	69 c0       	rjmp	.+210    	; 0xb56 <sfh7770_calibrate+0xfe>
	}

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
     a84:	42 30       	cpi	r20, 0x02	; 2
     a86:	51 05       	cpc	r21, r1
     a88:	b1 f0       	breq	.+44     	; 0xab6 <sfh7770_calibrate+0x5e>
     a8a:	43 30       	cpi	r20, 0x03	; 3
     a8c:	51 05       	cpc	r21, r1
     a8e:	11 f1       	breq	.+68     	; 0xad4 <sfh7770_calibrate+0x7c>
     a90:	41 30       	cpi	r20, 0x01	; 1
     a92:	51 05       	cpc	r21, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <sfh7770_calibrate+0x40>
     a96:	59 c0       	rjmp	.+178    	; 0xb4a <sfh7770_calibrate+0xf2>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     a98:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	ae 01       	movw	r20, r28
     aa0:	4c 5f       	subi	r20, 0xFC	; 252
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	6f e8       	ldi	r22, 0x8F	; 143
     aa6:	8e 2d       	mov	r24, r14
     aa8:	9f 2d       	mov	r25, r15
     aaa:	ae d6       	rcall	.+3420   	; 0x1808 <bus_read>

	return data;
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
     aae:	80 93 4d 22 	sts	0x224D, r24
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     ab2:	81 e0       	ldi	r24, 0x01	; 1

	/* Read proximity sensor for individual channel based on step number. */
	switch (step) {
	case 1:
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;
     ab4:	50 c0       	rjmp	.+160    	; 0xb56 <sfh7770_calibrate+0xfe>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     ab6:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	ae 01       	movw	r20, r28
     abe:	4c 5f       	subi	r20, 0xFC	; 252
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	60 e9       	ldi	r22, 0x90	; 144
     ac4:	8e 2d       	mov	r24, r14
     ac6:	9f 2d       	mov	r25, r15
     ac8:	9f d6       	rcall	.+3390   	; 0x1808 <bus_read>

	return data;
     aca:	8c 81       	ldd	r24, Y+4	; 0x04

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
     acc:	80 93 4e 22 	sts	0x224E, r24
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
		prox_data[0] = sensor_bus_get(hal, SFH7770_PS_DATA_LED1);
		break;

	case 2:
		prox_data[1] = sensor_bus_get(hal, SFH7770_PS_DATA_LED2);
		break;
     ad2:	41 c0       	rjmp	.+130    	; 0xb56 <sfh7770_calibrate+0xfe>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     ad4:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	ae 01       	movw	r20, r28
     adc:	4c 5f       	subi	r20, 0xFC	; 252
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	61 e9       	ldi	r22, 0x91	; 145
     ae2:	8e 2d       	mov	r24, r14
     ae4:	9f 2d       	mov	r25, r15
     ae6:	90 d6       	rcall	.+3360   	; 0x1808 <bus_read>

	return data;
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04

	case 3:
		prox_data[2] = sensor_bus_get(hal, SFH7770_PS_DATA_LED3);
     aea:	80 93 4f 22 	sts	0x224F, r24

		/* Write data */
		nvram_write((SFH7770_NVRAM_OFFSET), prox_data,
     aee:	43 e0       	ldi	r20, 0x03	; 3
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	6d e4       	ldi	r22, 0x4D	; 77
     af4:	72 e2       	ldi	r23, 0x22	; 34
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	04 d7       	rcall	.+3592   	; 0x1904 <nvram_write>
				sizeof(prox_data));

		/* Read back data and confirm it was written correctly */
		nvram_read(SFH7770_NVRAM_OFFSET, read_data, sizeof(read_data));
     afc:	43 e0       	ldi	r20, 0x03	; 3
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	88 e1       	ldi	r24, 0x18	; 24
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0c d7       	rcall	.+3608   	; 0x1924 <nvram_read>

		if (memcmp(prox_data, read_data, sizeof(prox_data))) {
     b0c:	43 e0       	ldi	r20, 0x03	; 3
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	be 01       	movw	r22, r28
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	8d e4       	ldi	r24, 0x4D	; 77
     b18:	92 e2       	ldi	r25, 0x22	; 34
     b1a:	0e 94 2b 19 	call	0x3256	; 0x3256 <memcmp>
     b1e:	28 2f       	mov	r18, r24
     b20:	39 2f       	mov	r19, r25
     b22:	23 2b       	or	r18, r19
     b24:	39 f0       	breq	.+14     	; 0xb34 <sfh7770_calibrate+0xdc>
			sensor->err = SENSOR_ERR_IO;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	f8 01       	movw	r30, r16
     b2c:	87 83       	std	Z+7, r24	; 0x07
     b2e:	90 87       	std	Z+8, r25	; 0x08
			return false;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	11 c0       	rjmp	.+34     	; 0xb56 <sfh7770_calibrate+0xfe>
		}

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
     b34:	23 e0       	ldi	r18, 0x03	; 3
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	ae 01       	movw	r20, r28
     b3a:	4f 5f       	subi	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	63 e9       	ldi	r22, 0x93	; 147
     b40:	8e 2d       	mov	r24, r14
     b42:	9f 2d       	mov	r25, r15
     b44:	a0 d6       	rcall	.+3392   	; 0x1886 <bus_write>
	default:
		sensor->err = SENSOR_ERR_PARAMS;
		return false;
	}

	return true;
     b46:	81 e0       	ldi	r24, 0x01	; 1

		/* Apply stored proximity thresholds from nvram */
		sensor_bus_write(hal, (SFH7770_PS_THR_LED1), read_data,
				sizeof(read_data));

		break;
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <sfh7770_calibrate+0xfe>

	/* Any other step number is invalid */
	default:
		sensor->err = SENSOR_ERR_PARAMS;
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	f8 01       	movw	r30, r16
     b50:	87 83       	std	Z+7, r24	; 0x07
     b52:	90 87       	std	Z+8, r25	; 0x08
		return false;
     b54:	80 e0       	ldi	r24, 0x00	; 0
	}

	return true;
}
     b56:	24 96       	adiw	r28, 0x04	; 4
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	08 95       	ret

00000b6a <sfh7770_ioctl>:
 * @param  cmd   Command to execute
 * @param  arg   Argument for command (varies)
 * @return bool  true if the call succeeds, else false is returned.
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2d 97       	sbiw	r28, 0x0d	; 13
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	fc 01       	movw	r30, r24
     b86:	8a 01       	movw	r16, r20
	sensor_hal_t *const hal = sensor->hal;
     b88:	d0 80       	ld	r13, Z
     b8a:	c1 80       	ldd	r12, Z+1	; 0x01

	bool status = false;

	switch (cmd) {
     b8c:	66 31       	cpi	r22, 0x16	; 22
     b8e:	09 f4       	brne	.+2      	; 0xb92 <sfh7770_ioctl+0x28>
     b90:	14 c1       	rjmp	.+552    	; 0xdba <sfh7770_ioctl+0x250>
     b92:	48 f4       	brcc	.+18     	; 0xba6 <sfh7770_ioctl+0x3c>
     b94:	60 31       	cpi	r22, 0x10	; 16
     b96:	89 f0       	breq	.+34     	; 0xbba <sfh7770_ioctl+0x50>
     b98:	64 31       	cpi	r22, 0x14	; 20
     b9a:	09 f4       	brne	.+2      	; 0xb9e <sfh7770_ioctl+0x34>
     b9c:	6f c1       	rjmp	.+734    	; 0xe7c <sfh7770_ioctl+0x312>
     b9e:	6e 30       	cpi	r22, 0x0E	; 14
     ba0:	09 f0       	breq	.+2      	; 0xba4 <sfh7770_ioctl+0x3a>
     ba2:	f6 c1       	rjmp	.+1004   	; 0xf90 <sfh7770_ioctl+0x426>
     ba4:	cc c0       	rjmp	.+408    	; 0xd3e <sfh7770_ioctl+0x1d4>
     ba6:	6a 31       	cpi	r22, 0x1A	; 26
     ba8:	09 f4       	brne	.+2      	; 0xbac <sfh7770_ioctl+0x42>
     baa:	47 c0       	rjmp	.+142    	; 0xc3a <sfh7770_ioctl+0xd0>
     bac:	6b 31       	cpi	r22, 0x1B	; 27
     bae:	09 f4       	brne	.+2      	; 0xbb2 <sfh7770_ioctl+0x48>
     bb0:	4d c0       	rjmp	.+154    	; 0xc4c <sfh7770_ioctl+0xe2>
     bb2:	67 31       	cpi	r22, 0x17	; 23
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <sfh7770_ioctl+0x4e>
     bb6:	ec c1       	rjmp	.+984    	; 0xf90 <sfh7770_ioctl+0x426>
     bb8:	52 c0       	rjmp	.+164    	; 0xc5e <sfh7770_ioctl+0xf4>
	case SENSOR_SET_STATE:
		status
			= sfh7770_set_state(hal, sensor->type,
     bba:	84 81       	ldd	r24, Z+4	; 0x04
     bbc:	95 81       	ldd	r25, Z+5	; 0x05
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_state(sensor_hal_t *hal, sensor_type_t type,
		sensor_state_t state)
{
	switch (state) {
     bbe:	da 01       	movw	r26, r20
     bc0:	2c 91       	ld	r18, X
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	e1 f0       	breq	.+56     	; 0xbfe <sfh7770_ioctl+0x94>
     bc6:	22 30       	cpi	r18, 0x02	; 2
     bc8:	b1 f5       	brne	.+108    	; 0xc36 <sfh7770_ioctl+0xcc>
	case SENSOR_STATE_SLEEP:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     bca:	80 97       	sbiw	r24, 0x20	; 32
     bcc:	61 f4       	brne	.+24     	; 0xbe6 <sfh7770_ioctl+0x7c>
     bce:	1d 86       	std	Y+13, r1	; 0x0d
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	ae 01       	movw	r20, r28
     bd6:	43 5f       	subi	r20, 0xF3	; 243
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	60 e8       	ldi	r22, 0x80	; 128
     bdc:	8d 2d       	mov	r24, r13
     bde:	9c 2d       	mov	r25, r12
     be0:	52 d6       	rcall	.+3236   	; 0x1886 <bus_write>

	default:
		return false;
	}

	return true;
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	de c1       	rjmp	.+956    	; 0xfa2 <sfh7770_ioctl+0x438>
     be6:	1c 86       	std	Y+12, r1	; 0x0c
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	ae 01       	movw	r20, r28
     bee:	44 5f       	subi	r20, 0xF4	; 244
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	61 e8       	ldi	r22, 0x81	; 129
     bf4:	8d 2d       	mov	r24, r13
     bf6:	9c 2d       	mov	r25, r12
     bf8:	46 d6       	rcall	.+3212   	; 0x1886 <bus_write>
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	d2 c1       	rjmp	.+932    	; 0xfa2 <sfh7770_ioctl+0x438>
		}

		break;

	case SENSOR_STATE_NORMAL:
		if (type == SENSOR_TYPE_LIGHT) { /* if light */
     bfe:	80 97       	sbiw	r24, 0x20	; 32
     c00:	69 f4       	brne	.+26     	; 0xc1c <sfh7770_ioctl+0xb2>
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8b 87       	std	Y+11, r24	; 0x0b
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	ae 01       	movw	r20, r28
     c0c:	45 5f       	subi	r20, 0xF5	; 245
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	60 e8       	ldi	r22, 0x80	; 128
     c12:	8d 2d       	mov	r24, r13
     c14:	9c 2d       	mov	r25, r12
     c16:	37 d6       	rcall	.+3182   	; 0x1886 <bus_write>

	default:
		return false;
	}

	return true;
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	c3 c1       	rjmp	.+902    	; 0xfa2 <sfh7770_ioctl+0x438>
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	8a 87       	std	Y+10, r24	; 0x0a
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	ae 01       	movw	r20, r28
     c26:	46 5f       	subi	r20, 0xF6	; 246
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	61 e8       	ldi	r22, 0x81	; 129
     c2c:	8d 2d       	mov	r24, r13
     c2e:	9c 2d       	mov	r25, r12
     c30:	2a d6       	rcall	.+3156   	; 0x1886 <bus_write>
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	b6 c1       	rjmp	.+876    	; 0xfa2 <sfh7770_ioctl+0x438>
		}

		break;

	default:
		return false;
     c36:	60 e0       	ldi	r22, 0x00	; 0
	switch (cmd) {
	case SENSOR_SET_STATE:
		status
			= sfh7770_set_state(hal, sensor->type,
				*((sensor_state_t *)arg));
		break;
     c38:	b4 c1       	rjmp	.+872    	; 0xfa2 <sfh7770_ioctl+0x438>

	case SENSOR_ENABLE_EVENT:
		status
			= sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     c3a:	da 01       	movw	r26, r20
     c3c:	6d 91       	ld	r22, X+
     c3e:	7c 91       	ld	r23, X
     c40:	21 e0       	ldi	r18, 0x01	; 1
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	77 de       	rcall	.-786    	; 0x936 <sfh7770_event>
     c48:	68 2f       	mov	r22, r24
				true);
		break;
     c4a:	ab c1       	rjmp	.+854    	; 0xfa2 <sfh7770_ioctl+0x438>

	case SENSOR_DISABLE_EVENT:
		status = sfh7770_event(sensor, *((sensor_event_t *)arg), 0,
     c4c:	da 01       	movw	r26, r20
     c4e:	6d 91       	ld	r22, X+
     c50:	7c 91       	ld	r23, X
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	6e de       	rcall	.-804    	; 0x936 <sfh7770_event>
     c5a:	68 2f       	mov	r22, r24
				false);
		break;
     c5c:	a2 c1       	rjmp	.+836    	; 0xfa2 <sfh7770_ioctl+0x438>

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
     c5e:	81 85       	ldd	r24, Z+9	; 0x09
     c60:	92 85       	ldd	r25, Z+10	; 0x0a
	}
	reg_thresh;

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;
     c62:	fa 01       	movw	r30, r20
     c64:	31 81       	ldd	r19, Z+1	; 0x01
     c66:	42 81       	ldd	r20, Z+2	; 0x02
     c68:	3b 83       	std	Y+3, r19	; 0x03

	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     c6a:	20 81       	ld	r18, Z
     c6c:	29 30       	cpi	r18, 0x09	; 9
     c6e:	09 f4       	brne	.+2      	; 0xc72 <sfh7770_ioctl+0x108>
     c70:	4d c0       	rjmp	.+154    	; 0xd0c <sfh7770_ioctl+0x1a2>
     c72:	2a 30       	cpi	r18, 0x0A	; 10
     c74:	21 f0       	breq	.+8      	; 0xc7e <sfh7770_ioctl+0x114>
     c76:	28 30       	cpi	r18, 0x08	; 8
     c78:	09 f0       	breq	.+2      	; 0xc7c <sfh7770_ioctl+0x112>
     c7a:	5d c0       	rjmp	.+186    	; 0xd36 <sfh7770_ioctl+0x1cc>
     c7c:	32 c0       	rjmp	.+100    	; 0xce2 <sfh7770_ioctl+0x178>
		                                 **/

		/* Write to sensor register based on current channel (LED
		 * selection)
		 */
		switch (channel) {
     c7e:	8f 3f       	cpi	r24, 0xFF	; 255
     c80:	ff ef       	ldi	r31, 0xFF	; 255
     c82:	9f 07       	cpc	r25, r31
     c84:	61 f0       	breq	.+24     	; 0xc9e <sfh7770_ioctl+0x134>
     c86:	0c f4       	brge	.+2      	; 0xc8a <sfh7770_ioctl+0x120>
     c88:	58 c0       	rjmp	.+176    	; 0xd3a <sfh7770_ioctl+0x1d0>
     c8a:	9c 01       	movw	r18, r24
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	31 09       	sbc	r19, r1
     c90:	23 30       	cpi	r18, 0x03	; 3
     c92:	31 05       	cpc	r19, r1
     c94:	08 f0       	brcs	.+2      	; 0xc98 <sfh7770_ioctl+0x12e>
     c96:	51 c0       	rjmp	.+162    	; 0xd3a <sfh7770_ioctl+0x1d0>

		case 1:
		case 2:
		case 3:
			led_count = 1;
			index = channel - 1;
     c98:	81 50       	subi	r24, 0x01	; 1

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <sfh7770_ioctl+0x138>
     c9e:	92 e0       	ldi	r25, 0x02	; 2
		 * selection)
		 */
		switch (channel) {
		case SENSOR_CHANNEL_ALL:    /* "channel -1" = all 3 LEDs */
			led_count = 3;
			index = 0;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	f8 2e       	mov	r15, r24
 * @param  hal   Address of an initialized sensor hardware descriptor.
 * @param  cmd   Command to execute
 * @param  arg   Argument for command (varies)
 * @return bool  true if the call succeeds, else false is returned.
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
     ca4:	89 0f       	add	r24, r25
     ca6:	e8 2e       	mov	r14, r24
     ca8:	e3 94       	inc	r14
		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
			sensor_bus_put(hal, (SFH7770_PS_THR_LED1 + index),
     caa:	d8 01       	movw	r26, r16
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	9c 91       	ld	r25, X
     cb0:	99 87       	std	Y+9, r25	; 0x09
 * @param  hal   Address of an initialized sensor hardware descriptor.
 * @param  cmd   Command to execute
 * @param  arg   Argument for command (varies)
 * @return bool  true if the call succeeds, else false is returned.
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
     cb2:	6f 2d       	mov	r22, r15
     cb4:	6d 56       	subi	r22, 0x6D	; 109
     cb6:	21 e0       	ldi	r18, 0x01	; 1
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	ae 01       	movw	r20, r28
     cbc:	47 5f       	subi	r20, 0xF7	; 247
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	8d 2d       	mov	r24, r13
     cc2:	9c 2d       	mov	r25, r12
     cc4:	e0 d5       	rcall	.+3008   	; 0x1886 <bus_write>
		while (led_count--) {
			sensor_bus_put(hal, (SFH7770_PS_THR_LED1 + index),
					(uint8_t)threshold->value);

			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
     cc6:	8f 2d       	mov	r24, r15
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	be 01       	movw	r22, r28
     cd0:	6d 5f       	subi	r22, 0xFD	; 253
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	48 96       	adiw	r24, 0x18	; 24
     cd6:	16 d6       	rcall	.+3116   	; 0x1904 <nvram_write>
			++index;
     cd8:	f3 94       	inc	r15

		default:
			return false;   /* invalid channel selection */
		}

		while (led_count--) {
     cda:	fe 10       	cpse	r15, r14
     cdc:	e6 cf       	rjmp	.-52     	; 0xcaa <sfh7770_ioctl+0x140>
			/* Write to nvram */
			nvram_write((SFH7770_NVRAM_OFFSET + index), &value, 1);
			++index;
		}

		result = true;
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	60 c1       	rjmp	.+704    	; 0xfa2 <sfh7770_ioctl+0x438>
		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:         /* lower light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     ce2:	39 83       	std	Y+1, r19	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     ce4:	4a 83       	std	Y+2, r20	; 0x02
		low_light_threshold = (uint16_t)threshold->value;
     ce6:	30 93 4b 22 	sts	0x224B, r19
     cea:	40 93 4c 22 	sts	0x224C, r20
		if (sensor_bus_write(hal, SFH7770_ALS_LO_THR_LSB, &reg_thresh,
     cee:	22 e0       	ldi	r18, 0x02	; 2
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	ae 01       	movw	r20, r28
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	68 e9       	ldi	r22, 0x98	; 152
     cfa:	8d 2d       	mov	r24, r13
     cfc:	9c 2d       	mov	r25, r12
     cfe:	c3 d5       	rcall	.+2950   	; 0x1886 <bus_write>
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	02 97       	sbiw	r24, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <sfh7770_ioctl+0x19e>
     d06:	4d c1       	rjmp	.+666    	; 0xfa2 <sfh7770_ioctl+0x438>
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	4b c1       	rjmp	.+662    	; 0xfa2 <sfh7770_ioctl+0x438>

		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT:        /* upper light level threshold
		                                  **/
		reg_thresh.lsb = (uint8_t)(threshold->value & 0xFF);
     d0c:	39 83       	std	Y+1, r19	; 0x01
		reg_thresh.msb = (uint8_t)((threshold->value >> 8) & 0xFF);
     d0e:	4a 83       	std	Y+2, r20	; 0x02
		high_light_threshold = (uint16_t)threshold->value;
     d10:	30 93 49 22 	sts	0x2249, r19
     d14:	40 93 4a 22 	sts	0x224A, r20
		if (sensor_bus_write(hal, SFH7770_ALS_UP_THR_LSB, &reg_thresh,
     d18:	22 e0       	ldi	r18, 0x02	; 2
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	ae 01       	movw	r20, r28
     d1e:	4f 5f       	subi	r20, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	66 e9       	ldi	r22, 0x96	; 150
     d24:	8d 2d       	mov	r24, r13
     d26:	9c 2d       	mov	r25, r12
     d28:	ae d5       	rcall	.+2908   	; 0x1886 <bus_write>
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	02 97       	sbiw	r24, 0x02	; 2
     d2e:	09 f4       	brne	.+2      	; 0xd32 <sfh7770_ioctl+0x1c8>
     d30:	38 c1       	rjmp	.+624    	; 0xfa2 <sfh7770_ioctl+0x438>
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	36 c1       	rjmp	.+620    	; 0xfa2 <sfh7770_ioctl+0x438>

	uint8_t led_count = 0;
	uint8_t index;
	uint8_t value = threshold->value;

	bool result = false;
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	34 c1       	rjmp	.+616    	; 0xfa2 <sfh7770_ioctl+0x438>
			led_count = 1;
			index = channel - 1;
			break;

		default:
			return false;   /* invalid channel selection */
     d3a:	60 e0       	ldi	r22, 0x00	; 0
		break;

	case SENSOR_SET_THRESHOLD:
		status = sfh7770_set_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;
     d3c:	32 c1       	rjmp	.+612    	; 0xfa2 <sfh7770_ioctl+0x438>

	case SENSOR_GET_THRESHOLD:
		status = sfh7770_get_threshold(hal, sensor->channel,
     d3e:	61 85       	ldd	r22, Z+9	; 0x09
     d40:	72 85       	ldd	r23, Z+10	; 0x0a
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;

	switch (threshold->type) {  /* check threshold type */
     d42:	fa 01       	movw	r30, r20
     d44:	80 81       	ld	r24, Z
     d46:	89 30       	cpi	r24, 0x09	; 9
     d48:	61 f1       	breq	.+88     	; 0xda2 <sfh7770_ioctl+0x238>
     d4a:	8a 30       	cpi	r24, 0x0A	; 10
     d4c:	19 f0       	breq	.+6      	; 0xd54 <sfh7770_ioctl+0x1ea>
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	81 f5       	brne	.+96     	; 0xdb2 <sfh7770_ioctl+0x248>
     d52:	1e c0       	rjmp	.+60     	; 0xd90 <sfh7770_ioctl+0x226>
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
     d54:	6f 3f       	cpi	r22, 0xFF	; 255
     d56:	ff ef       	ldi	r31, 0xFF	; 255
     d58:	7f 07       	cpc	r23, r31
     d5a:	29 f0       	breq	.+10     	; 0xd66 <sfh7770_ioctl+0x1fc>
			/* if "all channels", just use chan #1 value */
			channel = 1;
		}

		if ((channel >= 1) && (channel <= 3)) {
     d5c:	cb 01       	movw	r24, r22
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	03 97       	sbiw	r24, 0x03	; 3
     d62:	48 f5       	brcc	.+82     	; 0xdb6 <sfh7770_ioctl+0x24c>
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <sfh7770_ioctl+0x200>

	switch (threshold->type) {  /* check threshold type */
	case SENSOR_THRESHOLD_NEAR_PROXIMITY: /* proximity threshold */
		if (channel == SENSOR_CHANNEL_ALL) {
			/* if "all channels", just use chan #1 value */
			channel = 1;
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	70 e0       	ldi	r23, 0x00	; 0
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     d6a:	1b 82       	std	Y+3, r1	; 0x03
		}

		if ((channel >= 1) && (channel <= 3)) {
			/* Read corresponding register for LED channel */
			threshold->value = (uint16_t)sensor_bus_get(hal,
     d6c:	6e 56       	subi	r22, 0x6E	; 110
	bus_read(bus, addr, &data, sizeof(uint8_t));
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	ae 01       	movw	r20, r28
     d74:	4d 5f       	subi	r20, 0xFD	; 253
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	8d 2d       	mov	r24, r13
     d7a:	9c 2d       	mov	r25, r12
     d7c:	45 d5       	rcall	.+2698   	; 0x1808 <bus_read>

	return data;
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	d8 01       	movw	r26, r16
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	8c 93       	st	X, r24
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	1c 92       	st	X, r1
					(SFH7770_PS_THR_LED1 + channel - 1));
			result = true;
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	09 c1       	rjmp	.+530    	; 0xfa2 <sfh7770_ioctl+0x438>
		}

		break;

	case SENSOR_THRESHOLD_LOW_LIGHT:  /* low light level threshold */
		threshold->value = low_light_threshold;
     d90:	80 91 4b 22 	lds	r24, 0x224B
     d94:	90 91 4c 22 	lds	r25, 0x224C
     d98:	fa 01       	movw	r30, r20
     d9a:	81 83       	std	Z+1, r24	; 0x01
     d9c:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	00 c1       	rjmp	.+512    	; 0xfa2 <sfh7770_ioctl+0x438>
		break;

	case SENSOR_THRESHOLD_HIGH_LIGHT: /* high light level threshold */
		threshold->value = high_light_threshold;
     da2:	80 91 49 22 	lds	r24, 0x2249
     da6:	90 91 4a 22 	lds	r25, 0x224A
     daa:	81 83       	std	Z+1, r24	; 0x01
     dac:	92 83       	std	Z+2, r25	; 0x02
		result = true;
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	f8 c0       	rjmp	.+496    	; 0xfa2 <sfh7770_ioctl+0x438>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_get_threshold(sensor_hal_t *hal, int16_t channel,
		sensor_threshold_desc_t *threshold)
{
	bool result = false;
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	f6 c0       	rjmp	.+492    	; 0xfa2 <sfh7770_ioctl+0x438>
     db6:	60 e0       	ldi	r22, 0x00	; 0
		break;

	case SENSOR_GET_THRESHOLD:
		status = sfh7770_get_threshold(hal, sensor->channel,
				(sensor_threshold_desc_t *)arg);
		break;
     db8:	f4 c0       	rjmp	.+488    	; 0xfa2 <sfh7770_ioctl+0x438>

	case SENSOR_SET_SAMPLE_RATE:
		status
			= sfh7770_set_rate(hal, sensor->type,
     dba:	da 01       	movw	r26, r20
     dbc:	0d 91       	ld	r16, X+
     dbe:	1c 91       	ld	r17, X
     dc0:	e4 80       	ldd	r14, Z+4	; 0x04
     dc2:	f5 80       	ldd	r15, Z+5	; 0x05
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
     dc4:	e5 fe       	sbrs	r14, 5
     dc6:	2a c0       	rjmp	.+84     	; 0xe1c <sfh7770_ioctl+0x2b2>
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
			if (light_rate_table[i].rate == rate_hz) {
     dc8:	01 15       	cp	r16, r1
     dca:	11 05       	cpc	r17, r1
     dcc:	51 f0       	breq	.+20     	; 0xde2 <sfh7770_ioctl+0x278>
     dce:	ee e8       	ldi	r30, 0x8E	; 142
     dd0:	f0 e2       	ldi	r31, 0x20	; 32
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
			if (light_rate_table[i].rate == rate_hz) {
     dd6:	20 81       	ld	r18, Z
     dd8:	31 81       	ldd	r19, Z+1	; 0x01
     dda:	02 17       	cp	r16, r18
     ddc:	13 07       	cpc	r17, r19
     dde:	c1 f4       	brne	.+48     	; 0xe10 <sfh7770_ioctl+0x2a6>
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <sfh7770_ioctl+0x27c>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
				sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
     de6:	fc 01       	movw	r30, r24
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	8e 0f       	add	r24, r30
     dee:	9f 1f       	adc	r25, r31
     df0:	fc 01       	movw	r30, r24
     df2:	e5 57       	subi	r30, 0x75	; 117
     df4:	ff 4d       	sbci	r31, 0xDF	; 223
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	88 87       	std	Y+8, r24	; 0x08
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	ae 01       	movw	r20, r28
     e00:	48 5f       	subi	r20, 0xF8	; 248
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	66 e8       	ldi	r22, 0x86	; 134
     e06:	8d 2d       	mov	r24, r13
     e08:	9c 2d       	mov	r25, r12
     e0a:	3d d5       	rcall	.+2682   	; 0x1886 <bus_write>
						light_rate_table[i].reg_val);
				status = true;
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <sfh7770_ioctl+0x2b4>
		uint16_t rate_hz)
{
	bool status = false;

	if (type & SENSOR_TYPE_LIGHT) {
		for (int i = 0; i < NUM_LIGHT_RATES; ++i) {
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	33 96       	adiw	r30, 0x03	; 3
     e14:	85 30       	cpi	r24, 0x05	; 5
     e16:	91 05       	cpc	r25, r1
     e18:	f1 f6       	brne	.-68     	; 0xdd6 <sfh7770_ioctl+0x26c>
     e1a:	c0 c0       	rjmp	.+384    	; 0xf9c <sfh7770_ioctl+0x432>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     e1c:	60 e0       	ldi	r22, 0x00	; 0
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     e1e:	f0 fe       	sbrs	r15, 0
     e20:	c0 c0       	rjmp	.+384    	; 0xfa2 <sfh7770_ioctl+0x438>
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
			if (prox_rate_table[i].rate == rate_hz) {
     e22:	01 15       	cp	r16, r1
     e24:	11 05       	cpc	r17, r1
     e26:	11 f4       	brne	.+4      	; 0xe2c <sfh7770_ioctl+0x2c2>
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <sfh7770_ioctl+0x2d6>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	ed e9       	ldi	r30, 0x9D	; 157
     e2e:	f0 e2       	ldi	r31, 0x20	; 32
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	30 e0       	ldi	r19, 0x00	; 0
			if (prox_rate_table[i].rate == rate_hz) {
     e34:	40 81       	ld	r20, Z
     e36:	51 81       	ldd	r21, Z+1	; 0x01
     e38:	04 17       	cp	r16, r20
     e3a:	15 07       	cpc	r17, r21
     e3c:	c1 f4       	brne	.+48     	; 0xe6e <sfh7770_ioctl+0x304>
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <sfh7770_ioctl+0x2da>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
				sensor_bus_put(hal, SFH7770_PS_INTERVAL,
     e44:	f9 01       	movw	r30, r18
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	2e 0f       	add	r18, r30
     e4c:	3f 1f       	adc	r19, r31
     e4e:	f9 01       	movw	r30, r18
     e50:	e6 56       	subi	r30, 0x66	; 102
     e52:	ff 4d       	sbci	r31, 0xDF	; 223
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	ae 01       	movw	r20, r28
     e5e:	49 5f       	subi	r20, 0xF9	; 249
     e60:	5f 4f       	sbci	r21, 0xFF	; 255
     e62:	65 e8       	ldi	r22, 0x85	; 133
     e64:	8d 2d       	mov	r24, r13
     e66:	9c 2d       	mov	r25, r12
     e68:	0e d5       	rcall	.+2588   	; 0x1886 <bus_write>
						prox_rate_table[i].reg_val);
				status = true;
     e6a:	61 e0       	ldi	r22, 0x01	; 1
     e6c:	9a c0       	rjmp	.+308    	; 0xfa2 <sfh7770_ioctl+0x438>
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
		for (int i = 0; i < NUM_PROX_RATES; ++i) {
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	33 96       	adiw	r30, 0x03	; 3
     e74:	2a 30       	cpi	r18, 0x0A	; 10
     e76:	31 05       	cpc	r19, r1
     e78:	e9 f6       	brne	.-70     	; 0xe34 <sfh7770_ioctl+0x2ca>
     e7a:	93 c0       	rjmp	.+294    	; 0xfa2 <sfh7770_ioctl+0x438>
			= sfh7770_set_rate(hal, sensor->type,
				*((uint16_t *)arg));
		break;

	case SENSOR_SET_CURRENT:
		status = sfh7770_set_current(hal, sensor->channel,
     e7c:	e1 84       	ldd	r14, Z+9	; 0x09
     e7e:	f2 84       	ldd	r15, Z+10	; 0x0a

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
		if (current_table[i].level == *level_mA) {
     e80:	fa 01       	movw	r30, r20
     e82:	40 81       	ld	r20, Z
     e84:	51 81       	ldd	r21, Z+1	; 0x01
     e86:	45 30       	cpi	r20, 0x05	; 5
     e88:	51 05       	cpc	r21, r1
     e8a:	51 f0       	breq	.+20     	; 0xea0 <sfh7770_ioctl+0x336>
     e8c:	eb eb       	ldi	r30, 0xBB	; 187
     e8e:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	30 e0       	ldi	r19, 0x00	; 0
		if (current_table[i].level == *level_mA) {
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	84 17       	cp	r24, r20
     e9a:	95 07       	cpc	r25, r21
     e9c:	89 f4       	brne	.+34     	; 0xec0 <sfh7770_ioctl+0x356>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <sfh7770_ioctl+0x33a>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
		if (current_table[i].level == *level_mA) {
			curr_setting = current_table[i].field_val;
     ea4:	f9 01       	movw	r30, r18
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	2e 0f       	add	r18, r30
     eac:	3f 1f       	adc	r19, r31
     eae:	f9 01       	movw	r30, r18
     eb0:	e8 54       	subi	r30, 0x48	; 72
     eb2:	ff 4d       	sbci	r31, 0xDF	; 223
     eb4:	12 81       	ldd	r17, Z+2	; 0x02
	}

	if (status == true) {   /* if entry was found in table */
		uint8_t reg_val;

		if (channel == SENSOR_CHANNEL_ALL) {
     eb6:	ff ef       	ldi	r31, 0xFF	; 255
     eb8:	ef 16       	cp	r14, r31
     eba:	ff 06       	cpc	r15, r31
     ebc:	89 f5       	brne	.+98     	; 0xf20 <sfh7770_ioctl+0x3b6>
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <sfh7770_ioctl+0x366>
	uint8_t curr_setting;

	bool status = false;

	/* Find current level in table */
	for (int i = 0; i < NUM_CURRENT_LEVELS; ++i) {
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	33 96       	adiw	r30, 0x03	; 3
     ec6:	27 30       	cpi	r18, 0x07	; 7
     ec8:	31 05       	cpc	r19, r1
     eca:	21 f7       	brne	.-56     	; 0xe94 <sfh7770_ioctl+0x32a>
static bool sfh7770_set_current(sensor_hal_t *hal, int16_t channel,
		uint16_t *level_mA)
{
	uint8_t curr_setting;

	bool status = false;
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	69 c0       	rjmp	.+210    	; 0xfa2 <sfh7770_ioctl+0x438>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     ed0:	1b 82       	std	Y+3, r1	; 0x03
	bus_read(bus, addr, &data, sizeof(uint8_t));
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	ae 01       	movw	r20, r28
     ed8:	4d 5f       	subi	r20, 0xFD	; 253
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	62 e8       	ldi	r22, 0x82	; 130
     ede:	8d 2d       	mov	r24, r13
     ee0:	9c 2d       	mov	r25, r12
     ee2:	92 d4       	rcall	.+2340   	; 0x1808 <bus_read>

	return data;
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
	if (status == true) {   /* if entry was found in table */
		uint8_t reg_val;

		if (channel == SENSOR_CHANNEL_ALL) {
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			reg_val &= ~(I_LED1_MASK | I_LED2_MASK);
     ee6:	80 7c       	andi	r24, 0xC0	; 192
			reg_val
				|= (curr_setting |
     ee8:	81 2b       	or	r24, r17
					(curr_setting << I_LED2_SHIFT));
     eea:	91 2f       	mov	r25, r17
     eec:	99 0f       	add	r25, r25
     eee:	99 0f       	add	r25, r25
     ef0:	99 0f       	add	r25, r25

		if (channel == SENSOR_CHANNEL_ALL) {
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			reg_val &= ~(I_LED1_MASK | I_LED2_MASK);
			reg_val
				|= (curr_setting |
     ef2:	89 2b       	or	r24, r25
     ef4:	8e 83       	std	Y+6, r24	; 0x06
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	ae 01       	movw	r20, r28
     efc:	4a 5f       	subi	r20, 0xFA	; 250
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	62 e8       	ldi	r22, 0x82	; 130
     f02:	8d 2d       	mov	r24, r13
     f04:	9c 2d       	mov	r25, r12
     f06:	bf d4       	rcall	.+2430   	; 0x1886 <bus_write>
     f08:	1d 83       	std	Y+5, r17	; 0x05
     f0a:	21 e0       	ldi	r18, 0x01	; 1
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	ae 01       	movw	r20, r28
     f10:	4b 5f       	subi	r20, 0xFB	; 251
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	63 e8       	ldi	r22, 0x83	; 131
     f16:	8d 2d       	mov	r24, r13
     f18:	9c 2d       	mov	r25, r12
     f1a:	b5 d4       	rcall	.+2410   	; 0x1886 <bus_write>
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	41 c0       	rjmp	.+130    	; 0xfa2 <sfh7770_ioctl+0x438>
					(curr_setting << I_LED2_SHIFT));
			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else if ((channel == 1) || (channel == 2)) {
     f20:	c7 01       	movw	r24, r14
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	02 97       	sbiw	r24, 0x02	; 2
     f26:	10 f5       	brcc	.+68     	; 0xf6c <sfh7770_ioctl+0x402>
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     f28:	1b 82       	std	Y+3, r1	; 0x03
	bus_read(bus, addr, &data, sizeof(uint8_t));
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	ae 01       	movw	r20, r28
     f30:	4d 5f       	subi	r20, 0xFD	; 253
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	62 e8       	ldi	r22, 0x82	; 130
     f36:	8d 2d       	mov	r24, r13
     f38:	9c 2d       	mov	r25, r12
     f3a:	66 d4       	rcall	.+2252   	; 0x1808 <bus_read>

	return data;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			if (channel == 1) {
     f3e:	ea 94       	dec	r14
     f40:	ef 28       	or	r14, r15
     f42:	19 f4       	brne	.+6      	; 0xf4a <sfh7770_ioctl+0x3e0>
				reg_val &= ~I_LED1_MASK;
     f44:	88 7f       	andi	r24, 0xF8	; 248
				reg_val |= curr_setting;
     f46:	18 2b       	or	r17, r24
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <sfh7770_ioctl+0x3ea>
			} else {
				reg_val &= ~I_LED2_MASK;
				reg_val |= (curr_setting << I_LED2_SHIFT);
     f4a:	11 0f       	add	r17, r17
     f4c:	11 0f       	add	r17, r17
     f4e:	11 0f       	add	r17, r17
			reg_val = sensor_bus_get(hal, SFH7770_I_LED_1_2);
			if (channel == 1) {
				reg_val &= ~I_LED1_MASK;
				reg_val |= curr_setting;
			} else {
				reg_val &= ~I_LED2_MASK;
     f50:	87 7c       	andi	r24, 0xC7	; 199
				reg_val |= (curr_setting << I_LED2_SHIFT);
     f52:	18 2b       	or	r17, r24
     f54:	1c 83       	std	Y+4, r17	; 0x04
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	ae 01       	movw	r20, r28
     f5c:	4c 5f       	subi	r20, 0xFC	; 252
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	62 e8       	ldi	r22, 0x82	; 130
     f62:	8d 2d       	mov	r24, r13
     f64:	9c 2d       	mov	r25, r12
     f66:	8f d4       	rcall	.+2334   	; 0x1886 <bus_write>
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	1b c0       	rjmp	.+54     	; 0xfa2 <sfh7770_ioctl+0x438>
			}

			sensor_bus_put(hal, SFH7770_I_LED_1_2, reg_val);
		} else if (channel == 3) {
     f6c:	83 e0       	ldi	r24, 0x03	; 3
     f6e:	e8 16       	cp	r14, r24
     f70:	f1 04       	cpc	r15, r1
     f72:	61 f4       	brne	.+24     	; 0xf8c <sfh7770_ioctl+0x422>
     f74:	1b 83       	std	Y+3, r17	; 0x03
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	ae 01       	movw	r20, r28
     f7c:	4d 5f       	subi	r20, 0xFD	; 253
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	63 e8       	ldi	r22, 0x83	; 131
     f82:	8d 2d       	mov	r24, r13
     f84:	9c 2d       	mov	r25, r12
     f86:	7f d4       	rcall	.+2302   	; 0x1886 <bus_write>
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	0b c0       	rjmp	.+22     	; 0xfa2 <sfh7770_ioctl+0x438>
			sensor_bus_put(hal, SFH7770_I_LED_3, curr_setting);
		} else {        /* invalid channel selected */
			status = false;
     f8c:	60 e0       	ldi	r22, 0x00	; 0
		break;

	case SENSOR_SET_CURRENT:
		status = sfh7770_set_current(hal, sensor->channel,
				(uint16_t *)arg);
		break;
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <sfh7770_ioctl+0x438>

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e8       	ldi	r25, 0x80	; 128
     f94:	87 83       	std	Z+7, r24	; 0x07
     f96:	90 87       	std	Z+8, r25	; 0x08
 */
static bool sfh7770_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	sensor_hal_t *const hal = sensor->hal;

	bool status = false;
     f98:	60 e0       	ldi	r22, 0x00	; 0
				(uint16_t *)arg);
		break;

	default:
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <sfh7770_ioctl+0x438>
				break;
			}
		}
	}

	if (type & SENSOR_TYPE_PROXIMITY) {
     f9c:	f0 fc       	sbrc	r15, 0
     f9e:	45 cf       	rjmp	.-374    	; 0xe2a <sfh7770_ioctl+0x2c0>
 * @return bool     true if the call succeeds, else false is returned.
 */
static bool sfh7770_set_rate(sensor_hal_t *hal, sensor_type_t type,
		uint16_t rate_hz)
{
	bool status = false;
     fa0:	60 e0       	ldi	r22, 0x00	; 0
		sensor->err = SENSOR_ERR_UNSUPPORTED;
		break;
	}

	return status;
}
     fa2:	86 2f       	mov	r24, r22
     fa4:	2d 96       	adiw	r28, 0x0d	; 13
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <sfh7770_init>:
 * @param sensor    Address of a sensor device descriptor.
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	2b 97       	sbiw	r28, 0x0b	; 11
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	7c 01       	movw	r14, r24
	bool status = false;
	sensor_hal_t *const hal = sensor->hal;
     fd8:	fc 01       	movw	r30, r24
     fda:	00 81       	ld	r16, Z
     fdc:	11 81       	ldd	r17, Z+1	; 0x01
		uint8_t ps_thr_led2;
		uint8_t ps_thr_led3;
	} prox_thresholds;

	/* Read and check part ID register */
	uint8_t part_id = sensor_bus_get(hal, SFH7770_PART_ID);
     fde:	c0 2e       	mov	r12, r16
     fe0:	d1 2e       	mov	r13, r17
 * \return A value fetched from the device.  This value is
 *         undefined in the event of an I/O error.
 */
static inline uint8_t bus_get(bus_desc_t *bus, uint8_t addr)
{
	uint8_t data = 0;
     fe2:	1c 82       	std	Y+4, r1	; 0x04
	bus_read(bus, addr, &data, sizeof(uint8_t));
     fe4:	21 e0       	ldi	r18, 0x01	; 1
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	ae 01       	movw	r20, r28
     fea:	4c 5f       	subi	r20, 0xFC	; 252
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	6a e8       	ldi	r22, 0x8A	; 138
     ff0:	80 2f       	mov	r24, r16
     ff2:	91 2f       	mov	r25, r17
     ff4:	09 d4       	rcall	.+2066   	; 0x1808 <bus_read>

	return data;
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04

	if (part_id == (SFH7770_PART_ID_VAL | SFH7770_PART_REV_VAL)) {
     ff8:	24 39       	cpi	r18, 0x94	; 148
     ffa:	09 f0       	breq	.+2      	; 0xffe <sfh7770_init+0x42>
     ffc:	97 c0       	rjmp	.+302    	; 0x112c <sfh7770_init+0x170>
			.caps.units          = SENSOR_UNITS_lux,
			.caps.scale          = SENSOR_SCALE_one,
			.caps.name = "SFH7770 Ambient Light & Proximity Sensor"
		};

		sensor->drv = &sfh7770_device;
     ffe:	22 e7       	ldi	r18, 0x72	; 114
    1000:	30 e2       	ldi	r19, 0x20	; 32
    1002:	f7 01       	movw	r30, r14
    1004:	22 83       	std	Z+2, r18	; 0x02
    1006:	33 83       	std	Z+3, r19	; 0x03

		hal->resolution = SFH7770_DATA_RESOLUTION;
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f8 01       	movw	r30, r16
    100e:	26 8f       	std	Z+30, r18	; 0x1e
    1010:	37 8f       	std	Z+31, r19	; 0x1f

		/* Set the device burst read starting register address. */
		hal->burst_addr = SFH7770_ALS_DATA_LSB;
    1012:	8c e8       	ldi	r24, 0x8C	; 140
    1014:	87 83       	std	Z+7, r24	; 0x07

		/* Reset device during first init call */
		if (!sfh7770_initialized) {
    1016:	80 91 48 22 	lds	r24, 0x2248
    101a:	81 11       	cpse	r24, r1
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <sfh7770_init+0x78>
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	8b 87       	std	Y+11, r24	; 0x0b
 *
 * \return  Nothing
 */
static inline void bus_put(bus_desc_t *bus, uint8_t addr, uint8_t data)
{
	bus_write(bus, addr, &data, sizeof(uint8_t));
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	ae 01       	movw	r20, r28
    1028:	45 5f       	subi	r20, 0xF5	; 245
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	60 e8       	ldi	r22, 0x80	; 128
    102e:	80 2f       	mov	r24, r16
    1030:	91 2f       	mov	r25, r17
    1032:	29 d4       	rcall	.+2130   	; 0x1886 <bus_write>
					ALS_CONTROL_SW_RESET);
		}

		/* Init light sensor functions if specified */

		if (sensor->type & SENSOR_TYPE_LIGHT) {
    1034:	f7 01       	movw	r30, r14
    1036:	84 81       	ldd	r24, Z+4	; 0x04
    1038:	85 ff       	sbrs	r24, 5
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <sfh7770_init+0xac>
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	8a 87       	std	Y+10, r24	; 0x0a
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	ae 01       	movw	r20, r28
    1046:	46 5f       	subi	r20, 0xF6	; 246
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	60 e8       	ldi	r22, 0x80	; 128
    104c:	8c 2d       	mov	r24, r12
    104e:	9d 2d       	mov	r25, r13
    1050:	1a d4       	rcall	.+2100   	; 0x1886 <bus_write>
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	89 87       	std	Y+9, r24	; 0x09
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	ae 01       	movw	r20, r28
    105c:	47 5f       	subi	r20, 0xF7	; 247
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	66 e8       	ldi	r22, 0x86	; 134
    1062:	8c 2d       	mov	r24, r12
    1064:	9d 2d       	mov	r25, r13
    1066:	0f d4       	rcall	.+2078   	; 0x1886 <bus_write>
			sensor_bus_put(hal, SFH7770_ALS_INTERVAL,
					ALS_INTERVAL_500MS);
		}

		/* Init proximity sensor functions if specified */
		if (sensor->type & SENSOR_TYPE_PROXIMITY) {
    1068:	f7 01       	movw	r30, r14
    106a:	24 81       	ldd	r18, Z+4	; 0x04
    106c:	35 81       	ldd	r19, Z+5	; 0x05
    106e:	30 ff       	sbrs	r19, 0
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <sfh7770_init+0x134>
    1072:	0f 2e       	mov	r0, r31
    1074:	f3 e0       	ldi	r31, 0x03	; 3
    1076:	ff 2e       	mov	r15, r31
    1078:	f0 2d       	mov	r31, r0
    107a:	f8 86       	std	Y+8, r15	; 0x08
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	ae 01       	movw	r20, r28
    1082:	48 5f       	subi	r20, 0xF8	; 248
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	61 e8       	ldi	r22, 0x81	; 129
    1088:	8c 2d       	mov	r24, r12
    108a:	9d 2d       	mov	r25, r13
    108c:	fc d3       	rcall	.+2040   	; 0x1886 <bus_write>
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	8f 83       	std	Y+7, r24	; 0x07
    1092:	21 e0       	ldi	r18, 0x01	; 1
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	ae 01       	movw	r20, r28
    1098:	49 5f       	subi	r20, 0xF9	; 249
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	65 e8       	ldi	r22, 0x85	; 133
    109e:	8c 2d       	mov	r24, r12
    10a0:	9d 2d       	mov	r25, r13
    10a2:	f1 d3       	rcall	.+2018   	; 0x1886 <bus_write>
    10a4:	8b ed       	ldi	r24, 0xDB	; 219
    10a6:	8e 83       	std	Y+6, r24	; 0x06
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ae 01       	movw	r20, r28
    10ae:	4a 5f       	subi	r20, 0xFA	; 250
    10b0:	5f 4f       	sbci	r21, 0xFF	; 255
    10b2:	62 e8       	ldi	r22, 0x82	; 130
    10b4:	8c 2d       	mov	r24, r12
    10b6:	9d 2d       	mov	r25, r13
    10b8:	e6 d3       	rcall	.+1996   	; 0x1886 <bus_write>
    10ba:	fd 82       	std	Y+5, r15	; 0x05
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	ae 01       	movw	r20, r28
    10c2:	4b 5f       	subi	r20, 0xFB	; 251
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	63 e8       	ldi	r22, 0x83	; 131
    10c8:	8c 2d       	mov	r24, r12
    10ca:	9d 2d       	mov	r25, r13
    10cc:	dc d3       	rcall	.+1976   	; 0x1886 <bus_write>
					I_LED2_SHIFT) | led1_curr));

			sensor_bus_put(hal, SFH7770_I_LED_3, led3_curr);

			/* Apply stored proximity thresholds from nvram */
			nvram_read(SFH7770_NVRAM_OFFSET, &prox_thresholds,
    10ce:	43 e0       	ldi	r20, 0x03	; 3
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	be 01       	movw	r22, r28
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	88 e1       	ldi	r24, 0x18	; 24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	23 d4       	rcall	.+2118   	; 0x1924 <nvram_read>
					sizeof(prox_thresholds));

			sensor_bus_write(hal, (SFH7770_PS_THR_LED1),
    10de:	23 e0       	ldi	r18, 0x03	; 3
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	ae 01       	movw	r20, r28
    10e4:	4f 5f       	subi	r20, 0xFF	; 255
    10e6:	5f 4f       	sbci	r21, 0xFF	; 255
    10e8:	63 e9       	ldi	r22, 0x93	; 147
    10ea:	8c 2d       	mov	r24, r12
    10ec:	9d 2d       	mov	r25, r13
    10ee:	cb d3       	rcall	.+1942   	; 0x1886 <bus_write>
					&prox_thresholds,
					sizeof(prox_thresholds));
		}

		if (!sfh7770_initialized) {
    10f0:	80 91 48 22 	lds	r24, 0x2248
    10f4:	81 11       	cpse	r24, r1
    10f6:	16 c0       	rjmp	.+44     	; 0x1124 <sfh7770_init+0x168>
    10f8:	1c 82       	std	Y+4, r1	; 0x04
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	ae 01       	movw	r20, r28
    1100:	4c 5f       	subi	r20, 0xFC	; 252
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	62 e9       	ldi	r22, 0x92	; 146
    1106:	8c 2d       	mov	r24, r12
    1108:	9d 2d       	mov	r25, r13
    110a:	bd d3       	rcall	.+1914   	; 0x1886 <bus_write>
			 * latched).
			 */
			sensor_bus_put(hal, SFH7770_INT_SET, 0);

			/* Set up interrupt handler */
			if (STATUS_OK == hal->bus.status) {
    110c:	f8 01       	movw	r30, r16
    110e:	85 81       	ldd	r24, Z+5	; 0x05
    1110:	81 11       	cpse	r24, r1
    1112:	08 c0       	rjmp	.+16     	; 0x1124 <sfh7770_init+0x168>
				sensor_irq_connect(hal->mcu_sigint, sfh7770_isr, hal);
    1114:	60 85       	ldd	r22, Z+8	; 0x08
    1116:	71 85       	ldd	r23, Z+9	; 0x09
    1118:	82 85       	ldd	r24, Z+10	; 0x0a
    111a:	93 85       	ldd	r25, Z+11	; 0x0b
    111c:	98 01       	movw	r18, r16
    111e:	43 ef       	ldi	r20, 0xF3	; 243
    1120:	52 e0       	ldi	r21, 0x02	; 2
    1122:	1a d4       	rcall	.+2100   	; 0x1958 <sensor_irq_connect>
			}
		}

		sfh7770_initialized = true;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 48 22 	sts	0x2248, r24
    112a:	01 c0       	rjmp	.+2      	; 0x112e <sfh7770_init+0x172>
 * @param resvd     Reserved value.
 * @return bool     true if the call succeeds, else false is returned.
 */
bool sfh7770_init(sensor_t *sensor, int resvd)
{
	bool status = false;
    112c:	80 e0       	ldi	r24, 0x00	; 0
		sfh7770_initialized = true;
		status = true;
	}

	return status;
}
    112e:	2b 96       	adiw	r28, 0x0b	; 11
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	08 95       	ret

00001146 <default_event_handler>:

	threshold.type = type;
	threshold.value = value;

	return SENSOR_DRV_CALL(sensor, ioctl, SENSOR_SET_THRESHOLD, &threshold);
}
    1146:	08 95       	ret

00001148 <sensor_attach>:
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	ec 01       	movw	r28, r24
    115a:	8b 01       	movw	r16, r22
    115c:	6a 01       	movw	r12, r20
    115e:	79 01       	movw	r14, r18
    1160:	cb 01       	movw	r24, r22
    1162:	05 d4       	rcall	.+2058   	; 0x196e <sensor_find>
    1164:	88 83       	st	Y, r24
    1166:	99 83       	std	Y+1, r25	; 0x01
    1168:	0c 83       	std	Y+4, r16	; 0x04
    116a:	1d 83       	std	Y+5, r17	; 0x05
    116c:	eb 86       	std	Y+11, r14	; 0x0b
    116e:	fc 86       	std	Y+12, r15	; 0x0c
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	79 f0       	breq	.+30     	; 0x1192 <sensor_attach+0x4a>
    1174:	dc 01       	movw	r26, r24
    1176:	90 96       	adiw	r26, 0x20	; 32
    1178:	ed 91       	ld	r30, X+
    117a:	fc 91       	ld	r31, X
    117c:	91 97       	sbiw	r26, 0x21	; 33
    117e:	b6 01       	movw	r22, r12
    1180:	ce 01       	movw	r24, r28
    1182:	19 95       	eicall
    1184:	88 23       	and	r24, r24
    1186:	29 f0       	breq	.+10     	; 0x1192 <sensor_attach+0x4a>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	8e 83       	std	Y+6, r24	; 0x06
    118c:	1f 82       	std	Y+7, r1	; 0x07
    118e:	18 86       	std	Y+8, r1	; 0x08
    1190:	05 c0       	rjmp	.+10     	; 0x119c <sensor_attach+0x54>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	8f 83       	std	Y+7, r24	; 0x07
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	08 95       	ret

000011ae <sensor_read>:
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	ea 01       	movw	r28, r20
    11b6:	dc 01       	movw	r26, r24
    11b8:	12 96       	adiw	r26, 0x02	; 2
    11ba:	ed 91       	ld	r30, X+
    11bc:	fc 91       	ld	r31, X
    11be:	13 97       	sbiw	r26, 0x03	; 3
    11c0:	01 90       	ld	r0, Z+
    11c2:	f0 81       	ld	r31, Z
    11c4:	e0 2d       	mov	r30, r0
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	29 f0       	breq	.+10     	; 0x11d4 <sensor_read+0x26>
    11ca:	19 95       	eicall
    11cc:	18 2f       	mov	r17, r24
    11ce:	81 11       	cpse	r24, r1
    11d0:	08 c0       	rjmp	.+16     	; 0x11e2 <sensor_read+0x34>
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <sensor_read+0x3e>
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	32 e8       	ldi	r19, 0x82	; 130
    11d8:	fc 01       	movw	r30, r24
    11da:	27 83       	std	Z+7, r18	; 0x07
    11dc:	30 87       	std	Z+8, r19	; 0x08
    11de:	10 e0       	ldi	r17, 0x00	; 0
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <sensor_read+0x3e>
    11e2:	b6 d3       	rcall	.+1900   	; 0x1950 <sensor_timestamp>
    11e4:	6c 87       	std	Y+12, r22	; 0x0c
    11e6:	7d 87       	std	Y+13, r23	; 0x0d
    11e8:	8e 87       	std	Y+14, r24	; 0x0e
    11ea:	9f 87       	std	Y+15, r25	; 0x0f
    11ec:	81 2f       	mov	r24, r17
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	08 95       	ret

000011f6 <sensor_calibrate>:
    11f6:	dc 01       	movw	r26, r24
    11f8:	12 96       	adiw	r26, 0x02	; 2
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	13 97       	sbiw	r26, 0x03	; 3
    1200:	06 80       	ldd	r0, Z+6	; 0x06
    1202:	f7 81       	ldd	r31, Z+7	; 0x07
    1204:	e0 2d       	mov	r30, r0
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	11 f0       	breq	.+4      	; 0x120e <sensor_calibrate+0x18>
    120a:	19 95       	eicall
    120c:	08 95       	ret
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	32 e8       	ldi	r19, 0x82	; 130
    1212:	fc 01       	movw	r30, r24
    1214:	27 83       	std	Z+7, r18	; 0x07
    1216:	30 87       	std	Z+8, r19	; 0x08
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	08 95       	ret

0000121c <sensor_get_threshold>:
 * @param   value      Address of location to return threshold value
 * @return  bool       true if the call succeeds, else false is returned.
 */
bool sensor_get_threshold
	(sensor_t *sensor, sensor_threshold_t type, int16_t *value)
{
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <sensor_get_threshold+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 01       	movw	r16, r20
	sensor_threshold_desc_t threshold;
	bool status = false;

	threshold.type = type;
    122c:	69 83       	std	Y+1, r22	; 0x01

	if (SENSOR_DRV_CALL(sensor, ioctl, SENSOR_GET_THRESHOLD, &threshold)) {
    122e:	dc 01       	movw	r26, r24
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	13 97       	sbiw	r26, 0x03	; 3
    1238:	02 80       	ldd	r0, Z+2	; 0x02
    123a:	f3 81       	ldd	r31, Z+3	; 0x03
    123c:	e0 2d       	mov	r30, r0
    123e:	30 97       	sbiw	r30, 0x00	; 0
    1240:	41 f0       	breq	.+16     	; 0x1252 <sensor_get_threshold+0x36>
    1242:	ae 01       	movw	r20, r28
    1244:	4f 5f       	subi	r20, 0xFF	; 255
    1246:	5f 4f       	sbci	r21, 0xFF	; 255
    1248:	6e e0       	ldi	r22, 0x0E	; 14
    124a:	19 95       	eicall
    124c:	81 11       	cpse	r24, r1
    124e:	08 c0       	rjmp	.+16     	; 0x1260 <sensor_get_threshold+0x44>
    1250:	0d c0       	rjmp	.+26     	; 0x126c <sensor_get_threshold+0x50>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	32 e8       	ldi	r19, 0x82	; 130
    1256:	fc 01       	movw	r30, r24
    1258:	27 83       	std	Z+7, r18	; 0x07
    125a:	30 87       	std	Z+8, r19	; 0x08
 */
bool sensor_get_threshold
	(sensor_t *sensor, sensor_threshold_t type, int16_t *value)
{
	sensor_threshold_desc_t threshold;
	bool status = false;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	06 c0       	rjmp	.+12     	; 0x126c <sensor_get_threshold+0x50>

	threshold.type = type;

	if (SENSOR_DRV_CALL(sensor, ioctl, SENSOR_GET_THRESHOLD, &threshold)) {
		*value = threshold.value;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	d8 01       	movw	r26, r16
    1266:	8d 93       	st	X+, r24
    1268:	9c 93       	st	X, r25
		status = true;
    126a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return status;
}
    126c:	23 96       	adiw	r28, 0x03	; 3
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <sensor_ioctl>:
 * @param   cmd     Specifies the IOCTL command.
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	1f 92       	push	r1
    128a:	1f 92       	push	r1
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	8c 01       	movw	r16, r24
	bool result = false;

	switch (cmd) {
    1292:	6d 30       	cpi	r22, 0x0D	; 13
    1294:	09 f4       	brne	.+2      	; 0x1298 <sensor_ioctl+0x1c>
    1296:	c9 c0       	rjmp	.+402    	; 0x142a <sensor_ioctl+0x1ae>
    1298:	30 f4       	brcc	.+12     	; 0x12a6 <sensor_ioctl+0x2a>
    129a:	69 30       	cpi	r22, 0x09	; 9
    129c:	71 f0       	breq	.+28     	; 0x12ba <sensor_ioctl+0x3e>
    129e:	6a 30       	cpi	r22, 0x0A	; 10
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <sensor_ioctl+0x28>
    12a2:	fc c0       	rjmp	.+504    	; 0x149c <sensor_ioctl+0x220>
    12a4:	66 c0       	rjmp	.+204    	; 0x1372 <sensor_ioctl+0xf6>
    12a6:	62 31       	cpi	r22, 0x12	; 18
    12a8:	09 f4       	brne	.+2      	; 0x12ac <sensor_ioctl+0x30>
    12aa:	6d c0       	rjmp	.+218    	; 0x1386 <sensor_ioctl+0x10a>
    12ac:	66 31       	cpi	r22, 0x16	; 22
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <sensor_ioctl+0x36>
    12b0:	c6 c0       	rjmp	.+396    	; 0x143e <sensor_ioctl+0x1c2>
    12b2:	61 31       	cpi	r22, 0x11	; 17
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <sensor_ioctl+0x3c>
    12b6:	f2 c0       	rjmp	.+484    	; 0x149c <sensor_ioctl+0x220>
    12b8:	0a c0       	rjmp	.+20     	; 0x12ce <sensor_ioctl+0x52>
	case SENSOR_GET_RANGE:
		*((int16_t *)arg) = sensor->hal->range;
    12ba:	dc 01       	movw	r26, r24
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	80 8d       	ldd	r24, Z+24	; 0x18
    12c2:	91 8d       	ldd	r25, Z+25	; 0x19
    12c4:	fa 01       	movw	r30, r20
    12c6:	80 83       	st	Z, r24
    12c8:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
		break;
    12cc:	fc c0       	rjmp	.+504    	; 0x14c6 <sensor_ioctl+0x24a>

	case SENSOR_SET_RANGE:
	{
		int16_t const range = *(int16_t *)arg;
    12ce:	da 01       	movw	r26, r20
    12d0:	ed 90       	ld	r14, X+
    12d2:	fc 90       	ld	r15, X

		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
    12d4:	fc 01       	movw	r30, r24
    12d6:	a2 81       	ldd	r26, Z+2	; 0x02
    12d8:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
    12da:	a6 3f       	cpi	r26, 0xF6	; 246
    12dc:	ff ef       	ldi	r31, 0xFF	; 255
    12de:	bf 07       	cpc	r27, r31
    12e0:	e9 f1       	breq	.+122    	; 0x135c <sensor_ioctl+0xe0>
    12e2:	51 96       	adiw	r26, 0x11	; 17
    12e4:	ed 91       	ld	r30, X+
    12e6:	fc 91       	ld	r31, X
    12e8:	52 97       	sbiw	r26, 0x12	; 18
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	c9 f1       	breq	.+114    	; 0x1360 <sensor_ioctl+0xe4>
		for (int i = 0; i < caps->range_count; ++i) {
    12ee:	1d 96       	adiw	r26, 0x0d	; 13
    12f0:	4d 91       	ld	r20, X+
    12f2:	5c 91       	ld	r21, X
    12f4:	1e 97       	sbiw	r26, 0x0e	; 14
    12f6:	41 15       	cp	r20, r1
    12f8:	51 05       	cpc	r21, r1
    12fa:	a1 f1       	breq	.+104    	; 0x1364 <sensor_ioctl+0xe8>
			if (caps->range_table[i].range_units == range) {
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	e8 16       	cp	r14, r24
    1302:	f9 06       	cpc	r15, r25
    1304:	a1 f4       	brne	.+40     	; 0x132e <sensor_ioctl+0xb2>
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <sensor_ioctl+0x9a>
    1308:	33 96       	adiw	r30, 0x03	; 3
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	e8 16       	cp	r14, r24
    1310:	f9 06       	cpc	r15, r25
    1312:	79 f4       	brne	.+30     	; 0x1332 <sensor_ioctl+0xb6>
    1314:	02 c0       	rjmp	.+4      	; 0x131a <sensor_ioctl+0x9e>
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
				*index = i;
    131a:	29 83       	std	Y+1, r18	; 0x01
    131c:	3a 83       	std	Y+2, r19	; 0x02
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	ed 91       	ld	r30, X+
    1322:	fc 91       	ld	r31, X
    1324:	13 97       	sbiw	r26, 0x03	; 3
    1326:	30 97       	sbiw	r30, 0x00	; 0
    1328:	59 f4       	brne	.+22     	; 0x1340 <sensor_ioctl+0xc4>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	1c c0       	rjmp	.+56     	; 0x1366 <sensor_ioctl+0xea>
 * @param   sensor  The address of an initialized sensor descriptor.
 * @param   cmd     Specifies the IOCTL command.
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
		for (int i = 0; i < caps->range_count; ++i) {
    1332:	2f 5f       	subi	r18, 0xFF	; 255
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	24 17       	cp	r18, r20
    1338:	35 07       	cpc	r19, r21
    133a:	31 f7       	brne	.-52     	; 0x1308 <sensor_ioctl+0x8c>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <sensor_ioctl+0xea>
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    1340:	ae 01       	movw	r20, r28
    1342:	4f 5f       	subi	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	61 e1       	ldi	r22, 0x11	; 17
    1348:	c8 01       	movw	r24, r16
    134a:	19 95       	eicall
		int index;
		result
			= sensor_range_index(&(sensor->drv->caps), range,
				&index);

		if (result &&
    134c:	88 23       	and	r24, r24
    134e:	59 f0       	breq	.+22     	; 0x1366 <sensor_ioctl+0xea>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->range = range;
    1350:	d8 01       	movw	r26, r16
    1352:	ed 91       	ld	r30, X+
    1354:	fc 91       	ld	r31, X
    1356:	e0 8e       	std	Z+24, r14	; 0x18
    1358:	f1 8e       	std	Z+25, r15	; 0x19
    135a:	b5 c0       	rjmp	.+362    	; 0x14c6 <sensor_ioctl+0x24a>
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_range_index
	(const sensor_caps_t *caps, int16_t range, int *index)
{
	if (caps && caps->range_table) {
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <sensor_ioctl+0xea>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <sensor_ioctl+0xea>
		for (int i = 0; i < caps->range_count; ++i) {
    1364:	80 e0       	ldi	r24, 0x00	; 0
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->range = range;
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    1366:	20 e2       	ldi	r18, 0x20	; 32
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	f8 01       	movw	r30, r16
    136c:	27 83       	std	Z+7, r18	; 0x07
    136e:	30 87       	std	Z+8, r19	; 0x08
    1370:	aa c0       	rjmp	.+340    	; 0x14c6 <sensor_ioctl+0x24a>

		break;
	}

	case SENSOR_GET_BANDWIDTH:
		*((int16_t *)arg) = sensor->hal->bandwidth;
    1372:	dc 01       	movw	r26, r24
    1374:	ed 91       	ld	r30, X+
    1376:	fc 91       	ld	r31, X
    1378:	82 8d       	ldd	r24, Z+26	; 0x1a
    137a:	93 8d       	ldd	r25, Z+27	; 0x1b
    137c:	fa 01       	movw	r30, r20
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    1382:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1384:	a0 c0       	rjmp	.+320    	; 0x14c6 <sensor_ioctl+0x24a>

	case SENSOR_SET_BANDWIDTH:
	{
		int16_t const bandwidth_Hz = *(int16_t *)arg;
    1386:	da 01       	movw	r26, r20
    1388:	ed 90       	ld	r14, X+
    138a:	fc 90       	ld	r15, X

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
    138c:	fc 01       	movw	r30, r24
    138e:	a2 81       	ldd	r26, Z+2	; 0x02
    1390:	b3 81       	ldd	r27, Z+3	; 0x03
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
    1392:	a6 3f       	cpi	r26, 0xF6	; 246
    1394:	ff ef       	ldi	r31, 0xFF	; 255
    1396:	bf 07       	cpc	r27, r31
    1398:	e9 f1       	breq	.+122    	; 0x1414 <sensor_ioctl+0x198>
    139a:	53 96       	adiw	r26, 0x13	; 19
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	54 97       	sbiw	r26, 0x14	; 20
    13a2:	30 97       	sbiw	r30, 0x00	; 0
    13a4:	c9 f1       	breq	.+114    	; 0x1418 <sensor_ioctl+0x19c>
		for (int i = 0; i < caps->band_count; ++i) {
    13a6:	1f 96       	adiw	r26, 0x0f	; 15
    13a8:	4d 91       	ld	r20, X+
    13aa:	5c 91       	ld	r21, X
    13ac:	50 97       	sbiw	r26, 0x10	; 16
    13ae:	41 15       	cp	r20, r1
    13b0:	51 05       	cpc	r21, r1
    13b2:	a1 f1       	breq	.+104    	; 0x141c <sensor_ioctl+0x1a0>
			if (caps->band_table[i].bandwidth_Hz == band) {
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	e8 16       	cp	r14, r24
    13ba:	f9 06       	cpc	r15, r25
    13bc:	a1 f4       	brne	.+40     	; 0x13e6 <sensor_ioctl+0x16a>
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <sensor_ioctl+0x152>
    13c0:	33 96       	adiw	r30, 0x03	; 3
    13c2:	80 81       	ld	r24, Z
    13c4:	91 81       	ldd	r25, Z+1	; 0x01
    13c6:	e8 16       	cp	r14, r24
    13c8:	f9 06       	cpc	r15, r25
    13ca:	79 f4       	brne	.+30     	; 0x13ea <sensor_ioctl+0x16e>
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <sensor_ioctl+0x156>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
				*index = i;
    13d2:	29 83       	std	Y+1, r18	; 0x01
    13d4:	3a 83       	std	Y+2, r19	; 0x02
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	ed 91       	ld	r30, X+
    13da:	fc 91       	ld	r31, X
    13dc:	13 97       	sbiw	r26, 0x03	; 3
    13de:	30 97       	sbiw	r30, 0x00	; 0
    13e0:	59 f4       	brne	.+22     	; 0x13f8 <sensor_ioctl+0x17c>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	1c c0       	rjmp	.+56     	; 0x141e <sensor_ioctl+0x1a2>
 * @param   sensor  The address of an initialized sensor descriptor.
 * @param   cmd     Specifies the IOCTL command.
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
		for (int i = 0; i < caps->band_count; ++i) {
    13ea:	2f 5f       	subi	r18, 0xFF	; 255
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	24 17       	cp	r18, r20
    13f0:	35 07       	cpc	r19, r21
    13f2:	31 f7       	brne	.-52     	; 0x13c0 <sensor_ioctl+0x144>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <sensor_ioctl+0x1a2>
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
    13f8:	ae 01       	movw	r20, r28
    13fa:	4f 5f       	subi	r20, 0xFF	; 255
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	62 e1       	ldi	r22, 0x12	; 18
    1400:	c8 01       	movw	r24, r16
    1402:	19 95       	eicall

		int index;
		result = sensor_band_index(&(sensor->drv->caps), bandwidth_Hz,
				&index);

		if (result &&
    1404:	88 23       	and	r24, r24
    1406:	59 f0       	breq	.+22     	; 0x141e <sensor_ioctl+0x1a2>
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->bandwidth = bandwidth_Hz;
    1408:	d8 01       	movw	r26, r16
    140a:	ed 91       	ld	r30, X+
    140c:	fc 91       	ld	r31, X
    140e:	e2 8e       	std	Z+26, r14	; 0x1a
    1410:	f3 8e       	std	Z+27, r15	; 0x1b
    1412:	59 c0       	rjmp	.+178    	; 0x14c6 <sensor_ioctl+0x24a>
 * @return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_band_index
	(const sensor_caps_t *caps, int16_t band, int *index)
{
	if (caps && caps->band_table) {
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	03 c0       	rjmp	.+6      	; 0x141e <sensor_ioctl+0x1a2>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	01 c0       	rjmp	.+2      	; 0x141e <sensor_ioctl+0x1a2>
		for (int i = 0; i < caps->band_count; ++i) {
    141c:	80 e0       	ldi	r24, 0x00	; 0
				(result
					= SENSOR_DRV_CALL(sensor, ioctl, cmd,
						&index))) {
			sensor->hal->bandwidth = bandwidth_Hz;
		} else {
			sensor->err = SENSOR_ERR_PARAMS;
    141e:	20 e2       	ldi	r18, 0x20	; 32
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	f8 01       	movw	r30, r16
    1424:	27 83       	std	Z+7, r18	; 0x07
    1426:	30 87       	std	Z+8, r19	; 0x08
    1428:	4e c0       	rjmp	.+156    	; 0x14c6 <sensor_ioctl+0x24a>

		break;
	}

	case SENSOR_GET_SAMPLE_RATE:
		*((int16_t *)arg) = sensor->hal->sample_rate;
    142a:	dc 01       	movw	r26, r24
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	84 8d       	ldd	r24, Z+28	; 0x1c
    1432:	95 8d       	ldd	r25, Z+29	; 0x1d
    1434:	fa 01       	movw	r30, r20
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
		result = true;
    143a:	81 e0       	ldi	r24, 0x01	; 1
		break;
    143c:	44 c0       	rjmp	.+136    	; 0x14c6 <sensor_ioctl+0x24a>

	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;
    143e:	da 01       	movw	r26, r20
    1440:	ed 90       	ld	r14, X+
    1442:	fc 90       	ld	r15, X

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
    1444:	dc 01       	movw	r26, r24
    1446:	12 96       	adiw	r26, 0x02	; 2
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	13 97       	sbiw	r26, 0x03	; 3
    144e:	02 80       	ldd	r0, Z+2	; 0x02
    1450:	f3 81       	ldd	r31, Z+3	; 0x03
    1452:	e0 2d       	mov	r30, r0
    1454:	30 97       	sbiw	r30, 0x00	; 0
    1456:	29 f0       	breq	.+10     	; 0x1462 <sensor_ioctl+0x1e6>
    1458:	66 e1       	ldi	r22, 0x16	; 22
    145a:	19 95       	eicall
    145c:	81 11       	cpse	r24, r1
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <sensor_ioctl+0x1f4>
    1460:	0e c0       	rjmp	.+28     	; 0x147e <sensor_ioctl+0x202>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	92 e8       	ldi	r25, 0x82	; 130
    1466:	f8 01       	movw	r30, r16
    1468:	87 83       	std	Z+7, r24	; 0x07
    146a:	90 87       	std	Z+8, r25	; 0x08
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	2b c0       	rjmp	.+86     	; 0x14c6 <sensor_ioctl+0x24a>
	case SENSOR_SET_SAMPLE_RATE:
	{
		int16_t const sample_Hz = *(int16_t *)arg;

		if (SENSOR_DRV_CALL(sensor, ioctl, cmd, arg)) {
			sensor->hal->sample_rate = sample_Hz;
    1470:	d8 01       	movw	r26, r16
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	e4 8e       	std	Z+28, r14	; 0x1c
    1478:	f5 8e       	std	Z+29, r15	; 0x1d
			result = true;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	24 c0       	rjmp	.+72     	; 0x14c6 <sensor_ioctl+0x24a>
		} else if (SENSOR_ERR_FUNCTION != sensor->err) {
    147e:	f8 01       	movw	r30, r16
    1480:	87 81       	ldd	r24, Z+7	; 0x07
    1482:	90 85       	ldd	r25, Z+8	; 0x08
    1484:	81 15       	cp	r24, r1
    1486:	92 48       	sbci	r25, 0x82	; 130
    1488:	e9 f0       	breq	.+58     	; 0x14c4 <sensor_ioctl+0x248>
			sensor->err = SENSOR_ERR_PARAMS;
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	d8 01       	movw	r26, r16
    1490:	17 96       	adiw	r26, 0x07	; 7
    1492:	8d 93       	st	X+, r24
    1494:	9c 93       	st	X, r25
    1496:	18 97       	sbiw	r26, 0x08	; 8
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	15 c0       	rjmp	.+42     	; 0x14c6 <sensor_ioctl+0x24a>

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    149c:	d8 01       	movw	r26, r16
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	13 97       	sbiw	r26, 0x03	; 3
    14a6:	02 80       	ldd	r0, Z+2	; 0x02
    14a8:	f3 81       	ldd	r31, Z+3	; 0x03
    14aa:	e0 2d       	mov	r30, r0
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <sensor_ioctl+0x23a>
    14b0:	c8 01       	movw	r24, r16
    14b2:	19 95       	eicall
    14b4:	08 c0       	rjmp	.+16     	; 0x14c6 <sensor_ioctl+0x24a>
 * @param  sensor   The address of an initialized sensor descriptor.
 * @return bool     Always returns \c false.
 */
static bool inline sensor_driver_unimpl(sensor_t *sensor)
{
	sensor->err = SENSOR_ERR_FUNCTION;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	92 e8       	ldi	r25, 0x82	; 130
    14ba:	f8 01       	movw	r30, r16
    14bc:	87 83       	std	Z+7, r24	; 0x07
    14be:	90 87       	std	Z+8, r25	; 0x08

		break;
	}

	default:
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <sensor_ioctl+0x24a>
 * @param   arg     Specifies command parameters (varies by command).
 * @return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_ioctl(sensor_t *sensor, sensor_command_t cmd, void *arg)
{
	bool result = false;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
		result = SENSOR_DRV_CALL(sensor, ioctl, cmd, arg);
		break;
	}

	return result;
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	08 95       	ret

000014d8 <bus_init>:
 */
uint8_t bus_reg_fieldget(bus_desc_t *bus, uint8_t addr, uint8_t mask)
{
	uint8_t const value = mask & bus_get(bus, addr);
	return (value / (mask & ~(mask << 1)));
}
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	29 97       	sbiw	r28, 0x09	; 9
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	8c 01       	movw	r16, r24
    14ec:	fe 01       	movw	r30, r28
    14ee:	31 96       	adiw	r30, 0x01	; 1
    14f0:	89 e0       	ldi	r24, 0x09	; 9
    14f2:	df 01       	movw	r26, r30
    14f4:	1d 92       	st	X+, r1
    14f6:	8a 95       	dec	r24
    14f8:	e9 f7       	brne	.-6      	; 0x14f4 <bus_init+0x1c>
    14fa:	49 83       	std	Y+1, r20	; 0x01
    14fc:	5a 83       	std	Y+2, r21	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
    1500:	7c 83       	std	Y+4, r23	; 0x04
    1502:	9a 01       	movw	r18, r20
    1504:	ab 01       	movw	r20, r22
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	44 1f       	adc	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	78 e4       	ldi	r23, 0x48	; 72
    1512:	88 ee       	ldi	r24, 0xE8	; 232
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 26 18 	call	0x304c	; 0x304c <__udivmodsi4>
    151a:	da 01       	movw	r26, r20
    151c:	c9 01       	movw	r24, r18
    151e:	05 97       	sbiw	r24, 0x05	; 5
    1520:	a1 09       	sbc	r26, r1
    1522:	b1 09       	sbc	r27, r1
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	af 83       	std	Y+7, r26	; 0x07
    152a:	b8 87       	std	Y+8, r27	; 0x08
    152c:	01 15       	cp	r16, r1
    152e:	11 05       	cpc	r17, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <bus_init+0x5c>
    1532:	59 c1       	rjmp	.+690    	; 0x17e6 <bus_init+0x30e>
    1534:	00 3c       	cpi	r16, 0xC0	; 192
    1536:	11 05       	cpc	r17, r1
    1538:	21 f4       	brne	.+8      	; 0x1542 <bus_init+0x6a>
    153a:	60 e1       	ldi	r22, 0x10	; 16
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	1f d8       	rcall	.-4034   	; 0x57e <sysclk_enable_module>
    1540:	52 c1       	rjmp	.+676    	; 0x17e6 <bus_init+0x30e>
    1542:	00 34       	cpi	r16, 0x40	; 64
    1544:	b4 e0       	ldi	r27, 0x04	; 4
    1546:	1b 07       	cpc	r17, r27
    1548:	21 f4       	brne	.+8      	; 0x1552 <bus_init+0x7a>
    154a:	68 e0       	ldi	r22, 0x08	; 8
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	17 d8       	rcall	.-4050   	; 0x57e <sysclk_enable_module>
    1550:	4a c1       	rjmp	.+660    	; 0x17e6 <bus_init+0x30e>
    1552:	01 15       	cp	r16, r1
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	18 07       	cpc	r17, r24
    1558:	21 f4       	brne	.+8      	; 0x1562 <bus_init+0x8a>
    155a:	64 e0       	ldi	r22, 0x04	; 4
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0f d8       	rcall	.-4066   	; 0x57e <sysclk_enable_module>
    1560:	42 c1       	rjmp	.+644    	; 0x17e6 <bus_init+0x30e>
    1562:	00 38       	cpi	r16, 0x80	; 128
    1564:	a1 e0       	ldi	r26, 0x01	; 1
    1566:	1a 07       	cpc	r17, r26
    1568:	21 f4       	brne	.+8      	; 0x1572 <bus_init+0x9a>
    156a:	62 e0       	ldi	r22, 0x02	; 2
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	07 d8       	rcall	.-4082   	; 0x57e <sysclk_enable_module>
    1570:	3a c1       	rjmp	.+628    	; 0x17e6 <bus_init+0x30e>
    1572:	01 15       	cp	r16, r1
    1574:	b1 e0       	ldi	r27, 0x01	; 1
    1576:	1b 07       	cpc	r17, r27
    1578:	29 f4       	brne	.+10     	; 0x1584 <bus_init+0xac>
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1582:	31 c1       	rjmp	.+610    	; 0x17e6 <bus_init+0x30e>
    1584:	00 38       	cpi	r16, 0x80	; 128
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	18 07       	cpc	r17, r24
    158a:	29 f4       	brne	.+10     	; 0x1596 <bus_init+0xbe>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1594:	28 c1       	rjmp	.+592    	; 0x17e6 <bus_init+0x30e>
    1596:	00 39       	cpi	r16, 0x90	; 144
    1598:	a3 e0       	ldi	r26, 0x03	; 3
    159a:	1a 07       	cpc	r17, r26
    159c:	29 f4       	brne	.+10     	; 0x15a8 <bus_init+0xd0>
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    15a6:	1f c1       	rjmp	.+574    	; 0x17e6 <bus_init+0x30e>
    15a8:	01 15       	cp	r16, r1
    15aa:	b2 e0       	ldi	r27, 0x02	; 2
    15ac:	1b 07       	cpc	r17, r27
    15ae:	29 f4       	brne	.+10     	; 0x15ba <bus_init+0xe2>
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    15b8:	16 c1       	rjmp	.+556    	; 0x17e6 <bus_init+0x30e>
    15ba:	00 34       	cpi	r16, 0x40	; 64
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	18 07       	cpc	r17, r24
    15c0:	29 f4       	brne	.+10     	; 0x15cc <bus_init+0xf4>
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    15ca:	0d c1       	rjmp	.+538    	; 0x17e6 <bus_init+0x30e>
    15cc:	01 15       	cp	r16, r1
    15ce:	a3 e0       	ldi	r26, 0x03	; 3
    15d0:	1a 07       	cpc	r17, r26
    15d2:	29 f4       	brne	.+10     	; 0x15de <bus_init+0x106>
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    15dc:	04 c1       	rjmp	.+520    	; 0x17e6 <bus_init+0x30e>
    15de:	00 32       	cpi	r16, 0x20	; 32
    15e0:	b3 e0       	ldi	r27, 0x03	; 3
    15e2:	1b 07       	cpc	r17, r27
    15e4:	29 f4       	brne	.+10     	; 0x15f0 <bus_init+0x118>
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    15ee:	fb c0       	rjmp	.+502    	; 0x17e6 <bus_init+0x30e>
    15f0:	01 15       	cp	r16, r1
    15f2:	88 e0       	ldi	r24, 0x08	; 8
    15f4:	18 07       	cpc	r17, r24
    15f6:	29 f4       	brne	.+10     	; 0x1602 <bus_init+0x12a>
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1600:	f2 c0       	rjmp	.+484    	; 0x17e6 <bus_init+0x30e>
    1602:	01 15       	cp	r16, r1
    1604:	a9 e0       	ldi	r26, 0x09	; 9
    1606:	1a 07       	cpc	r17, r26
    1608:	29 f4       	brne	.+10     	; 0x1614 <bus_init+0x13c>
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1612:	e9 c0       	rjmp	.+466    	; 0x17e6 <bus_init+0x30e>
    1614:	01 15       	cp	r16, r1
    1616:	ba e0       	ldi	r27, 0x0A	; 10
    1618:	1b 07       	cpc	r17, r27
    161a:	29 f4       	brne	.+10     	; 0x1626 <bus_init+0x14e>
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	85 e0       	ldi	r24, 0x05	; 5
    1620:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1624:	e0 c0       	rjmp	.+448    	; 0x17e6 <bus_init+0x30e>
    1626:	01 15       	cp	r16, r1
    1628:	8b e0       	ldi	r24, 0x0B	; 11
    162a:	18 07       	cpc	r17, r24
    162c:	29 f4       	brne	.+10     	; 0x1638 <bus_init+0x160>
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	86 e0       	ldi	r24, 0x06	; 6
    1632:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1636:	d7 c0       	rjmp	.+430    	; 0x17e6 <bus_init+0x30e>
    1638:	00 34       	cpi	r16, 0x40	; 64
    163a:	a8 e0       	ldi	r26, 0x08	; 8
    163c:	1a 07       	cpc	r17, r26
    163e:	29 f4       	brne	.+10     	; 0x164a <bus_init+0x172>
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1648:	ce c0       	rjmp	.+412    	; 0x17e6 <bus_init+0x30e>
    164a:	00 34       	cpi	r16, 0x40	; 64
    164c:	b9 e0       	ldi	r27, 0x09	; 9
    164e:	1b 07       	cpc	r17, r27
    1650:	29 f4       	brne	.+10     	; 0x165c <bus_init+0x184>
    1652:	62 e0       	ldi	r22, 0x02	; 2
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    165a:	c5 c0       	rjmp	.+394    	; 0x17e6 <bus_init+0x30e>
    165c:	00 34       	cpi	r16, 0x40	; 64
    165e:	8a e0       	ldi	r24, 0x0A	; 10
    1660:	18 07       	cpc	r17, r24
    1662:	29 f4       	brne	.+10     	; 0x166e <bus_init+0x196>
    1664:	62 e0       	ldi	r22, 0x02	; 2
    1666:	85 e0       	ldi	r24, 0x05	; 5
    1668:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    166c:	bc c0       	rjmp	.+376    	; 0x17e6 <bus_init+0x30e>
    166e:	00 34       	cpi	r16, 0x40	; 64
    1670:	ab e0       	ldi	r26, 0x0B	; 11
    1672:	1a 07       	cpc	r17, r26
    1674:	29 f4       	brne	.+10     	; 0x1680 <bus_init+0x1a8>
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	86 e0       	ldi	r24, 0x06	; 6
    167a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    167e:	b3 c0       	rjmp	.+358    	; 0x17e6 <bus_init+0x30e>
    1680:	00 39       	cpi	r16, 0x90	; 144
    1682:	b8 e0       	ldi	r27, 0x08	; 8
    1684:	1b 07       	cpc	r17, r27
    1686:	29 f4       	brne	.+10     	; 0x1692 <bus_init+0x1ba>
    1688:	64 e0       	ldi	r22, 0x04	; 4
    168a:	83 e0       	ldi	r24, 0x03	; 3
    168c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1690:	aa c0       	rjmp	.+340    	; 0x17e6 <bus_init+0x30e>
    1692:	00 39       	cpi	r16, 0x90	; 144
    1694:	89 e0       	ldi	r24, 0x09	; 9
    1696:	18 07       	cpc	r17, r24
    1698:	29 f4       	brne	.+10     	; 0x16a4 <bus_init+0x1cc>
    169a:	64 e0       	ldi	r22, 0x04	; 4
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16a2:	a1 c0       	rjmp	.+322    	; 0x17e6 <bus_init+0x30e>
    16a4:	00 39       	cpi	r16, 0x90	; 144
    16a6:	aa e0       	ldi	r26, 0x0A	; 10
    16a8:	1a 07       	cpc	r17, r26
    16aa:	29 f4       	brne	.+10     	; 0x16b6 <bus_init+0x1de>
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	85 e0       	ldi	r24, 0x05	; 5
    16b0:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16b4:	98 c0       	rjmp	.+304    	; 0x17e6 <bus_init+0x30e>
    16b6:	00 39       	cpi	r16, 0x90	; 144
    16b8:	bb e0       	ldi	r27, 0x0B	; 11
    16ba:	1b 07       	cpc	r17, r27
    16bc:	29 f4       	brne	.+10     	; 0x16c8 <bus_init+0x1f0>
    16be:	64 e0       	ldi	r22, 0x04	; 4
    16c0:	86 e0       	ldi	r24, 0x06	; 6
    16c2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16c6:	8f c0       	rjmp	.+286    	; 0x17e6 <bus_init+0x30e>
    16c8:	00 3c       	cpi	r16, 0xC0	; 192
    16ca:	88 e0       	ldi	r24, 0x08	; 8
    16cc:	18 07       	cpc	r17, r24
    16ce:	29 f4       	brne	.+10     	; 0x16da <bus_init+0x202>
    16d0:	68 e0       	ldi	r22, 0x08	; 8
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16d8:	86 c0       	rjmp	.+268    	; 0x17e6 <bus_init+0x30e>
    16da:	00 3c       	cpi	r16, 0xC0	; 192
    16dc:	a9 e0       	ldi	r26, 0x09	; 9
    16de:	1a 07       	cpc	r17, r26
    16e0:	29 f4       	brne	.+10     	; 0x16ec <bus_init+0x214>
    16e2:	68 e0       	ldi	r22, 0x08	; 8
    16e4:	84 e0       	ldi	r24, 0x04	; 4
    16e6:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16ea:	7d c0       	rjmp	.+250    	; 0x17e6 <bus_init+0x30e>
    16ec:	00 3c       	cpi	r16, 0xC0	; 192
    16ee:	ba e0       	ldi	r27, 0x0A	; 10
    16f0:	1b 07       	cpc	r17, r27
    16f2:	29 f4       	brne	.+10     	; 0x16fe <bus_init+0x226>
    16f4:	68 e0       	ldi	r22, 0x08	; 8
    16f6:	85 e0       	ldi	r24, 0x05	; 5
    16f8:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    16fc:	74 c0       	rjmp	.+232    	; 0x17e6 <bus_init+0x30e>
    16fe:	00 3c       	cpi	r16, 0xC0	; 192
    1700:	8b e0       	ldi	r24, 0x0B	; 11
    1702:	18 07       	cpc	r17, r24
    1704:	29 f4       	brne	.+10     	; 0x1710 <bus_init+0x238>
    1706:	68 e0       	ldi	r22, 0x08	; 8
    1708:	86 e0       	ldi	r24, 0x06	; 6
    170a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    170e:	6b c0       	rjmp	.+214    	; 0x17e6 <bus_init+0x30e>
    1710:	00 3a       	cpi	r16, 0xA0	; 160
    1712:	a8 e0       	ldi	r26, 0x08	; 8
    1714:	1a 07       	cpc	r17, r26
    1716:	29 f4       	brne	.+10     	; 0x1722 <bus_init+0x24a>
    1718:	60 e1       	ldi	r22, 0x10	; 16
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1720:	62 c0       	rjmp	.+196    	; 0x17e6 <bus_init+0x30e>
    1722:	00 3a       	cpi	r16, 0xA0	; 160
    1724:	b9 e0       	ldi	r27, 0x09	; 9
    1726:	1b 07       	cpc	r17, r27
    1728:	29 f4       	brne	.+10     	; 0x1734 <bus_init+0x25c>
    172a:	60 e1       	ldi	r22, 0x10	; 16
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1732:	59 c0       	rjmp	.+178    	; 0x17e6 <bus_init+0x30e>
    1734:	00 3a       	cpi	r16, 0xA0	; 160
    1736:	8a e0       	ldi	r24, 0x0A	; 10
    1738:	18 07       	cpc	r17, r24
    173a:	29 f4       	brne	.+10     	; 0x1746 <bus_init+0x26e>
    173c:	60 e1       	ldi	r22, 0x10	; 16
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1744:	50 c0       	rjmp	.+160    	; 0x17e6 <bus_init+0x30e>
    1746:	00 3a       	cpi	r16, 0xA0	; 160
    1748:	ab e0       	ldi	r26, 0x0B	; 11
    174a:	1a 07       	cpc	r17, r26
    174c:	29 f4       	brne	.+10     	; 0x1758 <bus_init+0x280>
    174e:	60 e1       	ldi	r22, 0x10	; 16
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1756:	47 c0       	rjmp	.+142    	; 0x17e6 <bus_init+0x30e>
    1758:	00 3b       	cpi	r16, 0xB0	; 176
    175a:	b8 e0       	ldi	r27, 0x08	; 8
    175c:	1b 07       	cpc	r17, r27
    175e:	29 f4       	brne	.+10     	; 0x176a <bus_init+0x292>
    1760:	60 e2       	ldi	r22, 0x20	; 32
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    1768:	3e c0       	rjmp	.+124    	; 0x17e6 <bus_init+0x30e>
    176a:	00 3b       	cpi	r16, 0xB0	; 176
    176c:	89 e0       	ldi	r24, 0x09	; 9
    176e:	18 07       	cpc	r17, r24
    1770:	29 f4       	brne	.+10     	; 0x177c <bus_init+0x2a4>
    1772:	60 e2       	ldi	r22, 0x20	; 32
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    177a:	35 c0       	rjmp	.+106    	; 0x17e6 <bus_init+0x30e>
    177c:	00 3b       	cpi	r16, 0xB0	; 176
    177e:	aa e0       	ldi	r26, 0x0A	; 10
    1780:	1a 07       	cpc	r17, r26
    1782:	29 f4       	brne	.+10     	; 0x178e <bus_init+0x2b6>
    1784:	60 e2       	ldi	r22, 0x20	; 32
    1786:	85 e0       	ldi	r24, 0x05	; 5
    1788:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    178c:	2c c0       	rjmp	.+88     	; 0x17e6 <bus_init+0x30e>
    178e:	00 3b       	cpi	r16, 0xB0	; 176
    1790:	bb e0       	ldi	r27, 0x0B	; 11
    1792:	1b 07       	cpc	r17, r27
    1794:	29 f4       	brne	.+10     	; 0x17a0 <bus_init+0x2c8>
    1796:	60 e2       	ldi	r22, 0x20	; 32
    1798:	86 e0       	ldi	r24, 0x06	; 6
    179a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    179e:	23 c0       	rjmp	.+70     	; 0x17e6 <bus_init+0x30e>
    17a0:	00 38       	cpi	r16, 0x80	; 128
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	18 07       	cpc	r17, r24
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <bus_init+0x2da>
    17a8:	60 e4       	ldi	r22, 0x40	; 64
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    17b0:	1a c0       	rjmp	.+52     	; 0x17e6 <bus_init+0x30e>
    17b2:	00 39       	cpi	r16, 0x90	; 144
    17b4:	a4 e0       	ldi	r26, 0x04	; 4
    17b6:	1a 07       	cpc	r17, r26
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <bus_init+0x2ec>
    17ba:	60 e4       	ldi	r22, 0x40	; 64
    17bc:	84 e0       	ldi	r24, 0x04	; 4
    17be:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    17c2:	11 c0       	rjmp	.+34     	; 0x17e6 <bus_init+0x30e>
    17c4:	00 3a       	cpi	r16, 0xA0	; 160
    17c6:	b4 e0       	ldi	r27, 0x04	; 4
    17c8:	1b 07       	cpc	r17, r27
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <bus_init+0x2fe>
    17cc:	60 e4       	ldi	r22, 0x40	; 64
    17ce:	85 e0       	ldi	r24, 0x05	; 5
    17d0:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <bus_init+0x30e>
    17d6:	00 3b       	cpi	r16, 0xB0	; 176
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	18 07       	cpc	r17, r24
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <bus_init+0x30e>
    17de:	60 e4       	ldi	r22, 0x40	; 64
    17e0:	86 e0       	ldi	r24, 0x06	; 6
    17e2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    17e6:	be 01       	movw	r22, r28
    17e8:	6f 5f       	subi	r22, 0xFF	; 255
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	c8 01       	movw	r24, r16
    17ee:	3e d4       	rcall	.+2172   	; 0x206c <twi_master_init>
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	81 11       	cpse	r24, r1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	89 2f       	mov	r24, r25
    17f8:	29 96       	adiw	r28, 0x09	; 9
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <bus_read>:
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	2b 97       	sbiw	r28, 0x0b	; 11
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	8c 01       	movw	r16, r24
    1820:	79 01       	movw	r14, r18
    1822:	fe 01       	movw	r30, r28
    1824:	31 96       	adiw	r30, 0x01	; 1
    1826:	8b e0       	ldi	r24, 0x0B	; 11
    1828:	df 01       	movw	r26, r30
    182a:	1d 92       	st	X+, r1
    182c:	8a 95       	dec	r24
    182e:	e9 f7       	brne	.-6      	; 0x182a <bus_read+0x22>
    1830:	d8 01       	movw	r26, r16
    1832:	13 96       	adiw	r26, 0x03	; 3
    1834:	8c 91       	ld	r24, X
    1836:	13 97       	sbiw	r26, 0x03	; 3
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	4f 83       	std	Y+7, r20	; 0x07
    1846:	58 87       	std	Y+8, r21	; 0x08
    1848:	29 87       	std	Y+9, r18	; 0x09
    184a:	3a 87       	std	Y+10, r19	; 0x0a
    184c:	16 96       	adiw	r26, 0x06	; 6
    184e:	8c 91       	ld	r24, X
    1850:	16 97       	sbiw	r26, 0x06	; 6
    1852:	8b 87       	std	Y+11, r24	; 0x0b
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	bf 01       	movw	r22, r30
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	8d 91       	ld	r24, X+
    185c:	9c 91       	ld	r25, X
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	1a d4       	rcall	.+2100   	; 0x2096 <twi_master_transfer>
    1862:	f8 01       	movw	r30, r16
    1864:	85 83       	std	Z+5, r24	; 0x05
    1866:	88 23       	and	r24, r24
    1868:	11 f0       	breq	.+4      	; 0x186e <bus_read+0x66>
    186a:	e1 2c       	mov	r14, r1
    186c:	f1 2c       	mov	r15, r1
    186e:	8e 2d       	mov	r24, r14
    1870:	9f 2d       	mov	r25, r15
    1872:	2b 96       	adiw	r28, 0x0b	; 11
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	08 95       	ret

00001886 <bus_write>:
 * \return The number of Bytes written, which may be less than the
 *         requested number of Bytes in the event of an error.
 */
size_t twi_bus_write(bus_desc_t *bus, uint8_t addr, const void *data,
		size_t count)
{
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	2b 97       	sbiw	r28, 0x0b	; 11
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	8c 01       	movw	r16, r24
    189e:	79 01       	movw	r14, r18
	twi_package_t const pkg = {
    18a0:	fe 01       	movw	r30, r28
    18a2:	31 96       	adiw	r30, 0x01	; 1
    18a4:	8b e0       	ldi	r24, 0x0B	; 11
    18a6:	df 01       	movw	r26, r30
    18a8:	1d 92       	st	X+, r1
    18aa:	8a 95       	dec	r24
    18ac:	e9 f7       	brne	.-6      	; 0x18a8 <bus_write+0x22>
    18ae:	d8 01       	movw	r26, r16
    18b0:	13 96       	adiw	r26, 0x03	; 3
    18b2:	8c 91       	ld	r24, X
    18b4:	13 97       	sbiw	r26, 0x03	; 3
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	6a 83       	std	Y+2, r22	; 0x02
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	4f 83       	std	Y+7, r20	; 0x07
    18c4:	58 87       	std	Y+8, r21	; 0x08
    18c6:	29 87       	std	Y+9, r18	; 0x09
    18c8:	3a 87       	std	Y+10, r19	; 0x0a
    18ca:	16 96       	adiw	r26, 0x06	; 6
    18cc:	8c 91       	ld	r24, X
    18ce:	16 97       	sbiw	r26, 0x06	; 6
    18d0:	8b 87       	std	Y+11, r24	; 0x0b
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	bf 01       	movw	r22, r30
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	8d 91       	ld	r24, X+
    18da:	9c 91       	ld	r25, X
    18dc:	12 97       	sbiw	r26, 0x02	; 2
    18de:	db d3       	rcall	.+1974   	; 0x2096 <twi_master_transfer>
		.buffer      = (void *)data,
		.length      = count,
		.no_wait     = bus->no_wait
	};

	bus->status = twi_master_write((twi_master_t)(bus->id), &pkg);
    18e0:	f8 01       	movw	r30, r16
    18e2:	85 83       	std	Z+5, r24	; 0x05
	return (STATUS_OK == bus->status) ? count : 0;
    18e4:	88 23       	and	r24, r24
    18e6:	11 f0       	breq	.+4      	; 0x18ec <bus_write+0x66>
    18e8:	e1 2c       	mov	r14, r1
    18ea:	f1 2c       	mov	r15, r1
}
    18ec:	8e 2d       	mov	r24, r14
    18ee:	9f 2d       	mov	r25, r15
    18f0:	2b 96       	adiw	r28, 0x0b	; 11
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	08 95       	ret

00001904 <nvram_write>:
 * \param   count   the number of Bytes to write
 *
 * \return  Nothing.
 */
void nvram_write(nvram_addr_t dst, const void *src, size_t count)
{
    1904:	0f 93       	push	r16
    1906:	db 01       	movw	r26, r22
    1908:	9a 01       	movw	r18, r20
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    190a:	e0 ec       	ldi	r30, 0xC0	; 192
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	47 85       	ldd	r20, Z+15	; 0x0f
    1910:	44 23       	and	r20, r20
    1912:	ec f3       	brlt	.-6      	; 0x190e <nvram_write+0xa>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_write_buffer((flash_addr_t)(dst + SENSOR_NVM_OFFSET),
    1914:	bc 01       	movw	r22, r24
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	01 e0       	ldi	r16, 0x01	; 1
    191c:	ad 01       	movw	r20, r26
    191e:	9c d1       	rcall	.+824    	; 0x1c58 <nvm_user_sig_write_buffer>

	sysclk_enable_pbb_module(SYSCLK_FLASH_REGS);
	(void)flash_memcpy(flash_addr, src, count, erase_page);
	sysclk_disable_pbb_module(SYSCLK_FLASH_REGS);
#endif
}
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <nvram_read>:
 * \param   count   the number of Bytes to read
 *
 * \return  Nothing.
 */
void nvram_read(nvram_addr_t src, void *dst, size_t count)
{
    1924:	db 01       	movw	r26, r22
    1926:	9a 01       	movw	r18, r20
    1928:	e0 ec       	ldi	r30, 0xC0	; 192
    192a:	f1 e0       	ldi	r31, 0x01	; 1
    192c:	47 85       	ldd	r20, Z+15	; 0x0f
    192e:	44 23       	and	r20, r20
    1930:	ec f3       	brlt	.-6      	; 0x192c <nvram_read+0x8>
#if XMEGA
	nvm_wait_until_ready();
	nvm_user_sig_read_buffer((flash_addr_t)(src + SENSOR_NVM_OFFSET), dst,
    1932:	bc 01       	movw	r22, r24
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	ad 01       	movw	r20, r26
    193a:	6b c1       	rjmp	.+726    	; 0x1c12 <nvm_user_sig_read_buffer>

0000193c <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1942:	0c d4       	rcall	.+2072   	; 0x215c <usart_getchar>
    1944:	88 83       	st	Y, r24
}
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    194c:	ff c3       	rjmp	.+2046   	; 0x214c <usart_putchar>
}
    194e:	08 95       	ret

00001950 <sensor_timestamp>:
	tsc = cpu_cy_2_us(Get_system_register(AVR32_COUNT),
			sysclk_get_cpu_hz());
#endif

	return tsc;
}
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	cb 01       	movw	r24, r22
    1956:	08 95       	ret

00001958 <sensor_irq_connect>:
		void *arg)
{
	bool status = false;

#if defined (SENSORS_XPLAINED_BOARD)
	status = sensor_board_irq_connect(intr_pin, handler, arg);
    1958:	0c 94 0c 02 	jmp	0x418	; 0x418 <sensor_board_irq_connect>
#endif

	return status;
}
    195c:	08 95       	ret

0000195e <sensor_list>:
		SENSOR_HAL_DESC((SENSOR_TYPE_LIGHT | SENSOR_TYPE_PROXIMITY),
				sfh7770),
#endif
	};

	*dev_count = ARRAYSIZE(sensor_dev_list);
    195e:	21 e0       	ldi	r18, 0x01	; 1
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	fc 01       	movw	r30, r24
    1964:	20 83       	st	Z, r18
    1966:	31 83       	std	Z+1, r19	; 0x01

	return sensor_dev_list;
}
    1968:	87 e2       	ldi	r24, 0x27	; 39
    196a:	90 e2       	ldi	r25, 0x20	; 32
    196c:	08 95       	ret

0000196e <sensor_find>:
 * \param   type   The type of sensor to find in hardware descriptor list
 *
 * \return  The address of the sensor hardware descriptor, or NULL if not found
 */
sensor_hal_t *sensor_find(sensor_type_t type)
{
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	1f 92       	push	r1
    1978:	1f 92       	push	r1
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	8c 01       	movw	r16, r24
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);
    1980:	ce 01       	movw	r24, r28
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	ec df       	rcall	.-40     	; 0x195e <sensor_list>

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    1986:	69 81       	ldd	r22, Y+1	; 0x01
    1988:	7a 81       	ldd	r23, Y+2	; 0x02
    198a:	61 15       	cp	r22, r1
    198c:	71 05       	cpc	r23, r1
    198e:	01 f1       	breq	.+64     	; 0x19d0 <sensor_find+0x62>
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    1990:	fc 01       	movw	r30, r24
    1992:	20 89       	ldd	r18, Z+16	; 0x10
    1994:	31 89       	ldd	r19, Z+17	; 0x11
    1996:	20 23       	and	r18, r16
    1998:	31 23       	and	r19, r17
    199a:	20 17       	cp	r18, r16
    199c:	31 07       	cpc	r19, r17
    199e:	d9 f0       	breq	.+54     	; 0x19d6 <sensor_find+0x68>
 *
 * \param   type   The type of sensor to find in hardware descriptor list
 *
 * \return  The address of the sensor hardware descriptor, or NULL if not found
 */
sensor_hal_t *sensor_find(sensor_type_t type)
    19a0:	ac 01       	movw	r20, r24
    19a2:	4e 5d       	subi	r20, 0xDE	; 222
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	0a c0       	rjmp	.+20     	; 0x19c0 <sensor_find+0x52>
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    19ac:	fa 01       	movw	r30, r20
    19ae:	4e 5d       	subi	r20, 0xDE	; 222
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	80 89       	ldd	r24, Z+16	; 0x10
    19b4:	91 89       	ldd	r25, Z+17	; 0x11
    19b6:	80 23       	and	r24, r16
    19b8:	91 23       	and	r25, r17
    19ba:	80 17       	cp	r24, r16
    19bc:	91 07       	cpc	r25, r17
    19be:	61 f0       	breq	.+24     	; 0x19d8 <sensor_find+0x6a>
	size_t dev_count;
	sensor_hal_t *const dev_list = sensor_list(&dev_count);

	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
    19c0:	2f 5f       	subi	r18, 0xFF	; 255
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	26 17       	cp	r18, r22
    19c6:	37 07       	cpc	r19, r23
    19c8:	89 f7       	brne	.-30     	; 0x19ac <sensor_find+0x3e>
		if ((dev_list[index].dev_type & type) == type) {
			return &dev_list [index];
		}
	}

	return 0;
    19ca:	e0 e0       	ldi	r30, 0x00	; 0
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <sensor_find+0x6a>
    19d0:	e0 e0       	ldi	r30, 0x00	; 0
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <sensor_find+0x6a>
	/* Find the specified sensor type in the device list. */

	for (int index = 0; index < dev_count; ++index) {
		/* Test device against input type(s) bitmask. */

		if ((dev_list[index].dev_type & type) == type) {
    19d6:	fc 01       	movw	r30, r24
			return &dev_list [index];
		}
	}

	return 0;
}
    19d8:	8e 2f       	mov	r24, r30
    19da:	9f 2f       	mov	r25, r31
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <sensor_platform_init>:
 * hardware abstraction layer (HAL) for the Xplained Sensor API.
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
bool sensor_platform_init(void)
{
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	27 97       	sbiw	r28, 0x07	; 7
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	de bf       	out	0x3e, r29	; 62
	bool initialized = false;

	/* Initialize the system clock and all clocks derived from it. */

	sysclk_init();
    19fa:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sysclk_init>
	/* Initialize the board (UC3/XMEGA Xplained & Sensor Xplained boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */

	board_init();
    19fe:	75 d0       	rcall	.+234    	; 0x1aea <board_init>

	/* Initialize the sensor bus I/O interface. */

	if (BUSIO_TYPE != BUS_TYPE_UNKNOWN) {
		initialized = sensor_bus_init(&BUSIO_IF, BUSIO_SPEED);
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5a e1       	ldi	r21, 0x1A	; 26
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	80 eb       	ldi	r24, 0xB0	; 176
    1a0a:	94 e0       	ldi	r25, 0x04	; 4
    1a0c:	65 dd       	rcall	.-1334   	; 0x14d8 <bus_init>
    1a0e:	18 2f       	mov	r17, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1a10:	20 ea       	ldi	r18, 0xA0	; 160
    1a12:	38 e0       	ldi	r19, 0x08	; 8
    1a14:	20 93 5f 22 	sts	0x225F, r18
    1a18:	30 93 60 22 	sts	0x2260, r19
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1a1c:	26 ea       	ldi	r18, 0xA6	; 166
    1a1e:	3c e0       	ldi	r19, 0x0C	; 12
    1a20:	20 93 5d 22 	sts	0x225D, r18
    1a24:	30 93 5e 22 	sts	0x225E, r19
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1a28:	2e e9       	ldi	r18, 0x9E	; 158
    1a2a:	3c e0       	ldi	r19, 0x0C	; 12
    1a2c:	20 93 5b 22 	sts	0x225B, r18
    1a30:	30 93 5c 22 	sts	0x225C, r19
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1a38:	1e 82       	std	Y+6, r1	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1a3a:	1f 82       	std	Y+7, r1	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	52 ec       	ldi	r21, 0xC2	; 194
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	49 83       	std	Y+1, r20	; 0x01
    1a46:	5a 83       	std	Y+2, r21	; 0x02
    1a48:	6b 83       	std	Y+3, r22	; 0x03
    1a4a:	7c 83       	std	Y+4, r23	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1a4c:	60 e1       	ldi	r22, 0x10	; 16
    1a4e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1a52:	be 01       	movw	r22, r28
    1a54:	6f 5f       	subi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	80 ea       	ldi	r24, 0xA0	; 160
    1a5a:	98 e0       	ldi	r25, 0x08	; 8
    1a5c:	93 d4       	rcall	.+2342   	; 0x2384 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1a5e:	66 e4       	ldi	r22, 0x46	; 70
    1a60:	7d e0       	ldi	r23, 0x0D	; 13
    1a62:	81 e6       	ldi	r24, 0x61	; 97
    1a64:	9d e0       	ldi	r25, 0x0D	; 13
    1a66:	0e 94 43 19 	call	0x3286	; 0x3286 <fdevopen>
    1a6a:	4a ea       	ldi	r20, 0xAA	; 170
    1a6c:	51 e1       	ldi	r21, 0x11	; 17
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	70 e0       	ldi	r23, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1a72:	41 50       	subi	r20, 0x01	; 1
    1a74:	51 09       	sbc	r21, r1
    1a76:	61 09       	sbc	r22, r1
    1a78:	71 09       	sbc	r23, r1
    1a7a:	d9 f7       	brne	.-10     	; 0x1a72 <sensor_platform_init+0x88>
	 * if the device is particularly slow to settle.)
	 */
	delay_ms(SENSOR_START_DELAY_MSEC);

	return initialized;
}
    1a7c:	81 2f       	mov	r24, r17
    1a7e:	27 96       	adiw	r28, 0x07	; 7
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	1f 91       	pop	r17
    1a8a:	08 95       	ret

00001a8c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	1f 92       	push	r1
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    1a96:	80 91 5f 22 	lds	r24, 0x225F
    1a9a:	90 91 60 22 	lds	r25, 0x2260
    1a9e:	e0 91 5b 22 	lds	r30, 0x225B
    1aa2:	f0 91 5c 22 	lds	r31, 0x225C
    1aa6:	be 01       	movw	r22, r28
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	19 95       	eicall
	return c;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	33 27       	eor	r19, r19
    1ab4:	27 fd       	sbrc	r18, 7
    1ab6:	30 95       	com	r19
}
    1ab8:	93 2f       	mov	r25, r19
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    1ac2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    1ac4:	80 91 5f 22 	lds	r24, 0x225F
    1ac8:	90 91 60 22 	lds	r25, 0x2260
    1acc:	e0 91 5d 22 	lds	r30, 0x225D
    1ad0:	f0 91 5e 22 	lds	r31, 0x225E
    1ad4:	19 95       	eicall
    1ad6:	99 23       	and	r25, r25
    1ad8:	1c f4       	brge	.+6      	; 0x1ae0 <_write+0x1e>
		return -1;
    1ada:	2f ef       	ldi	r18, 0xFF	; 255
    1adc:	3f ef       	ldi	r19, 0xFF	; 255
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <_write+0x22>
	}
	return 1;
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
}
    1ae4:	82 2f       	mov	r24, r18
    1ae6:	93 2f       	mov	r25, r19
    1ae8:	08 95       	ret

00001aea <board_init>:
    1aea:	43 e0       	ldi	r20, 0x03	; 3
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	80 e8       	ldi	r24, 0x80	; 128
    1af2:	96 e0       	ldi	r25, 0x06	; 6
    1af4:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1af8:	43 e0       	ldi	r20, 0x03	; 3
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	80 e8       	ldi	r24, 0x80	; 128
    1b00:	96 e0       	ldi	r25, 0x06	; 6
    1b02:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b06:	43 e0       	ldi	r20, 0x03	; 3
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	64 e0       	ldi	r22, 0x04	; 4
    1b0c:	80 e8       	ldi	r24, 0x80	; 128
    1b0e:	96 e0       	ldi	r25, 0x06	; 6
    1b10:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b14:	43 e0       	ldi	r20, 0x03	; 3
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	68 e0       	ldi	r22, 0x08	; 8
    1b1a:	80 e8       	ldi	r24, 0x80	; 128
    1b1c:	96 e0       	ldi	r25, 0x06	; 6
    1b1e:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b22:	43 e0       	ldi	r20, 0x03	; 3
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	60 e1       	ldi	r22, 0x10	; 16
    1b28:	80 e8       	ldi	r24, 0x80	; 128
    1b2a:	96 e0       	ldi	r25, 0x06	; 6
    1b2c:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b30:	43 e0       	ldi	r20, 0x03	; 3
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	60 e2       	ldi	r22, 0x20	; 32
    1b36:	80 e8       	ldi	r24, 0x80	; 128
    1b38:	96 e0       	ldi	r25, 0x06	; 6
    1b3a:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e4       	ldi	r22, 0x40	; 64
    1b44:	80 e8       	ldi	r24, 0x80	; 128
    1b46:	96 e0       	ldi	r25, 0x06	; 6
    1b48:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b4c:	43 e0       	ldi	r20, 0x03	; 3
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	60 e8       	ldi	r22, 0x80	; 128
    1b52:	80 e8       	ldi	r24, 0x80	; 128
    1b54:	96 e0       	ldi	r25, 0x06	; 6
    1b56:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	58 e1       	ldi	r21, 0x18	; 24
    1b5e:	61 e0       	ldi	r22, 0x01	; 1
    1b60:	80 e6       	ldi	r24, 0x60	; 96
    1b62:	96 e0       	ldi	r25, 0x06	; 6
    1b64:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	58 e1       	ldi	r21, 0x18	; 24
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	80 e6       	ldi	r24, 0x60	; 96
    1b70:	96 e0       	ldi	r25, 0x06	; 6
    1b72:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b76:	40 e0       	ldi	r20, 0x00	; 0
    1b78:	58 e1       	ldi	r21, 0x18	; 24
    1b7a:	64 e0       	ldi	r22, 0x04	; 4
    1b7c:	80 e6       	ldi	r24, 0x60	; 96
    1b7e:	96 e0       	ldi	r25, 0x06	; 6
    1b80:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	58 e1       	ldi	r21, 0x18	; 24
    1b88:	68 e0       	ldi	r22, 0x08	; 8
    1b8a:	80 e6       	ldi	r24, 0x60	; 96
    1b8c:	96 e0       	ldi	r25, 0x06	; 6
    1b8e:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	58 e1       	ldi	r21, 0x18	; 24
    1b96:	60 e1       	ldi	r22, 0x10	; 16
    1b98:	80 e6       	ldi	r24, 0x60	; 96
    1b9a:	96 e0       	ldi	r25, 0x06	; 6
    1b9c:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	58 e1       	ldi	r21, 0x18	; 24
    1ba4:	60 e2       	ldi	r22, 0x20	; 32
    1ba6:	80 e6       	ldi	r24, 0x60	; 96
    1ba8:	96 e0       	ldi	r25, 0x06	; 6
    1baa:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	58 e1       	ldi	r21, 0x18	; 24
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	80 ee       	ldi	r24, 0xE0	; 224
    1bb6:	97 e0       	ldi	r25, 0x07	; 7
    1bb8:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	58 e1       	ldi	r21, 0x18	; 24
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	80 ee       	ldi	r24, 0xE0	; 224
    1bc4:	97 e0       	ldi	r25, 0x07	; 7
    1bc6:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1bca:	43 e0       	ldi	r20, 0x03	; 3
    1bcc:	50 e0       	ldi	r21, 0x00	; 0
    1bce:	68 e0       	ldi	r22, 0x08	; 8
    1bd0:	80 e4       	ldi	r24, 0x40	; 64
    1bd2:	96 e0       	ldi	r25, 0x06	; 6
    1bd4:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	64 e0       	ldi	r22, 0x04	; 4
    1bde:	80 e4       	ldi	r24, 0x40	; 64
    1be0:	96 e0       	ldi	r25, 0x06	; 6
    1be2:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1be6:	43 e0       	ldi	r20, 0x03	; 3
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	68 e0       	ldi	r22, 0x08	; 8
    1bec:	80 e6       	ldi	r24, 0x60	; 96
    1bee:	96 e0       	ldi	r25, 0x06	; 6
    1bf0:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	64 e0       	ldi	r22, 0x04	; 4
    1bfa:	80 e6       	ldi	r24, 0x60	; 96
    1bfc:	96 e0       	ldi	r25, 0x06	; 6
    1bfe:	0e 94 cb 02 	call	0x596	; 0x596 <ioport_configure_port_pin>
#if defined (SENSORS_XPLAINED_BOARD)
	/* Configure the Xplained Sensor extension board, if any, after
	 * the platform Xplained board has configured basic clock settings,
	 * GPIO pin mapping, interrupt controller options, etc.
	 */
	sensor_board_init ();
    1c02:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <sensor_board_init>

00001c06 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1c06:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1c08:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1c0a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1c0c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1c0e:	60 83       	st	Z, r22
	ret                             // Return to caller
    1c10:	08 95       	ret

00001c12 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    1c12:	ef 92       	push	r14
    1c14:	ff 92       	push	r15
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	e9 01       	movw	r28, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	91 70       	andi	r25, 0x01	; 1
    1c26:	aa 27       	eor	r26, r26
    1c28:	bb 27       	eor	r27, r27
	while ( len ) {
    1c2a:	20 97       	sbiw	r28, 0x00	; 0
    1c2c:	71 f0       	breq	.+28     	; 0x1c4a <nvm_user_sig_read_buffer+0x38>
    1c2e:	8a 01       	movw	r16, r20
 *
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
    1c30:	7c 01       	movw	r14, r24
    1c32:	e4 1a       	sub	r14, r20
    1c34:	f5 0a       	sbc	r15, r21
    1c36:	b8 01       	movw	r22, r16
    1c38:	6e 0d       	add	r22, r14
    1c3a:	7f 1d       	adc	r23, r15
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	af d0       	rcall	.+350    	; 0x1d9e <nvm_read_byte>
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    1c40:	f8 01       	movw	r30, r16
    1c42:	81 93       	st	Z+, r24
    1c44:	8f 01       	movw	r16, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
    1c46:	21 97       	sbiw	r28, 0x01	; 1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    1c48:	b1 f7       	brne	.-20     	; 0x1c36 <nvm_user_sig_read_buffer+0x24>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	08 95       	ret

00001c58 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    1c58:	2f 92       	push	r2
    1c5a:	3f 92       	push	r3
    1c5c:	4f 92       	push	r4
    1c5e:	5f 92       	push	r5
    1c60:	6f 92       	push	r6
    1c62:	7f 92       	push	r7
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	1f 92       	push	r1
    1c7e:	1f 92       	push	r1
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	1a 01       	movw	r2, r20
    1c86:	69 01       	movw	r12, r18
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    1c88:	5b 01       	movw	r10, r22
	bool b_flag_erase = false;

	while ( len ) {
    1c8a:	21 15       	cp	r18, r1
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <nvm_user_sig_write_buffer+0x3a>
    1c90:	51 c0       	rjmp	.+162    	; 0x1d34 <nvm_user_sig_write_buffer+0xdc>
    1c92:	65 c0       	rjmp	.+202    	; 0x1d5e <nvm_user_sig_write_buffer+0x106>
    1c94:	72 01       	movw	r14, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    1c96:	00 23       	and	r16, r16
    1c98:	79 f0       	breq	.+30     	; 0x1cb8 <nvm_user_sig_write_buffer+0x60>
    1c9a:	b2 01       	movw	r22, r4
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	7f d0       	rcall	.+254    	; 0x1d9e <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    1ca0:	89 83       	std	Y+1, r24	; 0x01
 * \param b_blank_check  if True then the page flash is checked before write
 *                       to run or not the erase page command.
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
    1ca2:	b2 01       	movw	r22, r4
    1ca4:	6f 5f       	subi	r22, 0xFF	; 255
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	79 d0       	rcall	.+242    	; 0x1d9e <nvm_read_byte>
	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    1cac:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <nvm_user_sig_write_buffer+0x66>
    1cb6:	04 c0       	rjmp	.+8      	; 0x1cc0 <nvm_user_sig_write_buffer+0x68>
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    1cb8:	89 82       	std	Y+1, r8	; 0x01
    1cba:	9a 82       	std	Y+2, r9	; 0x02
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <nvm_user_sig_write_buffer+0x68>
			if (b_blank_check) {
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
    1cbe:	11 e0       	ldi	r17, 0x01	; 1
				}
			}else{
				w_value = 0xFFFF;
			}
			// Update flash buffer
			if (len) {
    1cc0:	c1 14       	cp	r12, r1
    1cc2:	d1 04       	cpc	r13, r1
    1cc4:	09 f1       	breq	.+66     	; 0x1d08 <nvm_user_sig_write_buffer+0xb0>
				if (opt_address == page_pos) {
    1cc6:	ae 14       	cp	r10, r14
    1cc8:	bf 04       	cpc	r11, r15
    1cca:	71 f4       	brne	.+28     	; 0x1ce8 <nvm_user_sig_write_buffer+0x90>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	c8 1a       	sub	r12, r24
    1cd0:	d1 08       	sbc	r13, r1
					opt_address++;
    1cd2:	ef ef       	ldi	r30, 0xFF	; 255
    1cd4:	ae 1a       	sub	r10, r30
    1cd6:	be 0a       	sbc	r11, r30
					LSB(w_value)=*(uint8_t*)buf;
    1cd8:	f1 01       	movw	r30, r2
    1cda:	81 91       	ld	r24, Z+
    1cdc:	1f 01       	movw	r2, r30
    1cde:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    1ce0:	c1 14       	cp	r12, r1
    1ce2:	d1 04       	cpc	r13, r1
    1ce4:	31 f4       	brne	.+12     	; 0x1cf2 <nvm_user_sig_write_buffer+0x9a>
    1ce6:	10 c0       	rjmp	.+32     	; 0x1d08 <nvm_user_sig_write_buffer+0xb0>
 * \param b_blank_check  if True then the page flash is checked before write
 *                       to run or not the erase page command.
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
    1ce8:	c7 01       	movw	r24, r14
    1cea:	01 96       	adiw	r24, 0x01	; 1
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_pos+1)) {
    1cec:	8a 15       	cp	r24, r10
    1cee:	9b 05       	cpc	r25, r11
    1cf0:	59 f4       	brne	.+22     	; 0x1d08 <nvm_user_sig_write_buffer+0xb0>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    1cf2:	f1 e0       	ldi	r31, 0x01	; 1
    1cf4:	cf 1a       	sub	r12, r31
    1cf6:	d1 08       	sbc	r13, r1
 * \param b_blank_check  if True then the page flash is checked before write
 *                       to run or not the erase page command.
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
    1cf8:	57 01       	movw	r10, r14
    1cfa:	22 e0       	ldi	r18, 0x02	; 2
    1cfc:	a2 0e       	add	r10, r18
    1cfe:	b1 1c       	adc	r11, r1
				if (opt_address == (page_pos+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
					opt_address++;
					MSB(w_value)=*(uint8_t*)buf;
    1d00:	f1 01       	movw	r30, r2
    1d02:	81 91       	ld	r24, Z+
    1d04:	1f 01       	movw	r2, r30
    1d06:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    1d08:	49 81       	ldd	r20, Y+1	; 0x01
    1d0a:	5a 81       	ldd	r21, Y+2	; 0x02
    1d0c:	c3 01       	movw	r24, r6
    1d0e:	b2 01       	movw	r22, r4
    1d10:	0f 94 0f 00 	call	0x2001e	; 0x2001e <nvm_flash_load_word_to_buffer>
    1d14:	f2 e0       	ldi	r31, 0x02	; 2
    1d16:	4f 0e       	add	r4, r31
    1d18:	51 1c       	adc	r5, r1
    1d1a:	61 1c       	adc	r6, r1
    1d1c:	71 1c       	adc	r7, r1
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    1d1e:	41 14       	cp	r4, r1
    1d20:	22 e0       	ldi	r18, 0x02	; 2
    1d22:	52 06       	cpc	r5, r18
    1d24:	61 04       	cpc	r6, r1
    1d26:	71 04       	cpc	r7, r1
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <nvm_user_sig_write_buffer+0xd4>
    1d2a:	b4 cf       	rjmp	.-152    	; 0x1c94 <nvm_user_sig_write_buffer+0x3c>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    1d2c:	c1 14       	cp	r12, r1
    1d2e:	d1 04       	cpc	r13, r1
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <nvm_user_sig_write_buffer+0xe4>
    1d32:	08 c0       	rjmp	.+16     	; 0x1d44 <nvm_user_sig_write_buffer+0xec>
	uint16_t len, bool b_blank_check)
{
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;
    1d34:	10 e0       	ldi	r17, 0x00	; 0
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    1d36:	88 24       	eor	r8, r8
    1d38:	8a 94       	dec	r8
    1d3a:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    1d3c:	41 2c       	mov	r4, r1
    1d3e:	51 2c       	mov	r5, r1
    1d40:	32 01       	movw	r6, r4
    1d42:	a8 cf       	rjmp	.-176    	; 0x1c94 <nvm_user_sig_write_buffer+0x3c>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    1d44:	11 23       	and	r17, r17
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <nvm_user_sig_write_buffer+0x106>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1d48:	e0 ec       	ldi	r30, 0xC0	; 192
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	87 85       	ldd	r24, Z+15	; 0x0f
    1d4e:	88 23       	and	r24, r24
    1d50:	ec f3       	brlt	.-6      	; 0x1d4c <nvm_user_sig_write_buffer+0xf4>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    1d52:	48 e1       	ldi	r20, 0x18	; 24
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	cb 01       	movw	r24, r22
    1d5a:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1d5e:	e0 ec       	ldi	r30, 0xC0	; 192
    1d60:	f1 e0       	ldi	r31, 0x01	; 1
    1d62:	87 85       	ldd	r24, Z+15	; 0x0f
    1d64:	88 23       	and	r24, r24
    1d66:	ec f3       	brlt	.-6      	; 0x1d62 <nvm_user_sig_write_buffer+0x10a>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    1d68:	4a e1       	ldi	r20, 0x1A	; 26
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	cb 01       	movw	r24, r22
    1d70:	0f 94 00 00 	call	0x20000	; 0x20000 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	9f 90       	pop	r9
    1d8e:	8f 90       	pop	r8
    1d90:	7f 90       	pop	r7
    1d92:	6f 90       	pop	r6
    1d94:	5f 90       	pop	r5
    1d96:	4f 90       	pop	r4
    1d98:	3f 90       	pop	r3
    1d9a:	2f 90       	pop	r2
    1d9c:	08 95       	ret

00001d9e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1d9e:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1da2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1da4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1da6:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1daa:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1dac:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1db0:	08 95       	ret

00001db2 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1db6:	e0 91 50 22 	lds	r30, 0x2250
    1dba:	f0 91 51 22 	lds	r31, 0x2251
    1dbe:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1dc0:	83 ff       	sbrs	r24, 3
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1dc4:	88 60       	ori	r24, 0x08	; 8
    1dc6:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1dc8:	83 e0       	ldi	r24, 0x03	; 3
    1dca:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1dcc:	86 ef       	ldi	r24, 0xF6	; 246
    1dce:	80 93 5a 22 	sts	0x225A, r24
    1dd2:	81 c0       	rjmp	.+258    	; 0x1ed6 <twim_interrupt_handler+0x124>
 *
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
    1dd4:	98 2f       	mov	r25, r24
    1dd6:	94 71       	andi	r25, 0x14	; 20

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
		transfer.status = ERR_BUSY;

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1dd8:	31 f0       	breq	.+12     	; 0x1de6 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	80 93 5a 22 	sts	0x225A, r24
    1de4:	78 c0       	rjmp	.+240    	; 0x1ed6 <twim_interrupt_handler+0x124>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1de6:	86 ff       	sbrs	r24, 6
    1de8:	40 c0       	rjmp	.+128    	; 0x1e6a <twim_interrupt_handler+0xb8>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1dea:	a0 91 52 22 	lds	r26, 0x2252
    1dee:	b0 91 53 22 	lds	r27, 0x2253

	if (transfer.addr_count < pkg->addr_length) {
    1df2:	80 91 54 22 	lds	r24, 0x2254
    1df6:	90 91 55 22 	lds	r25, 0x2255
    1dfa:	14 96       	adiw	r26, 0x04	; 4
    1dfc:	2d 91       	ld	r18, X+
    1dfe:	3c 91       	ld	r19, X
    1e00:	15 97       	sbiw	r26, 0x05	; 5
    1e02:	82 17       	cp	r24, r18
    1e04:	93 07       	cpc	r25, r19
    1e06:	5c f4       	brge	.+22     	; 0x1e1e <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1e08:	a8 0f       	add	r26, r24
    1e0a:	b9 1f       	adc	r27, r25
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	2c 91       	ld	r18, X
    1e10:	27 83       	std	Z+7, r18	; 0x07
    1e12:	01 96       	adiw	r24, 0x01	; 1
    1e14:	80 93 54 22 	sts	0x2254, r24
    1e18:	90 93 55 22 	sts	0x2255, r25
    1e1c:	5c c0       	rjmp	.+184    	; 0x1ed6 <twim_interrupt_handler+0x124>

	} else if (transfer.data_count < pkg->length) {
    1e1e:	80 91 56 22 	lds	r24, 0x2256
    1e22:	90 91 57 22 	lds	r25, 0x2257
    1e26:	18 96       	adiw	r26, 0x08	; 8
    1e28:	2d 91       	ld	r18, X+
    1e2a:	3c 91       	ld	r19, X
    1e2c:	19 97       	sbiw	r26, 0x09	; 9
    1e2e:	82 17       	cp	r24, r18
    1e30:	93 07       	cpc	r25, r19
    1e32:	b0 f4       	brcc	.+44     	; 0x1e60 <twim_interrupt_handler+0xae>

		if (transfer.read) {
    1e34:	20 91 58 22 	lds	r18, 0x2258
    1e38:	22 23       	and	r18, r18
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1e3c:	86 81       	ldd	r24, Z+6	; 0x06
    1e3e:	81 60       	ori	r24, 0x01	; 1
    1e40:	86 83       	std	Z+6, r24	; 0x06
    1e42:	49 c0       	rjmp	.+146    	; 0x1ed6 <twim_interrupt_handler+0x124>

		} else {
			const uint8_t * const data = pkg->buffer;
			bus->MASTER.DATA = data[transfer.data_count++];
    1e44:	16 96       	adiw	r26, 0x06	; 6
    1e46:	0d 90       	ld	r0, X+
    1e48:	bc 91       	ld	r27, X
    1e4a:	a0 2d       	mov	r26, r0
    1e4c:	a8 0f       	add	r26, r24
    1e4e:	b9 1f       	adc	r27, r25
    1e50:	2c 91       	ld	r18, X
    1e52:	27 83       	std	Z+7, r18	; 0x07
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	80 93 56 22 	sts	0x2256, r24
    1e5a:	90 93 57 22 	sts	0x2257, r25
    1e5e:	3b c0       	rjmp	.+118    	; 0x1ed6 <twim_interrupt_handler+0x124>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e60:	83 e0       	ldi	r24, 0x03	; 3
    1e62:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1e64:	10 92 5a 22 	sts	0x225A, r1
    1e68:	36 c0       	rjmp	.+108    	; 0x1ed6 <twim_interrupt_handler+0x124>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1e6a:	88 23       	and	r24, r24
    1e6c:	8c f5       	brge	.+98     	; 0x1ed0 <twim_interrupt_handler+0x11e>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1e6e:	a0 91 52 22 	lds	r26, 0x2252
    1e72:	b0 91 53 22 	lds	r27, 0x2253

	if (transfer.data_count < pkg->length) {
    1e76:	80 91 56 22 	lds	r24, 0x2256
    1e7a:	90 91 57 22 	lds	r25, 0x2257
    1e7e:	18 96       	adiw	r26, 0x08	; 8
    1e80:	2d 91       	ld	r18, X+
    1e82:	3c 91       	ld	r19, X
    1e84:	19 97       	sbiw	r26, 0x09	; 9
    1e86:	82 17       	cp	r24, r18
    1e88:	93 07       	cpc	r25, r19
    1e8a:	e0 f4       	brcc	.+56     	; 0x1ec4 <twim_interrupt_handler+0x112>

		uint8_t * const data = pkg->buffer;
		data[transfer.data_count++] = bus->MASTER.DATA;
    1e8c:	27 81       	ldd	r18, Z+7	; 0x07
    1e8e:	16 96       	adiw	r26, 0x06	; 6
    1e90:	cd 91       	ld	r28, X+
    1e92:	dc 91       	ld	r29, X
    1e94:	17 97       	sbiw	r26, 0x07	; 7
    1e96:	c8 0f       	add	r28, r24
    1e98:	d9 1f       	adc	r29, r25
    1e9a:	28 83       	st	Y, r18
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	80 93 56 22 	sts	0x2256, r24
    1ea2:	90 93 57 22 	sts	0x2257, r25

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1ea6:	18 96       	adiw	r26, 0x08	; 8
    1ea8:	2d 91       	ld	r18, X+
    1eaa:	3c 91       	ld	r19, X
    1eac:	19 97       	sbiw	r26, 0x09	; 9
    1eae:	82 17       	cp	r24, r18
    1eb0:	93 07       	cpc	r25, r19
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <twim_interrupt_handler+0x108>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	83 83       	std	Z+3, r24	; 0x03
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <twim_interrupt_handler+0x124>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1eba:	87 e0       	ldi	r24, 0x07	; 7
    1ebc:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1ebe:	10 92 5a 22 	sts	0x225A, r1
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <twim_interrupt_handler+0x124>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1ec8:	89 ef       	ldi	r24, 0xF9	; 249
    1eca:	80 93 5a 22 	sts	0x225A, r24
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <twim_interrupt_handler+0x124>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1ed0:	8b ef       	ldi	r24, 0xFB	; 251
    1ed2:	80 93 5a 22 	sts	0x225A, r24
	}
}
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	08 b6       	in	r0, 0x38	; 56
    1ee8:	0f 92       	push	r0
    1eea:	18 be       	out	0x38, r1	; 56
    1eec:	09 b6       	in	r0, 0x39	; 57
    1eee:	0f 92       	push	r0
    1ef0:	19 be       	out	0x39, r1	; 57
    1ef2:	0b b6       	in	r0, 0x3b	; 59
    1ef4:	0f 92       	push	r0
    1ef6:	1b be       	out	0x3b, r1	; 59
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	4f 93       	push	r20
    1efe:	5f 93       	push	r21
    1f00:	6f 93       	push	r22
    1f02:	7f 93       	push	r23
    1f04:	8f 93       	push	r24
    1f06:	9f 93       	push	r25
    1f08:	af 93       	push	r26
    1f0a:	bf 93       	push	r27
    1f0c:	ef 93       	push	r30
    1f0e:	ff 93       	push	r31
    1f10:	50 df       	rcall	.-352    	; 0x1db2 <twim_interrupt_handler>
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0b be       	out	0x3b, r0	; 59
    1f2e:	0f 90       	pop	r0
    1f30:	09 be       	out	0x39, r0	; 57
    1f32:	0f 90       	pop	r0
    1f34:	08 be       	out	0x38, r0	; 56
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
    1f40:	1f 92       	push	r1
    1f42:	0f 92       	push	r0
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	0f 92       	push	r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	08 b6       	in	r0, 0x38	; 56
    1f4c:	0f 92       	push	r0
    1f4e:	18 be       	out	0x38, r1	; 56
    1f50:	09 b6       	in	r0, 0x39	; 57
    1f52:	0f 92       	push	r0
    1f54:	19 be       	out	0x39, r1	; 57
    1f56:	0b b6       	in	r0, 0x3b	; 59
    1f58:	0f 92       	push	r0
    1f5a:	1b be       	out	0x3b, r1	; 59
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	4f 93       	push	r20
    1f62:	5f 93       	push	r21
    1f64:	6f 93       	push	r22
    1f66:	7f 93       	push	r23
    1f68:	8f 93       	push	r24
    1f6a:	9f 93       	push	r25
    1f6c:	af 93       	push	r26
    1f6e:	bf 93       	push	r27
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
    1f74:	1e df       	rcall	.-452    	; 0x1db2 <twim_interrupt_handler>
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	bf 91       	pop	r27
    1f7c:	af 91       	pop	r26
    1f7e:	9f 91       	pop	r25
    1f80:	8f 91       	pop	r24
    1f82:	7f 91       	pop	r23
    1f84:	6f 91       	pop	r22
    1f86:	5f 91       	pop	r21
    1f88:	4f 91       	pop	r20
    1f8a:	3f 91       	pop	r19
    1f8c:	2f 91       	pop	r18
    1f8e:	0f 90       	pop	r0
    1f90:	0b be       	out	0x3b, r0	; 59
    1f92:	0f 90       	pop	r0
    1f94:	09 be       	out	0x39, r0	; 57
    1f96:	0f 90       	pop	r0
    1f98:	08 be       	out	0x38, r0	; 56
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	08 b6       	in	r0, 0x38	; 56
    1fb0:	0f 92       	push	r0
    1fb2:	18 be       	out	0x38, r1	; 56
    1fb4:	09 b6       	in	r0, 0x39	; 57
    1fb6:	0f 92       	push	r0
    1fb8:	19 be       	out	0x39, r1	; 57
    1fba:	0b b6       	in	r0, 0x3b	; 59
    1fbc:	0f 92       	push	r0
    1fbe:	1b be       	out	0x3b, r1	; 59
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	ec de       	rcall	.-552    	; 0x1db2 <twim_interrupt_handler>
    1fda:	ff 91       	pop	r31
    1fdc:	ef 91       	pop	r30
    1fde:	bf 91       	pop	r27
    1fe0:	af 91       	pop	r26
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	7f 91       	pop	r23
    1fe8:	6f 91       	pop	r22
    1fea:	5f 91       	pop	r21
    1fec:	4f 91       	pop	r20
    1fee:	3f 91       	pop	r19
    1ff0:	2f 91       	pop	r18
    1ff2:	0f 90       	pop	r0
    1ff4:	0b be       	out	0x3b, r0	; 59
    1ff6:	0f 90       	pop	r0
    1ff8:	09 be       	out	0x39, r0	; 57
    1ffa:	0f 90       	pop	r0
    1ffc:	08 be       	out	0x38, r0	; 56
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	08 b6       	in	r0, 0x38	; 56
    2014:	0f 92       	push	r0
    2016:	18 be       	out	0x38, r1	; 56
    2018:	09 b6       	in	r0, 0x39	; 57
    201a:	0f 92       	push	r0
    201c:	19 be       	out	0x39, r1	; 57
    201e:	0b b6       	in	r0, 0x3b	; 59
    2020:	0f 92       	push	r0
    2022:	1b be       	out	0x3b, r1	; 59
    2024:	2f 93       	push	r18
    2026:	3f 93       	push	r19
    2028:	4f 93       	push	r20
    202a:	5f 93       	push	r21
    202c:	6f 93       	push	r22
    202e:	7f 93       	push	r23
    2030:	8f 93       	push	r24
    2032:	9f 93       	push	r25
    2034:	af 93       	push	r26
    2036:	bf 93       	push	r27
    2038:	ef 93       	push	r30
    203a:	ff 93       	push	r31
    203c:	ba de       	rcall	.-652    	; 0x1db2 <twim_interrupt_handler>
    203e:	ff 91       	pop	r31
    2040:	ef 91       	pop	r30
    2042:	bf 91       	pop	r27
    2044:	af 91       	pop	r26
    2046:	9f 91       	pop	r25
    2048:	8f 91       	pop	r24
    204a:	7f 91       	pop	r23
    204c:	6f 91       	pop	r22
    204e:	5f 91       	pop	r21
    2050:	4f 91       	pop	r20
    2052:	3f 91       	pop	r19
    2054:	2f 91       	pop	r18
    2056:	0f 90       	pop	r0
    2058:	0b be       	out	0x3b, r0	; 59
    205a:	0f 90       	pop	r0
    205c:	09 be       	out	0x39, r0	; 57
    205e:	0f 90       	pop	r0
    2060:	08 be       	out	0x38, r0	; 56
    2062:	0f 90       	pop	r0
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	0f 90       	pop	r0
    2068:	1f 90       	pop	r1
    206a:	18 95       	reti

0000206c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    206c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    206e:	db 01       	movw	r26, r22
    2070:	14 96       	adiw	r26, 0x04	; 4
    2072:	8c 91       	ld	r24, X
    2074:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    2076:	88 eb       	ldi	r24, 0xB8	; 184
    2078:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    207e:	10 92 59 22 	sts	0x2259, r1
	transfer.status    = STATUS_OK;
    2082:	10 92 5a 22 	sts	0x225A, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    2086:	e0 ea       	ldi	r30, 0xA0	; 160
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	82 60       	ori	r24, 0x02	; 2
    208e:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    2090:	78 94       	sei

	return STATUS_OK;
}
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	08 95       	ret

00002096 <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	09 f4       	brne	.+2      	; 0x209c <twi_master_transfer+0x6>
    209a:	52 c0       	rjmp	.+164    	; 0x2140 <twi_master_transfer+0xaa>
    209c:	61 15       	cp	r22, r1
    209e:	71 05       	cpc	r23, r1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <twi_master_transfer+0xe>
    20a2:	50 c0       	rjmp	.+160    	; 0x2144 <twi_master_transfer+0xae>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    20a4:	fb 01       	movw	r30, r22
    20a6:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    20a8:	20 91 59 22 	lds	r18, 0x2259
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    20ae:	31 11       	cpse	r19, r1
    20b0:	4b c0       	rjmp	.+150    	; 0x2148 <twi_master_transfer+0xb2>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    20b2:	21 11       	cpse	r18, r1
    20b4:	fc cf       	rjmp	.-8      	; 0x20ae <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    20b6:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    20b8:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    20ba:	31 e0       	ldi	r19, 0x01	; 1
    20bc:	30 93 59 22 	sts	0x2259, r19
	transfer.status = OPERATION_IN_PROGRESS;
    20c0:	30 e8       	ldi	r19, 0x80	; 128
    20c2:	30 93 5a 22 	sts	0x225A, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20c6:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    20c8:	80 93 50 22 	sts	0x2250, r24
    20cc:	90 93 51 22 	sts	0x2251, r25
		transfer.pkg         = (twi_package_t *) package;
    20d0:	60 93 52 22 	sts	0x2252, r22
    20d4:	70 93 53 22 	sts	0x2253, r23
		transfer.addr_count  = 0;
    20d8:	10 92 54 22 	sts	0x2254, r1
    20dc:	10 92 55 22 	sts	0x2255, r1
		transfer.data_count  = 0;
    20e0:	10 92 56 22 	sts	0x2256, r1
    20e4:	10 92 57 22 	sts	0x2257, r1
		transfer.read        = read;
    20e8:	40 93 58 22 	sts	0x2258, r20

		uint8_t const chip = (package->chip) << 1;
    20ec:	fb 01       	movw	r30, r22
    20ee:	50 81       	ld	r21, Z
    20f0:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    20f2:	24 81       	ldd	r18, Z+4	; 0x04
    20f4:	35 81       	ldd	r19, Z+5	; 0x05
    20f6:	23 2b       	or	r18, r19
    20f8:	11 f4       	brne	.+4      	; 0x20fe <twi_master_transfer+0x68>
    20fa:	41 11       	cpse	r20, r1
    20fc:	03 c0       	rjmp	.+6      	; 0x2104 <twi_master_transfer+0x6e>
			transfer.bus->MASTER.ADDR = chip;
    20fe:	fc 01       	movw	r30, r24
    2100:	56 83       	std	Z+6, r21	; 0x06
    2102:	03 c0       	rjmp	.+6      	; 0x210a <twi_master_transfer+0x74>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    2104:	51 60       	ori	r21, 0x01	; 1
    2106:	fc 01       	movw	r30, r24
    2108:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    210a:	ea e5       	ldi	r30, 0x5A	; 90
    210c:	f2 e2       	ldi	r31, 0x22	; 34
    210e:	80 81       	ld	r24, Z
    2110:	80 38       	cpi	r24, 0x80	; 128
    2112:	e9 f3       	breq	.-6      	; 0x210e <twi_master_transfer+0x78>

	while (! twim_idle(transfer.bus)) { barrier(); }
    2114:	e0 91 50 22 	lds	r30, 0x2250
    2118:	f0 91 51 22 	lds	r31, 0x2251
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    211c:	84 81       	ldd	r24, Z+4	; 0x04
    211e:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	49 f0       	breq	.+18     	; 0x2136 <twi_master_transfer+0xa0>
    2124:	a0 e5       	ldi	r26, 0x50	; 80
    2126:	b2 e2       	ldi	r27, 0x22	; 34
    2128:	ed 91       	ld	r30, X+
    212a:	fc 91       	ld	r31, X
    212c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    212e:	84 81       	ldd	r24, Z+4	; 0x04
    2130:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	c9 f7       	brne	.-14     	; 0x2128 <twi_master_transfer+0x92>

	status_code_t const status = transfer.status;
    2136:	80 91 5a 22 	lds	r24, 0x225A

	transfer.locked = false;
    213a:	10 92 59 22 	sts	0x2259, r1
    213e:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    2140:	88 ef       	ldi	r24, 0xF8	; 248
    2142:	08 95       	ret
    2144:	88 ef       	ldi	r24, 0xF8	; 248
    2146:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    2148:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    214a:	08 95       	ret

0000214c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    214c:	fc 01       	movw	r30, r24
    214e:	81 81       	ldd	r24, Z+1	; 0x01
    2150:	85 ff       	sbrs	r24, 5
    2152:	fd cf       	rjmp	.-6      	; 0x214e <usart_putchar+0x2>
    2154:	60 83       	st	Z, r22
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	08 95       	ret

0000215c <usart_getchar>:
    215c:	fc 01       	movw	r30, r24
    215e:	81 81       	ldd	r24, Z+1	; 0x01
    2160:	88 23       	and	r24, r24
    2162:	ec f7       	brge	.-6      	; 0x215e <usart_getchar+0x2>
    2164:	80 81       	ld	r24, Z
    2166:	08 95       	ret

00002168 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2168:	4f 92       	push	r4
    216a:	5f 92       	push	r5
    216c:	6f 92       	push	r6
    216e:	7f 92       	push	r7
    2170:	8f 92       	push	r8
    2172:	9f 92       	push	r9
    2174:	af 92       	push	r10
    2176:	bf 92       	push	r11
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	ec 01       	movw	r28, r24
    218a:	4a 01       	movw	r8, r20
    218c:	5b 01       	movw	r10, r22
    218e:	28 01       	movw	r4, r16
    2190:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2192:	d9 01       	movw	r26, r18
    2194:	c8 01       	movw	r24, r16
    2196:	68 94       	set
    2198:	12 f8       	bld	r1, 2
    219a:	b6 95       	lsr	r27
    219c:	a7 95       	ror	r26
    219e:	97 95       	ror	r25
    21a0:	87 95       	ror	r24
    21a2:	16 94       	lsr	r1
    21a4:	d1 f7       	brne	.-12     	; 0x219a <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    21a6:	b9 01       	movw	r22, r18
    21a8:	a8 01       	movw	r20, r16
    21aa:	03 2e       	mov	r0, r19
    21ac:	36 e1       	ldi	r19, 0x16	; 22
    21ae:	76 95       	lsr	r23
    21b0:	67 95       	ror	r22
    21b2:	57 95       	ror	r21
    21b4:	47 95       	ror	r20
    21b6:	3a 95       	dec	r19
    21b8:	d1 f7       	brne	.-12     	; 0x21ae <usart_set_baudrate+0x46>
    21ba:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    21bc:	2c 81       	ldd	r18, Y+4	; 0x04
    21be:	22 fd       	sbrc	r18, 2
    21c0:	08 c0       	rjmp	.+16     	; 0x21d2 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    21c2:	b6 95       	lsr	r27
    21c4:	a7 95       	ror	r26
    21c6:	97 95       	ror	r25
    21c8:	87 95       	ror	r24
		min_rate /= 2;
    21ca:	76 95       	lsr	r23
    21cc:	67 95       	ror	r22
    21ce:	57 95       	ror	r21
    21d0:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    21d2:	88 15       	cp	r24, r8
    21d4:	99 05       	cpc	r25, r9
    21d6:	aa 05       	cpc	r26, r10
    21d8:	bb 05       	cpc	r27, r11
    21da:	08 f4       	brcc	.+2      	; 0x21de <usart_set_baudrate+0x76>
    21dc:	aa c0       	rjmp	.+340    	; 0x2332 <usart_set_baudrate+0x1ca>
    21de:	84 16       	cp	r8, r20
    21e0:	95 06       	cpc	r9, r21
    21e2:	a6 06       	cpc	r10, r22
    21e4:	b7 06       	cpc	r11, r23
    21e6:	08 f4       	brcc	.+2      	; 0x21ea <usart_set_baudrate+0x82>
    21e8:	a6 c0       	rjmp	.+332    	; 0x2336 <usart_set_baudrate+0x1ce>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	82 fd       	sbrc	r24, 2
    21ee:	04 c0       	rjmp	.+8      	; 0x21f8 <usart_set_baudrate+0x90>
		baud *= 2;
    21f0:	88 0c       	add	r8, r8
    21f2:	99 1c       	adc	r9, r9
    21f4:	aa 1c       	adc	r10, r10
    21f6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    21f8:	c3 01       	movw	r24, r6
    21fa:	b2 01       	movw	r22, r4
    21fc:	a5 01       	movw	r20, r10
    21fe:	94 01       	movw	r18, r8
    2200:	25 d7       	rcall	.+3658   	; 0x304c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2202:	2f 3f       	cpi	r18, 0xFF	; 255
    2204:	31 05       	cpc	r19, r1
    2206:	41 05       	cpc	r20, r1
    2208:	51 05       	cpc	r21, r1
    220a:	08 f4       	brcc	.+2      	; 0x220e <usart_set_baudrate+0xa6>
    220c:	96 c0       	rjmp	.+300    	; 0x233a <usart_set_baudrate+0x1d2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    220e:	c1 2c       	mov	r12, r1
    2210:	d1 2c       	mov	r13, r1
    2212:	76 01       	movw	r14, r12
    2214:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2216:	19 ef       	ldi	r17, 0xF9	; 249
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    221a:	2c 15       	cp	r18, r12
    221c:	3d 05       	cpc	r19, r13
    221e:	4e 05       	cpc	r20, r14
    2220:	5f 05       	cpc	r21, r15
    2222:	68 f0       	brcs	.+26     	; 0x223e <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    2224:	cc 0c       	add	r12, r12
    2226:	dd 1c       	adc	r13, r13
    2228:	ee 1c       	adc	r14, r14
    222a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    222c:	1d 3f       	cpi	r17, 0xFD	; 253
    222e:	14 f4       	brge	.+4      	; 0x2234 <usart_set_baudrate+0xcc>
			limit |= 1;
    2230:	68 94       	set
    2232:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2234:	1f 5f       	subi	r17, 0xFF	; 255
    2236:	17 30       	cpi	r17, 0x07	; 7
    2238:	81 f7       	brne	.-32     	; 0x221a <usart_set_baudrate+0xb2>
    223a:	21 2f       	mov	r18, r17
    223c:	52 c0       	rjmp	.+164    	; 0x22e2 <usart_set_baudrate+0x17a>
    223e:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2240:	11 23       	and	r17, r17
    2242:	0c f0       	brlt	.+2      	; 0x2246 <usart_set_baudrate+0xde>
    2244:	4e c0       	rjmp	.+156    	; 0x22e2 <usart_set_baudrate+0x17a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2246:	d5 01       	movw	r26, r10
    2248:	c4 01       	movw	r24, r8
    224a:	88 0f       	add	r24, r24
    224c:	99 1f       	adc	r25, r25
    224e:	aa 1f       	adc	r26, r26
    2250:	bb 1f       	adc	r27, r27
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	aa 1f       	adc	r26, r26
    2258:	bb 1f       	adc	r27, r27
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	aa 1f       	adc	r26, r26
    2260:	bb 1f       	adc	r27, r27
    2262:	48 1a       	sub	r4, r24
    2264:	59 0a       	sbc	r5, r25
    2266:	6a 0a       	sbc	r6, r26
    2268:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    226a:	1e 3f       	cpi	r17, 0xFE	; 254
    226c:	ec f4       	brge	.+58     	; 0x22a8 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    226e:	6d ef       	ldi	r22, 0xFD	; 253
    2270:	7f ef       	ldi	r23, 0xFF	; 255
    2272:	61 1b       	sub	r22, r17
    2274:	71 09       	sbc	r23, r1
    2276:	17 fd       	sbrc	r17, 7
    2278:	73 95       	inc	r23
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <usart_set_baudrate+0x11c>
    227c:	44 0c       	add	r4, r4
    227e:	55 1c       	adc	r5, r5
    2280:	66 1c       	adc	r6, r6
    2282:	77 1c       	adc	r7, r7
    2284:	6a 95       	dec	r22
    2286:	d2 f7       	brpl	.-12     	; 0x227c <usart_set_baudrate+0x114>
    2288:	d5 01       	movw	r26, r10
    228a:	c4 01       	movw	r24, r8
    228c:	b6 95       	lsr	r27
    228e:	a7 95       	ror	r26
    2290:	97 95       	ror	r25
    2292:	87 95       	ror	r24
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	64 0d       	add	r22, r4
    229a:	75 1d       	adc	r23, r5
    229c:	86 1d       	adc	r24, r6
    229e:	97 1d       	adc	r25, r7
    22a0:	a5 01       	movw	r20, r10
    22a2:	94 01       	movw	r18, r8
    22a4:	d3 d6       	rcall	.+3494   	; 0x304c <__udivmodsi4>
    22a6:	3c c0       	rjmp	.+120    	; 0x2320 <usart_set_baudrate+0x1b8>
		} else {
			baud <<= exp + 3;
    22a8:	21 2f       	mov	r18, r17
    22aa:	33 27       	eor	r19, r19
    22ac:	27 fd       	sbrc	r18, 7
    22ae:	30 95       	com	r19
    22b0:	2d 5f       	subi	r18, 0xFD	; 253
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	d5 01       	movw	r26, r10
    22b6:	c4 01       	movw	r24, r8
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <usart_set_baudrate+0x15a>
    22ba:	88 0f       	add	r24, r24
    22bc:	99 1f       	adc	r25, r25
    22be:	aa 1f       	adc	r26, r26
    22c0:	bb 1f       	adc	r27, r27
    22c2:	2a 95       	dec	r18
    22c4:	d2 f7       	brpl	.-12     	; 0x22ba <usart_set_baudrate+0x152>
    22c6:	9c 01       	movw	r18, r24
    22c8:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    22ca:	b6 95       	lsr	r27
    22cc:	a7 95       	ror	r26
    22ce:	97 95       	ror	r25
    22d0:	87 95       	ror	r24
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	64 0d       	add	r22, r4
    22d8:	75 1d       	adc	r23, r5
    22da:	86 1d       	adc	r24, r6
    22dc:	97 1d       	adc	r25, r7
    22de:	b6 d6       	rcall	.+3436   	; 0x304c <__udivmodsi4>
    22e0:	1f c0       	rjmp	.+62     	; 0x2320 <usart_set_baudrate+0x1b8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    22e2:	33 27       	eor	r19, r19
    22e4:	27 fd       	sbrc	r18, 7
    22e6:	30 95       	com	r19
    22e8:	2d 5f       	subi	r18, 0xFD	; 253
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	d5 01       	movw	r26, r10
    22ee:	c4 01       	movw	r24, r8
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <usart_set_baudrate+0x192>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	aa 1f       	adc	r26, r26
    22f8:	bb 1f       	adc	r27, r27
    22fa:	2a 95       	dec	r18
    22fc:	d2 f7       	brpl	.-12     	; 0x22f2 <usart_set_baudrate+0x18a>
    22fe:	9c 01       	movw	r18, r24
    2300:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    2302:	b6 95       	lsr	r27
    2304:	a7 95       	ror	r26
    2306:	97 95       	ror	r25
    2308:	87 95       	ror	r24
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	64 0d       	add	r22, r4
    2310:	75 1d       	adc	r23, r5
    2312:	86 1d       	adc	r24, r6
    2314:	97 1d       	adc	r25, r7
    2316:	9a d6       	rcall	.+3380   	; 0x304c <__udivmodsi4>
    2318:	21 50       	subi	r18, 0x01	; 1
    231a:	31 09       	sbc	r19, r1
    231c:	41 09       	sbc	r20, r1
    231e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    2320:	83 2f       	mov	r24, r19
    2322:	8f 70       	andi	r24, 0x0F	; 15
    2324:	12 95       	swap	r17
    2326:	10 7f       	andi	r17, 0xF0	; 240
    2328:	18 2b       	or	r17, r24
    232a:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    232c:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	18 c0       	rjmp	.+48     	; 0x2362 <usart_set_baudrate+0x1fa>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	16 c0       	rjmp	.+44     	; 0x2362 <usart_set_baudrate+0x1fa>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	14 c0       	rjmp	.+40     	; 0x2362 <usart_set_baudrate+0x1fa>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    233a:	d5 01       	movw	r26, r10
    233c:	c4 01       	movw	r24, r8
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	aa 1f       	adc	r26, r26
    2344:	bb 1f       	adc	r27, r27
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	aa 1f       	adc	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	48 1a       	sub	r4, r24
    2358:	59 0a       	sbc	r5, r25
    235a:	6a 0a       	sbc	r6, r26
    235c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    235e:	19 ef       	ldi	r17, 0xF9	; 249
    2360:	86 cf       	rjmp	.-244    	; 0x226e <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	df 90       	pop	r13
    2370:	cf 90       	pop	r12
    2372:	bf 90       	pop	r11
    2374:	af 90       	pop	r10
    2376:	9f 90       	pop	r9
    2378:	8f 90       	pop	r8
    237a:	7f 90       	pop	r7
    237c:	6f 90       	pop	r6
    237e:	5f 90       	pop	r5
    2380:	4f 90       	pop	r4
    2382:	08 95       	ret

00002384 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	ec 01       	movw	r28, r24
    238e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	09 f4       	brne	.+2      	; 0x2396 <usart_init_rs232+0x12>
    2394:	5d c1       	rjmp	.+698    	; 0x2650 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2396:	80 3c       	cpi	r24, 0xC0	; 192
    2398:	91 05       	cpc	r25, r1
    239a:	29 f4       	brne	.+10     	; 0x23a6 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    239c:	60 e1       	ldi	r22, 0x10	; 16
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23a4:	55 c1       	rjmp	.+682    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    23a6:	c0 34       	cpi	r28, 0x40	; 64
    23a8:	84 e0       	ldi	r24, 0x04	; 4
    23aa:	d8 07       	cpc	r29, r24
    23ac:	29 f4       	brne	.+10     	; 0x23b8 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    23ae:	68 e0       	ldi	r22, 0x08	; 8
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23b6:	4c c1       	rjmp	.+664    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    23b8:	c1 15       	cp	r28, r1
    23ba:	e4 e0       	ldi	r30, 0x04	; 4
    23bc:	de 07       	cpc	r29, r30
    23be:	29 f4       	brne	.+10     	; 0x23ca <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    23c0:	64 e0       	ldi	r22, 0x04	; 4
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23c8:	43 c1       	rjmp	.+646    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    23ca:	c0 38       	cpi	r28, 0x80	; 128
    23cc:	f1 e0       	ldi	r31, 0x01	; 1
    23ce:	df 07       	cpc	r29, r31
    23d0:	29 f4       	brne	.+10     	; 0x23dc <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23da:	3a c1       	rjmp	.+628    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    23dc:	c1 15       	cp	r28, r1
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	d8 07       	cpc	r29, r24
    23e2:	29 f4       	brne	.+10     	; 0x23ee <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23ec:	31 c1       	rjmp	.+610    	; 0x2650 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    23ee:	c0 38       	cpi	r28, 0x80	; 128
    23f0:	e3 e0       	ldi	r30, 0x03	; 3
    23f2:	de 07       	cpc	r29, r30
    23f4:	29 f4       	brne	.+10     	; 0x2400 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    23fe:	28 c1       	rjmp	.+592    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2400:	c0 39       	cpi	r28, 0x90	; 144
    2402:	f3 e0       	ldi	r31, 0x03	; 3
    2404:	df 07       	cpc	r29, r31
    2406:	29 f4       	brne	.+10     	; 0x2412 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2408:	61 e0       	ldi	r22, 0x01	; 1
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2410:	1f c1       	rjmp	.+574    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2412:	c1 15       	cp	r28, r1
    2414:	82 e0       	ldi	r24, 0x02	; 2
    2416:	d8 07       	cpc	r29, r24
    2418:	29 f4       	brne	.+10     	; 0x2424 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2422:	16 c1       	rjmp	.+556    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2424:	c0 34       	cpi	r28, 0x40	; 64
    2426:	e2 e0       	ldi	r30, 0x02	; 2
    2428:	de 07       	cpc	r29, r30
    242a:	29 f4       	brne	.+10     	; 0x2436 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2434:	0d c1       	rjmp	.+538    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2436:	c1 15       	cp	r28, r1
    2438:	f3 e0       	ldi	r31, 0x03	; 3
    243a:	df 07       	cpc	r29, r31
    243c:	29 f4       	brne	.+10     	; 0x2448 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    243e:	64 e0       	ldi	r22, 0x04	; 4
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2446:	04 c1       	rjmp	.+520    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2448:	c0 32       	cpi	r28, 0x20	; 32
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	d8 07       	cpc	r29, r24
    244e:	29 f4       	brne	.+10     	; 0x245a <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2458:	fb c0       	rjmp	.+502    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    245a:	c1 15       	cp	r28, r1
    245c:	e8 e0       	ldi	r30, 0x08	; 8
    245e:	de 07       	cpc	r29, r30
    2460:	29 f4       	brne	.+10     	; 0x246c <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    246a:	f2 c0       	rjmp	.+484    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    246c:	c1 15       	cp	r28, r1
    246e:	f9 e0       	ldi	r31, 0x09	; 9
    2470:	df 07       	cpc	r29, r31
    2472:	29 f4       	brne	.+10     	; 0x247e <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	84 e0       	ldi	r24, 0x04	; 4
    2478:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    247c:	e9 c0       	rjmp	.+466    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    247e:	c1 15       	cp	r28, r1
    2480:	8a e0       	ldi	r24, 0x0A	; 10
    2482:	d8 07       	cpc	r29, r24
    2484:	29 f4       	brne	.+10     	; 0x2490 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2486:	61 e0       	ldi	r22, 0x01	; 1
    2488:	85 e0       	ldi	r24, 0x05	; 5
    248a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    248e:	e0 c0       	rjmp	.+448    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2490:	c1 15       	cp	r28, r1
    2492:	eb e0       	ldi	r30, 0x0B	; 11
    2494:	de 07       	cpc	r29, r30
    2496:	29 f4       	brne	.+10     	; 0x24a2 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2498:	61 e0       	ldi	r22, 0x01	; 1
    249a:	86 e0       	ldi	r24, 0x06	; 6
    249c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24a0:	d7 c0       	rjmp	.+430    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    24a2:	c0 34       	cpi	r28, 0x40	; 64
    24a4:	f8 e0       	ldi	r31, 0x08	; 8
    24a6:	df 07       	cpc	r29, r31
    24a8:	29 f4       	brne	.+10     	; 0x24b4 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	83 e0       	ldi	r24, 0x03	; 3
    24ae:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24b2:	ce c0       	rjmp	.+412    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    24b4:	c0 34       	cpi	r28, 0x40	; 64
    24b6:	89 e0       	ldi	r24, 0x09	; 9
    24b8:	d8 07       	cpc	r29, r24
    24ba:	29 f4       	brne	.+10     	; 0x24c6 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	84 e0       	ldi	r24, 0x04	; 4
    24c0:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24c4:	c5 c0       	rjmp	.+394    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    24c6:	c0 34       	cpi	r28, 0x40	; 64
    24c8:	ea e0       	ldi	r30, 0x0A	; 10
    24ca:	de 07       	cpc	r29, r30
    24cc:	29 f4       	brne	.+10     	; 0x24d8 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    24ce:	62 e0       	ldi	r22, 0x02	; 2
    24d0:	85 e0       	ldi	r24, 0x05	; 5
    24d2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24d6:	bc c0       	rjmp	.+376    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    24d8:	c0 34       	cpi	r28, 0x40	; 64
    24da:	fb e0       	ldi	r31, 0x0B	; 11
    24dc:	df 07       	cpc	r29, r31
    24de:	29 f4       	brne	.+10     	; 0x24ea <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    24e0:	62 e0       	ldi	r22, 0x02	; 2
    24e2:	86 e0       	ldi	r24, 0x06	; 6
    24e4:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24e8:	b3 c0       	rjmp	.+358    	; 0x2650 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    24ea:	c0 39       	cpi	r28, 0x90	; 144
    24ec:	88 e0       	ldi	r24, 0x08	; 8
    24ee:	d8 07       	cpc	r29, r24
    24f0:	29 f4       	brne	.+10     	; 0x24fc <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    24f2:	64 e0       	ldi	r22, 0x04	; 4
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    24fa:	aa c0       	rjmp	.+340    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    24fc:	c0 39       	cpi	r28, 0x90	; 144
    24fe:	e9 e0       	ldi	r30, 0x09	; 9
    2500:	de 07       	cpc	r29, r30
    2502:	29 f4       	brne	.+10     	; 0x250e <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	84 e0       	ldi	r24, 0x04	; 4
    2508:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    250c:	a1 c0       	rjmp	.+322    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    250e:	c0 39       	cpi	r28, 0x90	; 144
    2510:	fa e0       	ldi	r31, 0x0A	; 10
    2512:	df 07       	cpc	r29, r31
    2514:	29 f4       	brne	.+10     	; 0x2520 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2516:	64 e0       	ldi	r22, 0x04	; 4
    2518:	85 e0       	ldi	r24, 0x05	; 5
    251a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    251e:	98 c0       	rjmp	.+304    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2520:	c0 39       	cpi	r28, 0x90	; 144
    2522:	8b e0       	ldi	r24, 0x0B	; 11
    2524:	d8 07       	cpc	r29, r24
    2526:	29 f4       	brne	.+10     	; 0x2532 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	86 e0       	ldi	r24, 0x06	; 6
    252c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2530:	8f c0       	rjmp	.+286    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2532:	c0 3c       	cpi	r28, 0xC0	; 192
    2534:	e8 e0       	ldi	r30, 0x08	; 8
    2536:	de 07       	cpc	r29, r30
    2538:	29 f4       	brne	.+10     	; 0x2544 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    253a:	68 e0       	ldi	r22, 0x08	; 8
    253c:	83 e0       	ldi	r24, 0x03	; 3
    253e:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2542:	86 c0       	rjmp	.+268    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2544:	c0 3c       	cpi	r28, 0xC0	; 192
    2546:	f9 e0       	ldi	r31, 0x09	; 9
    2548:	df 07       	cpc	r29, r31
    254a:	29 f4       	brne	.+10     	; 0x2556 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    254c:	68 e0       	ldi	r22, 0x08	; 8
    254e:	84 e0       	ldi	r24, 0x04	; 4
    2550:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2554:	7d c0       	rjmp	.+250    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2556:	c0 3c       	cpi	r28, 0xC0	; 192
    2558:	8a e0       	ldi	r24, 0x0A	; 10
    255a:	d8 07       	cpc	r29, r24
    255c:	29 f4       	brne	.+10     	; 0x2568 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    255e:	68 e0       	ldi	r22, 0x08	; 8
    2560:	85 e0       	ldi	r24, 0x05	; 5
    2562:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2566:	74 c0       	rjmp	.+232    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2568:	c0 3c       	cpi	r28, 0xC0	; 192
    256a:	eb e0       	ldi	r30, 0x0B	; 11
    256c:	de 07       	cpc	r29, r30
    256e:	29 f4       	brne	.+10     	; 0x257a <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2570:	68 e0       	ldi	r22, 0x08	; 8
    2572:	86 e0       	ldi	r24, 0x06	; 6
    2574:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2578:	6b c0       	rjmp	.+214    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    257a:	c0 3a       	cpi	r28, 0xA0	; 160
    257c:	f8 e0       	ldi	r31, 0x08	; 8
    257e:	df 07       	cpc	r29, r31
    2580:	29 f4       	brne	.+10     	; 0x258c <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2582:	60 e1       	ldi	r22, 0x10	; 16
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    258a:	62 c0       	rjmp	.+196    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    258c:	c0 3a       	cpi	r28, 0xA0	; 160
    258e:	89 e0       	ldi	r24, 0x09	; 9
    2590:	d8 07       	cpc	r29, r24
    2592:	29 f4       	brne	.+10     	; 0x259e <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2594:	60 e1       	ldi	r22, 0x10	; 16
    2596:	84 e0       	ldi	r24, 0x04	; 4
    2598:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    259c:	59 c0       	rjmp	.+178    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    259e:	c0 3a       	cpi	r28, 0xA0	; 160
    25a0:	ea e0       	ldi	r30, 0x0A	; 10
    25a2:	de 07       	cpc	r29, r30
    25a4:	29 f4       	brne	.+10     	; 0x25b0 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    25a6:	60 e1       	ldi	r22, 0x10	; 16
    25a8:	85 e0       	ldi	r24, 0x05	; 5
    25aa:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    25ae:	50 c0       	rjmp	.+160    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    25b0:	c0 3a       	cpi	r28, 0xA0	; 160
    25b2:	fb e0       	ldi	r31, 0x0B	; 11
    25b4:	df 07       	cpc	r29, r31
    25b6:	29 f4       	brne	.+10     	; 0x25c2 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    25b8:	60 e1       	ldi	r22, 0x10	; 16
    25ba:	86 e0       	ldi	r24, 0x06	; 6
    25bc:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    25c0:	47 c0       	rjmp	.+142    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    25c2:	c0 3b       	cpi	r28, 0xB0	; 176
    25c4:	88 e0       	ldi	r24, 0x08	; 8
    25c6:	d8 07       	cpc	r29, r24
    25c8:	29 f4       	brne	.+10     	; 0x25d4 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    25ca:	60 e2       	ldi	r22, 0x20	; 32
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    25d2:	3e c0       	rjmp	.+124    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    25d4:	c0 3b       	cpi	r28, 0xB0	; 176
    25d6:	e9 e0       	ldi	r30, 0x09	; 9
    25d8:	de 07       	cpc	r29, r30
    25da:	29 f4       	brne	.+10     	; 0x25e6 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    25dc:	60 e2       	ldi	r22, 0x20	; 32
    25de:	84 e0       	ldi	r24, 0x04	; 4
    25e0:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    25e4:	35 c0       	rjmp	.+106    	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    25e6:	c0 3b       	cpi	r28, 0xB0	; 176
    25e8:	fa e0       	ldi	r31, 0x0A	; 10
    25ea:	df 07       	cpc	r29, r31
    25ec:	29 f4       	brne	.+10     	; 0x25f8 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    25ee:	60 e2       	ldi	r22, 0x20	; 32
    25f0:	85 e0       	ldi	r24, 0x05	; 5
    25f2:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    25f6:	2c c0       	rjmp	.+88     	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    25f8:	c0 3b       	cpi	r28, 0xB0	; 176
    25fa:	8b e0       	ldi	r24, 0x0B	; 11
    25fc:	d8 07       	cpc	r29, r24
    25fe:	29 f4       	brne	.+10     	; 0x260a <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2600:	60 e2       	ldi	r22, 0x20	; 32
    2602:	86 e0       	ldi	r24, 0x06	; 6
    2604:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    2608:	23 c0       	rjmp	.+70     	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    260a:	c0 38       	cpi	r28, 0x80	; 128
    260c:	e4 e0       	ldi	r30, 0x04	; 4
    260e:	de 07       	cpc	r29, r30
    2610:	29 f4       	brne	.+10     	; 0x261c <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2612:	60 e4       	ldi	r22, 0x40	; 64
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    261a:	1a c0       	rjmp	.+52     	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    261c:	c0 39       	cpi	r28, 0x90	; 144
    261e:	f4 e0       	ldi	r31, 0x04	; 4
    2620:	df 07       	cpc	r29, r31
    2622:	29 f4       	brne	.+10     	; 0x262e <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2624:	60 e4       	ldi	r22, 0x40	; 64
    2626:	84 e0       	ldi	r24, 0x04	; 4
    2628:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    262c:	11 c0       	rjmp	.+34     	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    262e:	c0 3a       	cpi	r28, 0xA0	; 160
    2630:	84 e0       	ldi	r24, 0x04	; 4
    2632:	d8 07       	cpc	r29, r24
    2634:	29 f4       	brne	.+10     	; 0x2640 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2636:	60 e4       	ldi	r22, 0x40	; 64
    2638:	85 e0       	ldi	r24, 0x05	; 5
    263a:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2640:	c0 3b       	cpi	r28, 0xB0	; 176
    2642:	e4 e0       	ldi	r30, 0x04	; 4
    2644:	de 07       	cpc	r29, r30
    2646:	21 f4       	brne	.+8      	; 0x2650 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2648:	60 e4       	ldi	r22, 0x40	; 64
    264a:	86 e0       	ldi	r24, 0x06	; 6
    264c:	0e 94 bf 02 	call	0x57e	; 0x57e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	8f 73       	andi	r24, 0x3F	; 63
    2654:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    2656:	f8 01       	movw	r30, r16
    2658:	94 81       	ldd	r25, Z+4	; 0x04
    265a:	85 81       	ldd	r24, Z+5	; 0x05
    265c:	89 2b       	or	r24, r25
    265e:	96 81       	ldd	r25, Z+6	; 0x06
    2660:	99 23       	and	r25, r25
    2662:	11 f0       	breq	.+4      	; 0x2668 <usart_init_rs232+0x2e4>
    2664:	98 e0       	ldi	r25, 0x08	; 8
    2666:	01 c0       	rjmp	.+2      	; 0x266a <usart_init_rs232+0x2e6>
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	89 2b       	or	r24, r25
    266c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    266e:	f8 01       	movw	r30, r16
    2670:	40 81       	ld	r20, Z
    2672:	51 81       	ldd	r21, Z+1	; 0x01
    2674:	62 81       	ldd	r22, Z+2	; 0x02
    2676:	73 81       	ldd	r23, Z+3	; 0x03
    2678:	00 e0       	ldi	r16, 0x00	; 0
    267a:	18 e4       	ldi	r17, 0x48	; 72
    267c:	28 ee       	ldi	r18, 0xE8	; 232
    267e:	31 e0       	ldi	r19, 0x01	; 1
    2680:	ce 01       	movw	r24, r28
    2682:	72 dd       	rcall	.-1308   	; 0x2168 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	98 60       	ori	r25, 0x08	; 8
    2688:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	90 61       	ori	r25, 0x10	; 16
    268e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <prompt_user>:
 *
 * This routine prompts the user to press the button and then waits
 * for him to do so.
 */
static void prompt_user(char *prompt_string)
{
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
	/* Output prompt string */
	printf("%s\r\n", prompt_string);
    269e:	9f 93       	push	r25
    26a0:	8f 93       	push	r24
    26a2:	82 e0       	ldi	r24, 0x02	; 2
    26a4:	92 e2       	ldi	r25, 0x22	; 34
    26a6:	9f 93       	push	r25
    26a8:	8f 93       	push	r24
    26aa:	63 d6       	rcall	.+3270   	; 0x3372 <printf>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26ac:	88 e0       	ldi	r24, 0x08	; 8
    26ae:	e0 e8       	ldi	r30, 0x80	; 128
    26b0:	f6 e0       	ldi	r31, 0x06	; 6
    26b2:	85 83       	std	Z+5, r24	; 0x05
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    26bc:	e0 e6       	ldi	r30, 0x60	; 96
    26be:	f6 e0       	ldi	r31, 0x06	; 6

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    26c0:	c0 e8       	ldi	r28, 0x80	; 128
    26c2:	d6 e0       	ldi	r29, 0x06	; 6
    26c4:	21 e0       	ldi	r18, 0x01	; 1
    26c6:	45 e5       	ldi	r20, 0x55	; 85
    26c8:	53 e2       	ldi	r21, 0x23	; 35
    26ca:	68 e0       	ldi	r22, 0x08	; 8
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	07 c0       	rjmp	.+14     	; 0x26de <prompt_user+0x44>
    26d0:	2f 83       	std	Y+7, r18	; 0x07
    26d2:	db 01       	movw	r26, r22
    26d4:	ca 01       	movw	r24, r20
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	a1 09       	sbc	r26, r1
    26da:	b1 09       	sbc	r27, r1
    26dc:	e1 f7       	brne	.-8      	; 0x26d6 <prompt_user+0x3c>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    26de:	80 85       	ldd	r24, Z+8	; 0x08

	/* Wait for user to push button before continuing */
	LED_Off(ALL_LEDS);

	/* Just blink LED until button is pushed */
	while (!SWITCH_PRESSED) {
    26e0:	80 fd       	sbrc	r24, 0
    26e2:	f6 cf       	rjmp	.-20     	; 0x26d0 <prompt_user+0x36>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	e0 e8       	ldi	r30, 0x80	; 128
    26e8:	f6 e0       	ldi	r31, 0x06	; 6
    26ea:	85 83       	std	Z+5, r24	; 0x05

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    26ec:	e0 e6       	ldi	r30, 0x60	; 96
    26ee:	f6 e0       	ldi	r31, 0x06	; 6
    26f0:	80 85       	ldd	r24, Z+8	; 0x08
	}

	LED_Off(PROMPT_LED);

	/* Wait until button is released */
	while (SWITCH_PRESSED) {
    26f2:	80 ff       	sbrs	r24, 0
    26f4:	fd cf       	rjmp	.-6      	; 0x26f0 <prompt_user+0x56>
	}
}
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <main>:
 * proximity readings, unless they are overwritten by an application
 * calling the sensor_set_threshold function for the proximity sensor
 * channel(s).
 */
int main(void)
{
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	a2 97       	sbiw	r28, 0x22	; 34
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	de bf       	out	0x3e, r29	; 62

	/* Initialize the board (Xplained UC3 or XMEGA & Xplained Sensor boards)
	 * I/O pin mappings and any other configurable resources selected in
	 * the build configuration.
	 */
	sensor_platform_init();
    270a:	6f d9       	rcall	.-3362   	; 0x19ea <sensor_platform_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    270c:	88 e0       	ldi	r24, 0x08	; 8
    270e:	e0 e8       	ldi	r30, 0x80	; 128
    2710:	f6 e0       	ldi	r31, 0x06	; 6
    2712:	86 83       	std	Z+6, r24	; 0x06

	LED_On(ALL_LEDS);

	/* Wait for user to press button to start */
	prompt_user("Press button to start");
    2714:	8d ec       	ldi	r24, 0xCD	; 205
    2716:	90 e2       	ldi	r25, 0x20	; 32
    2718:	c0 df       	rcall	.-128    	; 0x269a <prompt_user>
	
	/* Attach descriptor and initialize the proximity sensor */
	sensor_attach(&prox_dev, SENSOR_TYPE_PROXIMITY, 0, 0);
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	71 e0       	ldi	r23, 0x01	; 1
    2726:	ce 01       	movw	r24, r28
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	0e 94 a4 08 	call	0x1148	; 0x1148 <sensor_attach>
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_channel(sensor_t *sensor, int16_t channel)
{
	sensor->channel = channel;
    272e:	8f ef       	ldi	r24, 0xFF	; 255
    2730:	9f ef       	ldi	r25, 0xFF	; 255
    2732:	8a 87       	std	Y+10, r24	; 0x0a
    2734:	9b 87       	std	Y+11, r25	; 0x0b
    2736:	86 e9       	ldi	r24, 0x96	; 150
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	89 a3       	std	Y+33, r24	; 0x21
    273c:	9a a3       	std	Y+34, r25	; 0x22
 *
 * \return  bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_current(sensor_t *sensor, int16_t current_mA)
{
	return sensor_ioctl(sensor, SENSOR_SET_CURRENT, &current_mA);
    273e:	ae 01       	movw	r20, r28
    2740:	4f 5d       	subi	r20, 0xDF	; 223
    2742:	5f 4f       	sbci	r21, 0xFF	; 255
    2744:	64 e1       	ldi	r22, 0x14	; 20
    2746:	ce 01       	movw	r24, r28
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	0e 94 3e 09 	call	0x127c	; 0x127c <sensor_ioctl>
	sensor_set_current(&prox_dev, PROX_CURRENT_mA);
#endif

	/* Set sensor data output formats (for display after calibration
	 * complete) */
	prox_data.scaled = true;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	8e 8f       	std	Y+30, r24	; 0x1e
	
	/* Perform calibration sequence */

	/* Step 1 */
	printf("Setting channel 1: ");
    2752:	83 ee       	ldi	r24, 0xE3	; 227
    2754:	90 e2       	ldi	r25, 0x20	; 32
    2756:	9f 93       	push	r25
    2758:	8f 93       	push	r24
    275a:	0b d6       	rcall	.+3094   	; 0x3372 <printf>
	prompt_user("Place object at desired distance and press button");
    275c:	87 ef       	ldi	r24, 0xF7	; 247
    275e:	90 e2       	ldi	r25, 0x20	; 32
    2760:	9c df       	rcall	.-200    	; 0x269a <prompt_user>
	(void)sensor_calibrate(&prox_dev, MANUAL_CALIBRATE, 1, NULL);
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	ce 01       	movw	r24, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <sensor_calibrate>

	/* Step 2 */
	printf("Setting channel 2: ");
    2774:	89 e2       	ldi	r24, 0x29	; 41
    2776:	91 e2       	ldi	r25, 0x21	; 33
    2778:	9f 93       	push	r25
    277a:	8f 93       	push	r24
    277c:	fa d5       	rcall	.+3060   	; 0x3372 <printf>
	prompt_user("Place object at desired distance and press button");
    277e:	87 ef       	ldi	r24, 0xF7	; 247
    2780:	90 e2       	ldi	r25, 0x20	; 32
    2782:	8b df       	rcall	.-234    	; 0x269a <prompt_user>
	(void)sensor_calibrate(&prox_dev, MANUAL_CALIBRATE, 2, NULL);
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	42 e0       	ldi	r20, 0x02	; 2
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	61 e0       	ldi	r22, 0x01	; 1
    278e:	ce 01       	movw	r24, r28
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <sensor_calibrate>

	/* Step 3 */
	printf("Setting channel 3: ");
    2796:	8d e3       	ldi	r24, 0x3D	; 61
    2798:	91 e2       	ldi	r25, 0x21	; 33
    279a:	9f 93       	push	r25
    279c:	8f 93       	push	r24
    279e:	e9 d5       	rcall	.+3026   	; 0x3372 <printf>
	prompt_user("Place object at desired distance and press button");
    27a0:	87 ef       	ldi	r24, 0xF7	; 247
    27a2:	90 e2       	ldi	r25, 0x20	; 32
    27a4:	7a df       	rcall	.-268    	; 0x269a <prompt_user>
	if (sensor_calibrate(&prox_dev, MANUAL_CALIBRATE, 3, NULL) != true) {
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	43 e0       	ldi	r20, 0x03	; 3
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	61 e0       	ldi	r22, 0x01	; 1
    27b0:	ce 01       	movw	r24, r28
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <sensor_calibrate>
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	81 11       	cpse	r24, r1
    27c6:	15 c0       	rjmp	.+42     	; 0x27f2 <main+0xf6>
		if (prox_dev.err == SENSOR_ERR_IO) {
    27c8:	88 85       	ldd	r24, Y+8	; 0x08
    27ca:	99 85       	ldd	r25, Y+9	; 0x09
    27cc:	81 15       	cp	r24, r1
    27ce:	91 40       	sbci	r25, 0x01	; 1
    27d0:	41 f4       	brne	.+16     	; 0x27e2 <main+0xe6>
			printf("Calibration failure: write error\n\r");
    27d2:	81 e5       	ldi	r24, 0x51	; 81
    27d4:	91 e2       	ldi	r25, 0x21	; 33
    27d6:	9f 93       	push	r25
    27d8:	8f 93       	push	r24
    27da:	cb d5       	rcall	.+2966   	; 0x3372 <printf>
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	07 c0       	rjmp	.+14     	; 0x27f0 <main+0xf4>
		} else {
			printf("Unknown error while calibrating device\n\r");
    27e2:	84 e7       	ldi	r24, 0x74	; 116
    27e4:	91 e2       	ldi	r25, 0x21	; 33
    27e6:	9f 93       	push	r25
    27e8:	8f 93       	push	r24
    27ea:	c3 d5       	rcall	.+2950   	; 0x3372 <printf>
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	ff cf       	rjmp	.-2      	; 0x27f0 <main+0xf4>
 *
 * \return  bool    true if the call succeeds, else false is returned.
 */
static inline bool sensor_set_channel(sensor_t *sensor, int16_t channel)
{
	sensor->channel = channel;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	8a 87       	std	Y+10, r24	; 0x0a
    27f8:	9b 87       	std	Y+11, r25	; 0x0b

	int16_t value;

	/* Display threshold values */
	sensor_set_channel(&prox_dev, 1);
	sensor_get_threshold(&prox_dev, SENSOR_THRESHOLD_NEAR_PROXIMITY,
    27fa:	ae 01       	movw	r20, r28
    27fc:	41 5e       	subi	r20, 0xE1	; 225
    27fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2800:	6a e0       	ldi	r22, 0x0A	; 10
    2802:	ce 01       	movw	r24, r28
    2804:	01 96       	adiw	r24, 0x01	; 1
    2806:	0e 94 0e 09 	call	0x121c	; 0x121c <sensor_get_threshold>
			&value);
	printf("Channel 1 threshold = %d\r\n", value);
    280a:	88 a1       	ldd	r24, Y+32	; 0x20
    280c:	8f 93       	push	r24
    280e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2810:	8f 93       	push	r24
    2812:	8d e9       	ldi	r24, 0x9D	; 157
    2814:	91 e2       	ldi	r25, 0x21	; 33
    2816:	9f 93       	push	r25
    2818:	8f 93       	push	r24
    281a:	ab d5       	rcall	.+2902   	; 0x3372 <printf>
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	8a 87       	std	Y+10, r24	; 0x0a
    2822:	9b 87       	std	Y+11, r25	; 0x0b

	sensor_set_channel(&prox_dev, 2);
	sensor_get_threshold(&prox_dev, SENSOR_THRESHOLD_NEAR_PROXIMITY,
    2824:	ae 01       	movw	r20, r28
    2826:	41 5e       	subi	r20, 0xE1	; 225
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	6a e0       	ldi	r22, 0x0A	; 10
    282c:	ce 01       	movw	r24, r28
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	0e 94 0e 09 	call	0x121c	; 0x121c <sensor_get_threshold>
			&value);
	printf("Channel 2 threshold = %d\r\n", value);
    2834:	88 a1       	ldd	r24, Y+32	; 0x20
    2836:	8f 93       	push	r24
    2838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    283a:	8f 93       	push	r24
    283c:	88 eb       	ldi	r24, 0xB8	; 184
    283e:	91 e2       	ldi	r25, 0x21	; 33
    2840:	9f 93       	push	r25
    2842:	8f 93       	push	r24
    2844:	96 d5       	rcall	.+2860   	; 0x3372 <printf>
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	8a 87       	std	Y+10, r24	; 0x0a
    284c:	9b 87       	std	Y+11, r25	; 0x0b

	sensor_set_channel(&prox_dev, 3);
	sensor_get_threshold(&prox_dev, SENSOR_THRESHOLD_NEAR_PROXIMITY,
    284e:	ae 01       	movw	r20, r28
    2850:	41 5e       	subi	r20, 0xE1	; 225
    2852:	5f 4f       	sbci	r21, 0xFF	; 255
    2854:	6a e0       	ldi	r22, 0x0A	; 10
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 0e 09 	call	0x121c	; 0x121c <sensor_get_threshold>
			&value);
	printf("Channel 3 threshold = %d\r\n", value);
    285e:	88 a1       	ldd	r24, Y+32	; 0x20
    2860:	8f 93       	push	r24
    2862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2864:	8f 93       	push	r24
    2866:	83 ed       	ldi	r24, 0xD3	; 211
    2868:	91 e2       	ldi	r25, 0x21	; 33
    286a:	9f 93       	push	r25
    286c:	8f 93       	push	r24
    286e:	81 d5       	rcall	.+2818   	; 0x3372 <printf>
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	de bf       	out	0x3e, r29	; 62
 */
int main(void)
{
	sensor_t prox_dev;           /* Proximity sensor device */
	sensor_data_t prox_data;     /* Proximity data */
	int led_num = 0;
    2874:	c1 2c       	mov	r12, r1
    2876:	d1 2c       	mov	r13, r1
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2878:	ee 24       	eor	r14, r14
    287a:	e3 94       	inc	r14
    287c:	f1 2c       	mov	r15, r1
		}

		/* Sample proximity and display results for each channel */
		sensor_get_proximity(&prox_dev, &prox_data);

		printf("prox  = 1:%s 2:%s 3:%s\r\n",
    287e:	0e ee       	ldi	r16, 0xEE	; 238
    2880:	11 e2       	ldi	r17, 0x21	; 33
    2882:	0f 2e       	mov	r0, r31
    2884:	fa ea       	ldi	r31, 0xAA	; 170
    2886:	8f 2e       	mov	r8, r31
    2888:	f0 eb       	ldi	r31, 0xB0	; 176
    288a:	9f 2e       	mov	r9, r31
    288c:	f8 e2       	ldi	r31, 0x28	; 40
    288e:	af 2e       	mov	r10, r31
    2890:	b1 2c       	mov	r11, r1
    2892:	f0 2d       	mov	r31, r0
	 * continuously captured and displayed.
	 */

	while (true) {
		/* Change LED display */
		LED_Toggle(led_array [led_num++]);
    2894:	f6 01       	movw	r30, r12
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	ed 5d       	subi	r30, 0xDD	; 221
    28a0:	fd 4d       	sbci	r31, 0xDD	; 221
    28a2:	80 81       	ld	r24, Z
    28a4:	9f ef       	ldi	r25, 0xFF	; 255
    28a6:	c9 1a       	sub	r12, r25
    28a8:	d9 0a       	sbc	r13, r25
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    28aa:	e8 2f       	mov	r30, r24
    28ac:	e6 95       	lsr	r30
    28ae:	e6 95       	lsr	r30
    28b0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    28b2:	20 e2       	ldi	r18, 0x20	; 32
    28b4:	e2 9f       	mul	r30, r18
    28b6:	f0 01       	movw	r30, r0
    28b8:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    28ba:	fa 5f       	subi	r31, 0xFA	; 250
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    28bc:	87 70       	andi	r24, 0x07	; 7
    28be:	97 01       	movw	r18, r14
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <main+0x1ca>
    28c2:	22 0f       	add	r18, r18
    28c4:	33 1f       	adc	r19, r19
    28c6:	8a 95       	dec	r24
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <main+0x1c6>

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    28ca:	27 83       	std	Z+7, r18	; 0x07
		if (led_num >= NUM_BLINK_LEDS) {
    28cc:	34 e0       	ldi	r19, 0x04	; 4
    28ce:	c3 16       	cp	r12, r19
    28d0:	d1 04       	cpc	r13, r1
    28d2:	14 f0       	brlt	.+4      	; 0x28d8 <main+0x1dc>
			led_num = 0;
    28d4:	c1 2c       	mov	r12, r1
    28d6:	d1 2c       	mov	r13, r1
 *
 * \return bool     true if the call succeeds, else false is returned.
 */
static inline bool sensor_get_proximity(sensor_t *sensor, sensor_data_t *data)
{
	return sensor_read(sensor, SENSOR_READ_PROXIMITY, data);
    28d8:	ae 01       	movw	r20, r28
    28da:	42 5f       	subi	r20, 0xF2	; 242
    28dc:	5f 4f       	sbci	r21, 0xFF	; 255
    28de:	67 e0       	ldi	r22, 0x07	; 7
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <sensor_read>
		}

		/* Sample proximity and display results for each channel */
		sensor_get_proximity(&prox_dev, &prox_data);

		printf("prox  = 1:%s 2:%s 3:%s\r\n",
    28e8:	ee 89       	ldd	r30, Y+22	; 0x16
    28ea:	ff 89       	ldd	r31, Y+23	; 0x17
    28ec:	ee 0f       	add	r30, r30
    28ee:	ff 1f       	adc	r31, r31
    28f0:	ed 5c       	subi	r30, 0xCD	; 205
    28f2:	fd 4d       	sbci	r31, 0xDD	; 221
    28f4:	81 81       	ldd	r24, Z+1	; 0x01
    28f6:	8f 93       	push	r24
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 93       	push	r24
    28fc:	ea 89       	ldd	r30, Y+18	; 0x12
    28fe:	fb 89       	ldd	r31, Y+19	; 0x13
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	ed 5c       	subi	r30, 0xCD	; 205
    2906:	fd 4d       	sbci	r31, 0xDD	; 221
    2908:	81 81       	ldd	r24, Z+1	; 0x01
    290a:	8f 93       	push	r24
    290c:	80 81       	ld	r24, Z
    290e:	8f 93       	push	r24
    2910:	ee 85       	ldd	r30, Y+14	; 0x0e
    2912:	ff 85       	ldd	r31, Y+15	; 0x0f
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	ed 5c       	subi	r30, 0xCD	; 205
    291a:	fd 4d       	sbci	r31, 0xDD	; 221
    291c:	81 81       	ldd	r24, Z+1	; 0x01
    291e:	8f 93       	push	r24
    2920:	80 81       	ld	r24, Z
    2922:	8f 93       	push	r24
    2924:	1f 93       	push	r17
    2926:	0f 93       	push	r16
    2928:	24 d5       	rcall	.+2632   	; 0x3372 <printf>
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	d5 01       	movw	r26, r10
    2930:	c4 01       	movw	r24, r8
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	a1 09       	sbc	r26, r1
    2936:	b1 09       	sbc	r27, r1
    2938:	e1 f7       	brne	.-8      	; 0x2932 <main+0x236>
    293a:	ac cf       	rjmp	.-168    	; 0x2894 <main+0x198>

0000293c <vfprintf>:
    293c:	2f 92       	push	r2
    293e:	3f 92       	push	r3
    2940:	4f 92       	push	r4
    2942:	5f 92       	push	r5
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	62 97       	sbiw	r28, 0x12	; 18
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	7c 01       	movw	r14, r24
    296c:	1b 01       	movw	r2, r22
    296e:	6a 01       	movw	r12, r20
    2970:	fc 01       	movw	r30, r24
    2972:	16 82       	std	Z+6, r1	; 0x06
    2974:	17 82       	std	Z+7, r1	; 0x07
    2976:	83 81       	ldd	r24, Z+3	; 0x03
    2978:	81 fd       	sbrc	r24, 1
    297a:	03 c0       	rjmp	.+6      	; 0x2982 <vfprintf+0x46>
    297c:	4e c3       	rjmp	.+1692   	; 0x301a <vfprintf+0x6de>
    297e:	65 01       	movw	r12, r10
    2980:	05 c0       	rjmp	.+10     	; 0x298c <vfprintf+0x50>
    2982:	88 24       	eor	r8, r8
    2984:	83 94       	inc	r8
    2986:	91 2c       	mov	r9, r1
    2988:	8c 0e       	add	r8, r28
    298a:	9d 1e       	adc	r9, r29
    298c:	f7 01       	movw	r30, r14
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	f1 01       	movw	r30, r2
    2992:	93 fd       	sbrc	r25, 3
    2994:	85 91       	lpm	r24, Z+
    2996:	93 ff       	sbrs	r25, 3
    2998:	81 91       	ld	r24, Z+
    299a:	1f 01       	movw	r2, r30
    299c:	88 23       	and	r24, r24
    299e:	09 f4       	brne	.+2      	; 0x29a2 <vfprintf+0x66>
    29a0:	38 c3       	rjmp	.+1648   	; 0x3012 <vfprintf+0x6d6>
    29a2:	85 32       	cpi	r24, 0x25	; 37
    29a4:	39 f4       	brne	.+14     	; 0x29b4 <vfprintf+0x78>
    29a6:	93 fd       	sbrc	r25, 3
    29a8:	85 91       	lpm	r24, Z+
    29aa:	93 ff       	sbrs	r25, 3
    29ac:	81 91       	ld	r24, Z+
    29ae:	1f 01       	movw	r2, r30
    29b0:	85 32       	cpi	r24, 0x25	; 37
    29b2:	29 f4       	brne	.+10     	; 0x29be <vfprintf+0x82>
    29b4:	b7 01       	movw	r22, r14
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	b0 d4       	rcall	.+2400   	; 0x331a <fputc>
    29ba:	56 01       	movw	r10, r12
    29bc:	e0 cf       	rjmp	.-64     	; 0x297e <vfprintf+0x42>
    29be:	71 2c       	mov	r7, r1
    29c0:	61 2c       	mov	r6, r1
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	20 32       	cpi	r18, 0x20	; 32
    29c6:	a8 f4       	brcc	.+42     	; 0x29f2 <vfprintf+0xb6>
    29c8:	8b 32       	cpi	r24, 0x2B	; 43
    29ca:	61 f0       	breq	.+24     	; 0x29e4 <vfprintf+0xa8>
    29cc:	28 f4       	brcc	.+10     	; 0x29d8 <vfprintf+0x9c>
    29ce:	80 32       	cpi	r24, 0x20	; 32
    29d0:	51 f0       	breq	.+20     	; 0x29e6 <vfprintf+0xaa>
    29d2:	83 32       	cpi	r24, 0x23	; 35
    29d4:	71 f4       	brne	.+28     	; 0x29f2 <vfprintf+0xb6>
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <vfprintf+0xb2>
    29d8:	8d 32       	cpi	r24, 0x2D	; 45
    29da:	39 f0       	breq	.+14     	; 0x29ea <vfprintf+0xae>
    29dc:	80 33       	cpi	r24, 0x30	; 48
    29de:	49 f4       	brne	.+18     	; 0x29f2 <vfprintf+0xb6>
    29e0:	21 60       	ori	r18, 0x01	; 1
    29e2:	28 c0       	rjmp	.+80     	; 0x2a34 <vfprintf+0xf8>
    29e4:	22 60       	ori	r18, 0x02	; 2
    29e6:	24 60       	ori	r18, 0x04	; 4
    29e8:	25 c0       	rjmp	.+74     	; 0x2a34 <vfprintf+0xf8>
    29ea:	28 60       	ori	r18, 0x08	; 8
    29ec:	23 c0       	rjmp	.+70     	; 0x2a34 <vfprintf+0xf8>
    29ee:	20 61       	ori	r18, 0x10	; 16
    29f0:	21 c0       	rjmp	.+66     	; 0x2a34 <vfprintf+0xf8>
    29f2:	27 fd       	sbrc	r18, 7
    29f4:	27 c0       	rjmp	.+78     	; 0x2a44 <vfprintf+0x108>
    29f6:	38 2f       	mov	r19, r24
    29f8:	30 53       	subi	r19, 0x30	; 48
    29fa:	3a 30       	cpi	r19, 0x0A	; 10
    29fc:	78 f4       	brcc	.+30     	; 0x2a1c <vfprintf+0xe0>
    29fe:	26 ff       	sbrs	r18, 6
    2a00:	06 c0       	rjmp	.+12     	; 0x2a0e <vfprintf+0xd2>
    2a02:	fa e0       	ldi	r31, 0x0A	; 10
    2a04:	7f 9e       	mul	r7, r31
    2a06:	30 0d       	add	r19, r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	73 2e       	mov	r7, r19
    2a0c:	13 c0       	rjmp	.+38     	; 0x2a34 <vfprintf+0xf8>
    2a0e:	4a e0       	ldi	r20, 0x0A	; 10
    2a10:	64 9e       	mul	r6, r20
    2a12:	30 0d       	add	r19, r0
    2a14:	11 24       	eor	r1, r1
    2a16:	63 2e       	mov	r6, r19
    2a18:	20 62       	ori	r18, 0x20	; 32
    2a1a:	0c c0       	rjmp	.+24     	; 0x2a34 <vfprintf+0xf8>
    2a1c:	8e 32       	cpi	r24, 0x2E	; 46
    2a1e:	21 f4       	brne	.+8      	; 0x2a28 <vfprintf+0xec>
    2a20:	26 fd       	sbrc	r18, 6
    2a22:	f7 c2       	rjmp	.+1518   	; 0x3012 <vfprintf+0x6d6>
    2a24:	20 64       	ori	r18, 0x40	; 64
    2a26:	06 c0       	rjmp	.+12     	; 0x2a34 <vfprintf+0xf8>
    2a28:	8c 36       	cpi	r24, 0x6C	; 108
    2a2a:	11 f4       	brne	.+4      	; 0x2a30 <vfprintf+0xf4>
    2a2c:	20 68       	ori	r18, 0x80	; 128
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <vfprintf+0xf8>
    2a30:	88 36       	cpi	r24, 0x68	; 104
    2a32:	41 f4       	brne	.+16     	; 0x2a44 <vfprintf+0x108>
    2a34:	f1 01       	movw	r30, r2
    2a36:	93 fd       	sbrc	r25, 3
    2a38:	85 91       	lpm	r24, Z+
    2a3a:	93 ff       	sbrs	r25, 3
    2a3c:	81 91       	ld	r24, Z+
    2a3e:	1f 01       	movw	r2, r30
    2a40:	81 11       	cpse	r24, r1
    2a42:	c0 cf       	rjmp	.-128    	; 0x29c4 <vfprintf+0x88>
    2a44:	98 2f       	mov	r25, r24
    2a46:	95 54       	subi	r25, 0x45	; 69
    2a48:	93 30       	cpi	r25, 0x03	; 3
    2a4a:	18 f4       	brcc	.+6      	; 0x2a52 <vfprintf+0x116>
    2a4c:	20 61       	ori	r18, 0x10	; 16
    2a4e:	80 5e       	subi	r24, 0xE0	; 224
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <vfprintf+0x122>
    2a52:	98 2f       	mov	r25, r24
    2a54:	95 56       	subi	r25, 0x65	; 101
    2a56:	93 30       	cpi	r25, 0x03	; 3
    2a58:	08 f0       	brcs	.+2      	; 0x2a5c <vfprintf+0x120>
    2a5a:	94 c1       	rjmp	.+808    	; 0x2d84 <vfprintf+0x448>
    2a5c:	2f 7e       	andi	r18, 0xEF	; 239
    2a5e:	26 fd       	sbrc	r18, 6
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <vfprintf+0x12a>
    2a62:	16 e0       	ldi	r17, 0x06	; 6
    2a64:	71 2e       	mov	r7, r17
    2a66:	bf e3       	ldi	r27, 0x3F	; 63
    2a68:	5b 2e       	mov	r5, r27
    2a6a:	52 22       	and	r5, r18
    2a6c:	85 36       	cpi	r24, 0x65	; 101
    2a6e:	19 f4       	brne	.+6      	; 0x2a76 <vfprintf+0x13a>
    2a70:	f0 e4       	ldi	r31, 0x40	; 64
    2a72:	5f 2a       	or	r5, r31
    2a74:	07 c0       	rjmp	.+14     	; 0x2a84 <vfprintf+0x148>
    2a76:	86 36       	cpi	r24, 0x66	; 102
    2a78:	19 f4       	brne	.+6      	; 0x2a80 <vfprintf+0x144>
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	54 2a       	or	r5, r20
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <vfprintf+0x148>
    2a80:	71 10       	cpse	r7, r1
    2a82:	7a 94       	dec	r7
    2a84:	57 fe       	sbrs	r5, 7
    2a86:	07 c0       	rjmp	.+14     	; 0x2a96 <vfprintf+0x15a>
    2a88:	5b e3       	ldi	r21, 0x3B	; 59
    2a8a:	57 15       	cp	r21, r7
    2a8c:	48 f0       	brcs	.+18     	; 0x2aa0 <vfprintf+0x164>
    2a8e:	47 2c       	mov	r4, r7
    2a90:	43 94       	inc	r4
    2a92:	27 e0       	ldi	r18, 0x07	; 7
    2a94:	0d c0       	rjmp	.+26     	; 0x2ab0 <vfprintf+0x174>
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	87 15       	cp	r24, r7
    2a9a:	30 f0       	brcs	.+12     	; 0x2aa8 <vfprintf+0x16c>
    2a9c:	27 2d       	mov	r18, r7
    2a9e:	07 c0       	rjmp	.+14     	; 0x2aae <vfprintf+0x172>
    2aa0:	27 e0       	ldi	r18, 0x07	; 7
    2aa2:	ac e3       	ldi	r26, 0x3C	; 60
    2aa4:	4a 2e       	mov	r4, r26
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <vfprintf+0x174>
    2aa8:	27 e0       	ldi	r18, 0x07	; 7
    2aaa:	f7 e0       	ldi	r31, 0x07	; 7
    2aac:	7f 2e       	mov	r7, r31
    2aae:	41 2c       	mov	r4, r1
    2ab0:	56 01       	movw	r10, r12
    2ab2:	94 e0       	ldi	r25, 0x04	; 4
    2ab4:	a9 0e       	add	r10, r25
    2ab6:	b1 1c       	adc	r11, r1
    2ab8:	f6 01       	movw	r30, r12
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	04 2d       	mov	r16, r4
    2ac4:	a4 01       	movw	r20, r8
    2ac6:	e4 d2       	rcall	.+1480   	; 0x3090 <__ftoa_engine>
    2ac8:	8c 01       	movw	r16, r24
    2aca:	49 81       	ldd	r20, Y+1	; 0x01
    2acc:	4c 87       	std	Y+12, r20	; 0x0c
    2ace:	40 ff       	sbrs	r20, 0
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <vfprintf+0x19a>
    2ad2:	43 ff       	sbrs	r20, 3
    2ad4:	07 c0       	rjmp	.+14     	; 0x2ae4 <vfprintf+0x1a8>
    2ad6:	51 fc       	sbrc	r5, 1
    2ad8:	08 c0       	rjmp	.+16     	; 0x2aea <vfprintf+0x1ae>
    2ada:	52 fe       	sbrs	r5, 2
    2adc:	09 c0       	rjmp	.+18     	; 0x2af0 <vfprintf+0x1b4>
    2ade:	e0 e2       	ldi	r30, 0x20	; 32
    2ae0:	de 2e       	mov	r13, r30
    2ae2:	07 c0       	rjmp	.+14     	; 0x2af2 <vfprintf+0x1b6>
    2ae4:	7d e2       	ldi	r23, 0x2D	; 45
    2ae6:	d7 2e       	mov	r13, r23
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <vfprintf+0x1b6>
    2aea:	6b e2       	ldi	r22, 0x2B	; 43
    2aec:	d6 2e       	mov	r13, r22
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <vfprintf+0x1b6>
    2af0:	d1 2c       	mov	r13, r1
    2af2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2af4:	8c 70       	andi	r24, 0x0C	; 12
    2af6:	89 f1       	breq	.+98     	; 0x2b5a <vfprintf+0x21e>
    2af8:	dd 20       	and	r13, r13
    2afa:	11 f0       	breq	.+4      	; 0x2b00 <vfprintf+0x1c4>
    2afc:	84 e0       	ldi	r24, 0x04	; 4
    2afe:	01 c0       	rjmp	.+2      	; 0x2b02 <vfprintf+0x1c6>
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	86 15       	cp	r24, r6
    2b04:	10 f0       	brcs	.+4      	; 0x2b0a <vfprintf+0x1ce>
    2b06:	61 2c       	mov	r6, r1
    2b08:	0a c0       	rjmp	.+20     	; 0x2b1e <vfprintf+0x1e2>
    2b0a:	68 1a       	sub	r6, r24
    2b0c:	53 fc       	sbrc	r5, 3
    2b0e:	07 c0       	rjmp	.+14     	; 0x2b1e <vfprintf+0x1e2>
    2b10:	b7 01       	movw	r22, r14
    2b12:	80 e2       	ldi	r24, 0x20	; 32
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	01 d4       	rcall	.+2050   	; 0x331a <fputc>
    2b18:	6a 94       	dec	r6
    2b1a:	d1 f7       	brne	.-12     	; 0x2b10 <vfprintf+0x1d4>
    2b1c:	f4 cf       	rjmp	.-24     	; 0x2b06 <vfprintf+0x1ca>
    2b1e:	dd 20       	and	r13, r13
    2b20:	21 f0       	breq	.+8      	; 0x2b2a <vfprintf+0x1ee>
    2b22:	b7 01       	movw	r22, r14
    2b24:	8d 2d       	mov	r24, r13
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	f8 d3       	rcall	.+2032   	; 0x331a <fputc>
    2b2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b2c:	53 fd       	sbrc	r21, 3
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <vfprintf+0x1fa>
    2b30:	08 ef       	ldi	r16, 0xF8	; 248
    2b32:	11 e0       	ldi	r17, 0x01	; 1
    2b34:	0b c0       	rjmp	.+22     	; 0x2b4c <vfprintf+0x210>
    2b36:	04 ef       	ldi	r16, 0xF4	; 244
    2b38:	11 e0       	ldi	r17, 0x01	; 1
    2b3a:	08 c0       	rjmp	.+16     	; 0x2b4c <vfprintf+0x210>
    2b3c:	51 10       	cpse	r5, r1
    2b3e:	80 52       	subi	r24, 0x20	; 32
    2b40:	b7 01       	movw	r22, r14
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	ea d3       	rcall	.+2004   	; 0x331a <fputc>
    2b46:	0f 5f       	subi	r16, 0xFF	; 255
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <vfprintf+0x214>
    2b4c:	80 e1       	ldi	r24, 0x10	; 16
    2b4e:	58 22       	and	r5, r24
    2b50:	f8 01       	movw	r30, r16
    2b52:	84 91       	lpm	r24, Z
    2b54:	81 11       	cpse	r24, r1
    2b56:	f2 cf       	rjmp	.-28     	; 0x2b3c <vfprintf+0x200>
    2b58:	59 c2       	rjmp	.+1202   	; 0x300c <vfprintf+0x6d0>
    2b5a:	57 fe       	sbrs	r5, 7
    2b5c:	0e c0       	rjmp	.+28     	; 0x2b7a <vfprintf+0x23e>
    2b5e:	40 0e       	add	r4, r16
    2b60:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b62:	44 ff       	sbrs	r20, 4
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <vfprintf+0x232>
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	81 33       	cpi	r24, 0x31	; 49
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <vfprintf+0x232>
    2b6c:	4a 94       	dec	r4
    2b6e:	14 14       	cp	r1, r4
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <vfprintf+0x288>
    2b72:	58 e0       	ldi	r21, 0x08	; 8
    2b74:	54 15       	cp	r21, r4
    2b76:	48 f1       	brcs	.+82     	; 0x2bca <vfprintf+0x28e>
    2b78:	2c c0       	rjmp	.+88     	; 0x2bd2 <vfprintf+0x296>
    2b7a:	56 fc       	sbrc	r5, 6
    2b7c:	2a c0       	rjmp	.+84     	; 0x2bd2 <vfprintf+0x296>
    2b7e:	87 2d       	mov	r24, r7
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	80 17       	cp	r24, r16
    2b84:	91 07       	cpc	r25, r17
    2b86:	44 f0       	brlt	.+16     	; 0x2b98 <vfprintf+0x25c>
    2b88:	0c 3f       	cpi	r16, 0xFC	; 252
    2b8a:	8f ef       	ldi	r24, 0xFF	; 255
    2b8c:	18 07       	cpc	r17, r24
    2b8e:	24 f0       	brlt	.+8      	; 0x2b98 <vfprintf+0x25c>
    2b90:	90 e8       	ldi	r25, 0x80	; 128
    2b92:	59 2a       	or	r5, r25
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <vfprintf+0x25c>
    2b96:	7a 94       	dec	r7
    2b98:	77 20       	and	r7, r7
    2b9a:	49 f0       	breq	.+18     	; 0x2bae <vfprintf+0x272>
    2b9c:	e2 e0       	ldi	r30, 0x02	; 2
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	ec 0f       	add	r30, r28
    2ba2:	fd 1f       	adc	r31, r29
    2ba4:	e7 0d       	add	r30, r7
    2ba6:	f1 1d       	adc	r31, r1
    2ba8:	80 81       	ld	r24, Z
    2baa:	80 33       	cpi	r24, 0x30	; 48
    2bac:	a1 f3       	breq	.-24     	; 0x2b96 <vfprintf+0x25a>
    2bae:	57 fe       	sbrs	r5, 7
    2bb0:	10 c0       	rjmp	.+32     	; 0x2bd2 <vfprintf+0x296>
    2bb2:	47 2c       	mov	r4, r7
    2bb4:	43 94       	inc	r4
    2bb6:	87 2d       	mov	r24, r7
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	08 17       	cp	r16, r24
    2bbc:	19 07       	cpc	r17, r25
    2bbe:	44 f4       	brge	.+16     	; 0x2bd0 <vfprintf+0x294>
    2bc0:	70 1a       	sub	r7, r16
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <vfprintf+0x296>
    2bc4:	44 24       	eor	r4, r4
    2bc6:	43 94       	inc	r4
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <vfprintf+0x296>
    2bca:	58 e0       	ldi	r21, 0x08	; 8
    2bcc:	45 2e       	mov	r4, r21
    2bce:	01 c0       	rjmp	.+2      	; 0x2bd2 <vfprintf+0x296>
    2bd0:	71 2c       	mov	r7, r1
    2bd2:	57 fe       	sbrs	r5, 7
    2bd4:	07 c0       	rjmp	.+14     	; 0x2be4 <vfprintf+0x2a8>
    2bd6:	10 16       	cp	r1, r16
    2bd8:	11 06       	cpc	r1, r17
    2bda:	3c f4       	brge	.+14     	; 0x2bea <vfprintf+0x2ae>
    2bdc:	98 01       	movw	r18, r16
    2bde:	2f 5f       	subi	r18, 0xFF	; 255
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <vfprintf+0x2b2>
    2be4:	25 e0       	ldi	r18, 0x05	; 5
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <vfprintf+0x2b2>
    2bea:	21 e0       	ldi	r18, 0x01	; 1
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	dd 20       	and	r13, r13
    2bf0:	11 f0       	breq	.+4      	; 0x2bf6 <vfprintf+0x2ba>
    2bf2:	2f 5f       	subi	r18, 0xFF	; 255
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	77 20       	and	r7, r7
    2bf8:	31 f0       	breq	.+12     	; 0x2c06 <vfprintf+0x2ca>
    2bfa:	47 2d       	mov	r20, r7
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	4f 5f       	subi	r20, 0xFF	; 255
    2c00:	5f 4f       	sbci	r21, 0xFF	; 255
    2c02:	24 0f       	add	r18, r20
    2c04:	35 1f       	adc	r19, r21
    2c06:	46 2d       	mov	r20, r6
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	24 17       	cp	r18, r20
    2c0c:	35 07       	cpc	r19, r21
    2c0e:	14 f4       	brge	.+4      	; 0x2c14 <vfprintf+0x2d8>
    2c10:	62 1a       	sub	r6, r18
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <vfprintf+0x2da>
    2c14:	61 2c       	mov	r6, r1
    2c16:	85 2d       	mov	r24, r5
    2c18:	89 70       	andi	r24, 0x09	; 9
    2c1a:	41 f4       	brne	.+16     	; 0x2c2c <vfprintf+0x2f0>
    2c1c:	05 c0       	rjmp	.+10     	; 0x2c28 <vfprintf+0x2ec>
    2c1e:	b7 01       	movw	r22, r14
    2c20:	80 e2       	ldi	r24, 0x20	; 32
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	7a d3       	rcall	.+1780   	; 0x331a <fputc>
    2c26:	6a 94       	dec	r6
    2c28:	61 10       	cpse	r6, r1
    2c2a:	f9 cf       	rjmp	.-14     	; 0x2c1e <vfprintf+0x2e2>
    2c2c:	dd 20       	and	r13, r13
    2c2e:	21 f0       	breq	.+8      	; 0x2c38 <vfprintf+0x2fc>
    2c30:	b7 01       	movw	r22, r14
    2c32:	8d 2d       	mov	r24, r13
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	71 d3       	rcall	.+1762   	; 0x331a <fputc>
    2c38:	53 fc       	sbrc	r5, 3
    2c3a:	08 c0       	rjmp	.+16     	; 0x2c4c <vfprintf+0x310>
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <vfprintf+0x30c>
    2c3e:	b7 01       	movw	r22, r14
    2c40:	80 e3       	ldi	r24, 0x30	; 48
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	6a d3       	rcall	.+1748   	; 0x331a <fputc>
    2c46:	6a 94       	dec	r6
    2c48:	61 10       	cpse	r6, r1
    2c4a:	f9 cf       	rjmp	.-14     	; 0x2c3e <vfprintf+0x302>
    2c4c:	57 fe       	sbrs	r5, 7
    2c4e:	54 c0       	rjmp	.+168    	; 0x2cf8 <vfprintf+0x3bc>
    2c50:	68 01       	movw	r12, r16
    2c52:	17 ff       	sbrs	r17, 7
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <vfprintf+0x31e>
    2c56:	c1 2c       	mov	r12, r1
    2c58:	d1 2c       	mov	r13, r1
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	a8 01       	movw	r20, r16
    2c60:	44 19       	sub	r20, r4
    2c62:	51 09       	sbc	r21, r1
    2c64:	4d 87       	std	Y+13, r20	; 0x0d
    2c66:	5e 87       	std	Y+14, r21	; 0x0e
    2c68:	28 01       	movw	r4, r16
    2c6a:	4c 18       	sub	r4, r12
    2c6c:	5d 08       	sbc	r5, r13
    2c6e:	48 0c       	add	r4, r8
    2c70:	59 1c       	adc	r5, r9
    2c72:	87 2d       	mov	r24, r7
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	44 27       	eor	r20, r20
    2c78:	55 27       	eor	r21, r21
    2c7a:	48 1b       	sub	r20, r24
    2c7c:	59 0b       	sbc	r21, r25
    2c7e:	4f 87       	std	Y+15, r20	; 0x0f
    2c80:	58 8b       	std	Y+16, r21	; 0x10
    2c82:	5f ef       	ldi	r21, 0xFF	; 255
    2c84:	c5 16       	cp	r12, r21
    2c86:	d5 06       	cpc	r13, r21
    2c88:	41 f4       	brne	.+16     	; 0x2c9a <vfprintf+0x35e>
    2c8a:	b7 01       	movw	r22, r14
    2c8c:	8e e2       	ldi	r24, 0x2E	; 46
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	2a 8b       	std	Y+18, r18	; 0x12
    2c92:	39 8b       	std	Y+17, r19	; 0x11
    2c94:	42 d3       	rcall	.+1668   	; 0x331a <fputc>
    2c96:	39 89       	ldd	r19, Y+17	; 0x11
    2c98:	2a 89       	ldd	r18, Y+18	; 0x12
    2c9a:	0c 15       	cp	r16, r12
    2c9c:	1d 05       	cpc	r17, r13
    2c9e:	54 f0       	brlt	.+20     	; 0x2cb4 <vfprintf+0x378>
    2ca0:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ca2:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ca4:	4c 15       	cp	r20, r12
    2ca6:	5d 05       	cpc	r21, r13
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <vfprintf+0x378>
    2caa:	f2 01       	movw	r30, r4
    2cac:	e2 0f       	add	r30, r18
    2cae:	f3 1f       	adc	r31, r19
    2cb0:	81 81       	ldd	r24, Z+1	; 0x01
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <vfprintf+0x37a>
    2cb4:	80 e3       	ldi	r24, 0x30	; 48
    2cb6:	51 e0       	ldi	r21, 0x01	; 1
    2cb8:	c5 1a       	sub	r12, r21
    2cba:	d1 08       	sbc	r13, r1
    2cbc:	2f 5f       	subi	r18, 0xFF	; 255
    2cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cc2:	58 89       	ldd	r21, Y+16	; 0x10
    2cc4:	c4 16       	cp	r12, r20
    2cc6:	d5 06       	cpc	r13, r21
    2cc8:	44 f0       	brlt	.+16     	; 0x2cda <vfprintf+0x39e>
    2cca:	b7 01       	movw	r22, r14
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	2a 8b       	std	Y+18, r18	; 0x12
    2cd0:	39 8b       	std	Y+17, r19	; 0x11
    2cd2:	23 d3       	rcall	.+1606   	; 0x331a <fputc>
    2cd4:	2a 89       	ldd	r18, Y+18	; 0x12
    2cd6:	39 89       	ldd	r19, Y+17	; 0x11
    2cd8:	d4 cf       	rjmp	.-88     	; 0x2c82 <vfprintf+0x346>
    2cda:	c0 16       	cp	r12, r16
    2cdc:	d1 06       	cpc	r13, r17
    2cde:	49 f4       	brne	.+18     	; 0x2cf2 <vfprintf+0x3b6>
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	96 33       	cpi	r25, 0x36	; 54
    2ce4:	28 f4       	brcc	.+10     	; 0x2cf0 <vfprintf+0x3b4>
    2ce6:	95 33       	cpi	r25, 0x35	; 53
    2ce8:	21 f4       	brne	.+8      	; 0x2cf2 <vfprintf+0x3b6>
    2cea:	5c 85       	ldd	r21, Y+12	; 0x0c
    2cec:	54 fd       	sbrc	r21, 4
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <vfprintf+0x3b6>
    2cf0:	81 e3       	ldi	r24, 0x31	; 49
    2cf2:	b7 01       	movw	r22, r14
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	44 c0       	rjmp	.+136    	; 0x2d80 <vfprintf+0x444>
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	81 33       	cpi	r24, 0x31	; 49
    2cfc:	19 f0       	breq	.+6      	; 0x2d04 <vfprintf+0x3c8>
    2cfe:	4c 85       	ldd	r20, Y+12	; 0x0c
    2d00:	4f 7e       	andi	r20, 0xEF	; 239
    2d02:	4c 87       	std	Y+12, r20	; 0x0c
    2d04:	b7 01       	movw	r22, r14
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	08 d3       	rcall	.+1552   	; 0x331a <fputc>
    2d0a:	71 10       	cpse	r7, r1
    2d0c:	05 c0       	rjmp	.+10     	; 0x2d18 <vfprintf+0x3dc>
    2d0e:	54 fe       	sbrs	r5, 4
    2d10:	14 c0       	rjmp	.+40     	; 0x2d3a <vfprintf+0x3fe>
    2d12:	85 e4       	ldi	r24, 0x45	; 69
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	13 c0       	rjmp	.+38     	; 0x2d3e <vfprintf+0x402>
    2d18:	b7 01       	movw	r22, r14
    2d1a:	8e e2       	ldi	r24, 0x2E	; 46
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	fd d2       	rcall	.+1530   	; 0x331a <fputc>
    2d20:	42 e0       	ldi	r20, 0x02	; 2
    2d22:	d4 2e       	mov	r13, r20
    2d24:	f4 01       	movw	r30, r8
    2d26:	ed 0d       	add	r30, r13
    2d28:	f1 1d       	adc	r31, r1
    2d2a:	d3 94       	inc	r13
    2d2c:	b7 01       	movw	r22, r14
    2d2e:	80 81       	ld	r24, Z
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	f3 d2       	rcall	.+1510   	; 0x331a <fputc>
    2d34:	7a 94       	dec	r7
    2d36:	b1 f7       	brne	.-20     	; 0x2d24 <vfprintf+0x3e8>
    2d38:	ea cf       	rjmp	.-44     	; 0x2d0e <vfprintf+0x3d2>
    2d3a:	85 e6       	ldi	r24, 0x65	; 101
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	b7 01       	movw	r22, r14
    2d40:	ec d2       	rcall	.+1496   	; 0x331a <fputc>
    2d42:	17 fd       	sbrc	r17, 7
    2d44:	06 c0       	rjmp	.+12     	; 0x2d52 <vfprintf+0x416>
    2d46:	01 15       	cp	r16, r1
    2d48:	11 05       	cpc	r17, r1
    2d4a:	41 f4       	brne	.+16     	; 0x2d5c <vfprintf+0x420>
    2d4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d4e:	54 ff       	sbrs	r21, 4
    2d50:	05 c0       	rjmp	.+10     	; 0x2d5c <vfprintf+0x420>
    2d52:	11 95       	neg	r17
    2d54:	01 95       	neg	r16
    2d56:	11 09       	sbc	r17, r1
    2d58:	8d e2       	ldi	r24, 0x2D	; 45
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <vfprintf+0x422>
    2d5c:	8b e2       	ldi	r24, 0x2B	; 43
    2d5e:	b7 01       	movw	r22, r14
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	db d2       	rcall	.+1462   	; 0x331a <fputc>
    2d64:	80 e3       	ldi	r24, 0x30	; 48
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <vfprintf+0x432>
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	0a 50       	subi	r16, 0x0A	; 10
    2d6c:	11 09       	sbc	r17, r1
    2d6e:	0a 30       	cpi	r16, 0x0A	; 10
    2d70:	11 05       	cpc	r17, r1
    2d72:	d4 f7       	brge	.-12     	; 0x2d68 <vfprintf+0x42c>
    2d74:	b7 01       	movw	r22, r14
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	d0 d2       	rcall	.+1440   	; 0x331a <fputc>
    2d7a:	b7 01       	movw	r22, r14
    2d7c:	c8 01       	movw	r24, r16
    2d7e:	c0 96       	adiw	r24, 0x30	; 48
    2d80:	cc d2       	rcall	.+1432   	; 0x331a <fputc>
    2d82:	44 c1       	rjmp	.+648    	; 0x300c <vfprintf+0x6d0>
    2d84:	83 36       	cpi	r24, 0x63	; 99
    2d86:	31 f0       	breq	.+12     	; 0x2d94 <vfprintf+0x458>
    2d88:	83 37       	cpi	r24, 0x73	; 115
    2d8a:	81 f0       	breq	.+32     	; 0x2dac <vfprintf+0x470>
    2d8c:	83 35       	cpi	r24, 0x53	; 83
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <vfprintf+0x456>
    2d90:	5a c0       	rjmp	.+180    	; 0x2e46 <vfprintf+0x50a>
    2d92:	23 c0       	rjmp	.+70     	; 0x2dda <vfprintf+0x49e>
    2d94:	56 01       	movw	r10, r12
    2d96:	82 e0       	ldi	r24, 0x02	; 2
    2d98:	a8 0e       	add	r10, r24
    2d9a:	b1 1c       	adc	r11, r1
    2d9c:	f6 01       	movw	r30, r12
    2d9e:	80 81       	ld	r24, Z
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	cc 24       	eor	r12, r12
    2da4:	c3 94       	inc	r12
    2da6:	d1 2c       	mov	r13, r1
    2da8:	84 01       	movw	r16, r8
    2daa:	13 c0       	rjmp	.+38     	; 0x2dd2 <vfprintf+0x496>
    2dac:	56 01       	movw	r10, r12
    2dae:	f2 e0       	ldi	r31, 0x02	; 2
    2db0:	af 0e       	add	r10, r31
    2db2:	b1 1c       	adc	r11, r1
    2db4:	f6 01       	movw	r30, r12
    2db6:	00 81       	ld	r16, Z
    2db8:	11 81       	ldd	r17, Z+1	; 0x01
    2dba:	26 ff       	sbrs	r18, 6
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <vfprintf+0x488>
    2dbe:	67 2d       	mov	r22, r7
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <vfprintf+0x48c>
    2dc4:	6f ef       	ldi	r22, 0xFF	; 255
    2dc6:	7f ef       	ldi	r23, 0xFF	; 255
    2dc8:	c8 01       	movw	r24, r16
    2dca:	2a 8b       	std	Y+18, r18	; 0x12
    2dcc:	51 d2       	rcall	.+1186   	; 0x3270 <strnlen>
    2dce:	6c 01       	movw	r12, r24
    2dd0:	2a 89       	ldd	r18, Y+18	; 0x12
    2dd2:	9f e7       	ldi	r25, 0x7F	; 127
    2dd4:	59 2e       	mov	r5, r25
    2dd6:	52 22       	and	r5, r18
    2dd8:	16 c0       	rjmp	.+44     	; 0x2e06 <vfprintf+0x4ca>
    2dda:	56 01       	movw	r10, r12
    2ddc:	f2 e0       	ldi	r31, 0x02	; 2
    2dde:	af 0e       	add	r10, r31
    2de0:	b1 1c       	adc	r11, r1
    2de2:	f6 01       	movw	r30, r12
    2de4:	00 81       	ld	r16, Z
    2de6:	11 81       	ldd	r17, Z+1	; 0x01
    2de8:	26 ff       	sbrs	r18, 6
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <vfprintf+0x4b6>
    2dec:	67 2d       	mov	r22, r7
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <vfprintf+0x4ba>
    2df2:	6f ef       	ldi	r22, 0xFF	; 255
    2df4:	7f ef       	ldi	r23, 0xFF	; 255
    2df6:	c8 01       	movw	r24, r16
    2df8:	2a 8b       	std	Y+18, r18	; 0x12
    2dfa:	22 d2       	rcall	.+1092   	; 0x3240 <strnlen_P>
    2dfc:	6c 01       	movw	r12, r24
    2dfe:	2a 89       	ldd	r18, Y+18	; 0x12
    2e00:	80 e8       	ldi	r24, 0x80	; 128
    2e02:	58 2e       	mov	r5, r24
    2e04:	52 2a       	or	r5, r18
    2e06:	53 fc       	sbrc	r5, 3
    2e08:	1a c0       	rjmp	.+52     	; 0x2e3e <vfprintf+0x502>
    2e0a:	05 c0       	rjmp	.+10     	; 0x2e16 <vfprintf+0x4da>
    2e0c:	b7 01       	movw	r22, r14
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	83 d2       	rcall	.+1286   	; 0x331a <fputc>
    2e14:	6a 94       	dec	r6
    2e16:	86 2d       	mov	r24, r6
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	c8 16       	cp	r12, r24
    2e1c:	d9 06       	cpc	r13, r25
    2e1e:	b0 f3       	brcs	.-20     	; 0x2e0c <vfprintf+0x4d0>
    2e20:	0e c0       	rjmp	.+28     	; 0x2e3e <vfprintf+0x502>
    2e22:	f8 01       	movw	r30, r16
    2e24:	57 fc       	sbrc	r5, 7
    2e26:	85 91       	lpm	r24, Z+
    2e28:	57 fe       	sbrs	r5, 7
    2e2a:	81 91       	ld	r24, Z+
    2e2c:	8f 01       	movw	r16, r30
    2e2e:	b7 01       	movw	r22, r14
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	73 d2       	rcall	.+1254   	; 0x331a <fputc>
    2e34:	61 10       	cpse	r6, r1
    2e36:	6a 94       	dec	r6
    2e38:	f1 e0       	ldi	r31, 0x01	; 1
    2e3a:	cf 1a       	sub	r12, r31
    2e3c:	d1 08       	sbc	r13, r1
    2e3e:	c1 14       	cp	r12, r1
    2e40:	d1 04       	cpc	r13, r1
    2e42:	79 f7       	brne	.-34     	; 0x2e22 <vfprintf+0x4e6>
    2e44:	e3 c0       	rjmp	.+454    	; 0x300c <vfprintf+0x6d0>
    2e46:	84 36       	cpi	r24, 0x64	; 100
    2e48:	11 f0       	breq	.+4      	; 0x2e4e <vfprintf+0x512>
    2e4a:	89 36       	cpi	r24, 0x69	; 105
    2e4c:	49 f5       	brne	.+82     	; 0x2ea0 <vfprintf+0x564>
    2e4e:	56 01       	movw	r10, r12
    2e50:	27 ff       	sbrs	r18, 7
    2e52:	09 c0       	rjmp	.+18     	; 0x2e66 <vfprintf+0x52a>
    2e54:	44 e0       	ldi	r20, 0x04	; 4
    2e56:	a4 0e       	add	r10, r20
    2e58:	b1 1c       	adc	r11, r1
    2e5a:	f6 01       	movw	r30, r12
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0a c0       	rjmp	.+20     	; 0x2e7a <vfprintf+0x53e>
    2e66:	f2 e0       	ldi	r31, 0x02	; 2
    2e68:	af 0e       	add	r10, r31
    2e6a:	b1 1c       	adc	r11, r1
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	88 27       	eor	r24, r24
    2e74:	77 fd       	sbrc	r23, 7
    2e76:	80 95       	com	r24
    2e78:	98 2f       	mov	r25, r24
    2e7a:	12 2f       	mov	r17, r18
    2e7c:	1f 76       	andi	r17, 0x6F	; 111
    2e7e:	97 ff       	sbrs	r25, 7
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <vfprintf+0x556>
    2e82:	90 95       	com	r25
    2e84:	80 95       	com	r24
    2e86:	70 95       	com	r23
    2e88:	61 95       	neg	r22
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	10 68       	ori	r17, 0x80	; 128
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	a4 01       	movw	r20, r8
    2e98:	7d d2       	rcall	.+1274   	; 0x3394 <__ultoa_invert>
    2e9a:	d8 2e       	mov	r13, r24
    2e9c:	d8 18       	sub	r13, r8
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <vfprintf+0x5e2>
    2ea0:	12 2f       	mov	r17, r18
    2ea2:	85 37       	cpi	r24, 0x75	; 117
    2ea4:	21 f4       	brne	.+8      	; 0x2eae <vfprintf+0x572>
    2ea6:	1f 7e       	andi	r17, 0xEF	; 239
    2ea8:	2a e0       	ldi	r18, 0x0A	; 10
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	1f c0       	rjmp	.+62     	; 0x2eec <vfprintf+0x5b0>
    2eae:	19 7f       	andi	r17, 0xF9	; 249
    2eb0:	8f 36       	cpi	r24, 0x6F	; 111
    2eb2:	a1 f0       	breq	.+40     	; 0x2edc <vfprintf+0x5a0>
    2eb4:	20 f4       	brcc	.+8      	; 0x2ebe <vfprintf+0x582>
    2eb6:	88 35       	cpi	r24, 0x58	; 88
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <vfprintf+0x580>
    2eba:	ab c0       	rjmp	.+342    	; 0x3012 <vfprintf+0x6d6>
    2ebc:	0b c0       	rjmp	.+22     	; 0x2ed4 <vfprintf+0x598>
    2ebe:	80 37       	cpi	r24, 0x70	; 112
    2ec0:	21 f0       	breq	.+8      	; 0x2eca <vfprintf+0x58e>
    2ec2:	88 37       	cpi	r24, 0x78	; 120
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <vfprintf+0x58c>
    2ec6:	a5 c0       	rjmp	.+330    	; 0x3012 <vfprintf+0x6d6>
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <vfprintf+0x590>
    2eca:	10 61       	ori	r17, 0x10	; 16
    2ecc:	14 ff       	sbrs	r17, 4
    2ece:	09 c0       	rjmp	.+18     	; 0x2ee2 <vfprintf+0x5a6>
    2ed0:	14 60       	ori	r17, 0x04	; 4
    2ed2:	07 c0       	rjmp	.+14     	; 0x2ee2 <vfprintf+0x5a6>
    2ed4:	24 ff       	sbrs	r18, 4
    2ed6:	08 c0       	rjmp	.+16     	; 0x2ee8 <vfprintf+0x5ac>
    2ed8:	16 60       	ori	r17, 0x06	; 6
    2eda:	06 c0       	rjmp	.+12     	; 0x2ee8 <vfprintf+0x5ac>
    2edc:	28 e0       	ldi	r18, 0x08	; 8
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	05 c0       	rjmp	.+10     	; 0x2eec <vfprintf+0x5b0>
    2ee2:	20 e1       	ldi	r18, 0x10	; 16
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <vfprintf+0x5b0>
    2ee8:	20 e1       	ldi	r18, 0x10	; 16
    2eea:	32 e0       	ldi	r19, 0x02	; 2
    2eec:	56 01       	movw	r10, r12
    2eee:	17 ff       	sbrs	r17, 7
    2ef0:	09 c0       	rjmp	.+18     	; 0x2f04 <vfprintf+0x5c8>
    2ef2:	f4 e0       	ldi	r31, 0x04	; 4
    2ef4:	af 0e       	add	r10, r31
    2ef6:	b1 1c       	adc	r11, r1
    2ef8:	f6 01       	movw	r30, r12
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	08 c0       	rjmp	.+16     	; 0x2f14 <vfprintf+0x5d8>
    2f04:	f2 e0       	ldi	r31, 0x02	; 2
    2f06:	af 0e       	add	r10, r31
    2f08:	b1 1c       	adc	r11, r1
    2f0a:	f6 01       	movw	r30, r12
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a4 01       	movw	r20, r8
    2f16:	3e d2       	rcall	.+1148   	; 0x3394 <__ultoa_invert>
    2f18:	d8 2e       	mov	r13, r24
    2f1a:	d8 18       	sub	r13, r8
    2f1c:	1f 77       	andi	r17, 0x7F	; 127
    2f1e:	16 ff       	sbrs	r17, 6
    2f20:	0b c0       	rjmp	.+22     	; 0x2f38 <vfprintf+0x5fc>
    2f22:	21 2f       	mov	r18, r17
    2f24:	2e 7f       	andi	r18, 0xFE	; 254
    2f26:	d7 14       	cp	r13, r7
    2f28:	50 f4       	brcc	.+20     	; 0x2f3e <vfprintf+0x602>
    2f2a:	14 ff       	sbrs	r17, 4
    2f2c:	0a c0       	rjmp	.+20     	; 0x2f42 <vfprintf+0x606>
    2f2e:	12 fd       	sbrc	r17, 2
    2f30:	08 c0       	rjmp	.+16     	; 0x2f42 <vfprintf+0x606>
    2f32:	21 2f       	mov	r18, r17
    2f34:	2e 7e       	andi	r18, 0xEE	; 238
    2f36:	05 c0       	rjmp	.+10     	; 0x2f42 <vfprintf+0x606>
    2f38:	0d 2d       	mov	r16, r13
    2f3a:	21 2f       	mov	r18, r17
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <vfprintf+0x608>
    2f3e:	0d 2d       	mov	r16, r13
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <vfprintf+0x608>
    2f42:	07 2d       	mov	r16, r7
    2f44:	24 ff       	sbrs	r18, 4
    2f46:	0c c0       	rjmp	.+24     	; 0x2f60 <vfprintf+0x624>
    2f48:	fe 01       	movw	r30, r28
    2f4a:	ed 0d       	add	r30, r13
    2f4c:	f1 1d       	adc	r31, r1
    2f4e:	80 81       	ld	r24, Z
    2f50:	80 33       	cpi	r24, 0x30	; 48
    2f52:	11 f4       	brne	.+4      	; 0x2f58 <vfprintf+0x61c>
    2f54:	29 7e       	andi	r18, 0xE9	; 233
    2f56:	08 c0       	rjmp	.+16     	; 0x2f68 <vfprintf+0x62c>
    2f58:	22 ff       	sbrs	r18, 2
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <vfprintf+0x62a>
    2f5c:	0e 5f       	subi	r16, 0xFE	; 254
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <vfprintf+0x62c>
    2f60:	82 2f       	mov	r24, r18
    2f62:	86 78       	andi	r24, 0x86	; 134
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <vfprintf+0x62c>
    2f66:	0f 5f       	subi	r16, 0xFF	; 255
    2f68:	23 fd       	sbrc	r18, 3
    2f6a:	13 c0       	rjmp	.+38     	; 0x2f92 <vfprintf+0x656>
    2f6c:	20 ff       	sbrs	r18, 0
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <vfprintf+0x650>
    2f70:	7d 2c       	mov	r7, r13
    2f72:	06 15       	cp	r16, r6
    2f74:	58 f4       	brcc	.+22     	; 0x2f8c <vfprintf+0x650>
    2f76:	76 0c       	add	r7, r6
    2f78:	70 1a       	sub	r7, r16
    2f7a:	06 2d       	mov	r16, r6
    2f7c:	07 c0       	rjmp	.+14     	; 0x2f8c <vfprintf+0x650>
    2f7e:	b7 01       	movw	r22, r14
    2f80:	80 e2       	ldi	r24, 0x20	; 32
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	2a 8b       	std	Y+18, r18	; 0x12
    2f86:	c9 d1       	rcall	.+914    	; 0x331a <fputc>
    2f88:	0f 5f       	subi	r16, 0xFF	; 255
    2f8a:	2a 89       	ldd	r18, Y+18	; 0x12
    2f8c:	06 15       	cp	r16, r6
    2f8e:	b8 f3       	brcs	.-18     	; 0x2f7e <vfprintf+0x642>
    2f90:	04 c0       	rjmp	.+8      	; 0x2f9a <vfprintf+0x65e>
    2f92:	06 15       	cp	r16, r6
    2f94:	10 f4       	brcc	.+4      	; 0x2f9a <vfprintf+0x65e>
    2f96:	60 1a       	sub	r6, r16
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <vfprintf+0x660>
    2f9a:	61 2c       	mov	r6, r1
    2f9c:	24 ff       	sbrs	r18, 4
    2f9e:	11 c0       	rjmp	.+34     	; 0x2fc2 <vfprintf+0x686>
    2fa0:	b7 01       	movw	r22, r14
    2fa2:	80 e3       	ldi	r24, 0x30	; 48
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	2a 8b       	std	Y+18, r18	; 0x12
    2fa8:	b8 d1       	rcall	.+880    	; 0x331a <fputc>
    2faa:	2a 89       	ldd	r18, Y+18	; 0x12
    2fac:	22 ff       	sbrs	r18, 2
    2fae:	1c c0       	rjmp	.+56     	; 0x2fe8 <vfprintf+0x6ac>
    2fb0:	21 ff       	sbrs	r18, 1
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <vfprintf+0x67e>
    2fb4:	88 e5       	ldi	r24, 0x58	; 88
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <vfprintf+0x682>
    2fba:	88 e7       	ldi	r24, 0x78	; 120
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	b7 01       	movw	r22, r14
    2fc0:	0c c0       	rjmp	.+24     	; 0x2fda <vfprintf+0x69e>
    2fc2:	82 2f       	mov	r24, r18
    2fc4:	86 78       	andi	r24, 0x86	; 134
    2fc6:	81 f0       	breq	.+32     	; 0x2fe8 <vfprintf+0x6ac>
    2fc8:	21 fd       	sbrc	r18, 1
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <vfprintf+0x694>
    2fcc:	80 e2       	ldi	r24, 0x20	; 32
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <vfprintf+0x696>
    2fd0:	8b e2       	ldi	r24, 0x2B	; 43
    2fd2:	27 fd       	sbrc	r18, 7
    2fd4:	8d e2       	ldi	r24, 0x2D	; 45
    2fd6:	b7 01       	movw	r22, r14
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9f d1       	rcall	.+830    	; 0x331a <fputc>
    2fdc:	05 c0       	rjmp	.+10     	; 0x2fe8 <vfprintf+0x6ac>
    2fde:	b7 01       	movw	r22, r14
    2fe0:	80 e3       	ldi	r24, 0x30	; 48
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9a d1       	rcall	.+820    	; 0x331a <fputc>
    2fe6:	7a 94       	dec	r7
    2fe8:	d7 14       	cp	r13, r7
    2fea:	c8 f3       	brcs	.-14     	; 0x2fde <vfprintf+0x6a2>
    2fec:	da 94       	dec	r13
    2fee:	f4 01       	movw	r30, r8
    2ff0:	ed 0d       	add	r30, r13
    2ff2:	f1 1d       	adc	r31, r1
    2ff4:	b7 01       	movw	r22, r14
    2ff6:	80 81       	ld	r24, Z
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	8f d1       	rcall	.+798    	; 0x331a <fputc>
    2ffc:	d1 10       	cpse	r13, r1
    2ffe:	f6 cf       	rjmp	.-20     	; 0x2fec <vfprintf+0x6b0>
    3000:	05 c0       	rjmp	.+10     	; 0x300c <vfprintf+0x6d0>
    3002:	b7 01       	movw	r22, r14
    3004:	80 e2       	ldi	r24, 0x20	; 32
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	88 d1       	rcall	.+784    	; 0x331a <fputc>
    300a:	6a 94       	dec	r6
    300c:	61 10       	cpse	r6, r1
    300e:	f9 cf       	rjmp	.-14     	; 0x3002 <vfprintf+0x6c6>
    3010:	b6 cc       	rjmp	.-1684   	; 0x297e <vfprintf+0x42>
    3012:	f7 01       	movw	r30, r14
    3014:	26 81       	ldd	r18, Z+6	; 0x06
    3016:	37 81       	ldd	r19, Z+7	; 0x07
    3018:	02 c0       	rjmp	.+4      	; 0x301e <vfprintf+0x6e2>
    301a:	2f ef       	ldi	r18, 0xFF	; 255
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	c9 01       	movw	r24, r18
    3020:	62 96       	adiw	r28, 0x12	; 18
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	df 90       	pop	r13
    3034:	cf 90       	pop	r12
    3036:	bf 90       	pop	r11
    3038:	af 90       	pop	r10
    303a:	9f 90       	pop	r9
    303c:	8f 90       	pop	r8
    303e:	7f 90       	pop	r7
    3040:	6f 90       	pop	r6
    3042:	5f 90       	pop	r5
    3044:	4f 90       	pop	r4
    3046:	3f 90       	pop	r3
    3048:	2f 90       	pop	r2
    304a:	08 95       	ret

0000304c <__udivmodsi4>:
    304c:	a1 e2       	ldi	r26, 0x21	; 33
    304e:	1a 2e       	mov	r1, r26
    3050:	aa 1b       	sub	r26, r26
    3052:	bb 1b       	sub	r27, r27
    3054:	fd 01       	movw	r30, r26
    3056:	0d c0       	rjmp	.+26     	; 0x3072 <__udivmodsi4_ep>

00003058 <__udivmodsi4_loop>:
    3058:	aa 1f       	adc	r26, r26
    305a:	bb 1f       	adc	r27, r27
    305c:	ee 1f       	adc	r30, r30
    305e:	ff 1f       	adc	r31, r31
    3060:	a2 17       	cp	r26, r18
    3062:	b3 07       	cpc	r27, r19
    3064:	e4 07       	cpc	r30, r20
    3066:	f5 07       	cpc	r31, r21
    3068:	20 f0       	brcs	.+8      	; 0x3072 <__udivmodsi4_ep>
    306a:	a2 1b       	sub	r26, r18
    306c:	b3 0b       	sbc	r27, r19
    306e:	e4 0b       	sbc	r30, r20
    3070:	f5 0b       	sbc	r31, r21

00003072 <__udivmodsi4_ep>:
    3072:	66 1f       	adc	r22, r22
    3074:	77 1f       	adc	r23, r23
    3076:	88 1f       	adc	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	1a 94       	dec	r1
    307c:	69 f7       	brne	.-38     	; 0x3058 <__udivmodsi4_loop>
    307e:	60 95       	com	r22
    3080:	70 95       	com	r23
    3082:	80 95       	com	r24
    3084:	90 95       	com	r25
    3086:	9b 01       	movw	r18, r22
    3088:	ac 01       	movw	r20, r24
    308a:	bd 01       	movw	r22, r26
    308c:	cf 01       	movw	r24, r30
    308e:	08 95       	ret

00003090 <__ftoa_engine>:
    3090:	28 30       	cpi	r18, 0x08	; 8
    3092:	08 f0       	brcs	.+2      	; 0x3096 <__ftoa_engine+0x6>
    3094:	27 e0       	ldi	r18, 0x07	; 7
    3096:	33 27       	eor	r19, r19
    3098:	da 01       	movw	r26, r20
    309a:	99 0f       	add	r25, r25
    309c:	31 1d       	adc	r19, r1
    309e:	87 fd       	sbrc	r24, 7
    30a0:	91 60       	ori	r25, 0x01	; 1
    30a2:	00 96       	adiw	r24, 0x00	; 0
    30a4:	61 05       	cpc	r22, r1
    30a6:	71 05       	cpc	r23, r1
    30a8:	39 f4       	brne	.+14     	; 0x30b8 <__ftoa_engine+0x28>
    30aa:	32 60       	ori	r19, 0x02	; 2
    30ac:	2e 5f       	subi	r18, 0xFE	; 254
    30ae:	3d 93       	st	X+, r19
    30b0:	30 e3       	ldi	r19, 0x30	; 48
    30b2:	2a 95       	dec	r18
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <__ftoa_engine+0x1e>
    30b6:	08 95       	ret
    30b8:	9f 3f       	cpi	r25, 0xFF	; 255
    30ba:	30 f0       	brcs	.+12     	; 0x30c8 <__ftoa_engine+0x38>
    30bc:	80 38       	cpi	r24, 0x80	; 128
    30be:	71 05       	cpc	r23, r1
    30c0:	61 05       	cpc	r22, r1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <__ftoa_engine+0x36>
    30c4:	3c 5f       	subi	r19, 0xFC	; 252
    30c6:	3c 5f       	subi	r19, 0xFC	; 252
    30c8:	3d 93       	st	X+, r19
    30ca:	91 30       	cpi	r25, 0x01	; 1
    30cc:	08 f0       	brcs	.+2      	; 0x30d0 <__ftoa_engine+0x40>
    30ce:	80 68       	ori	r24, 0x80	; 128
    30d0:	91 1d       	adc	r25, r1
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	1f 93       	push	r17
    30d8:	0f 93       	push	r16
    30da:	ff 92       	push	r15
    30dc:	ef 92       	push	r14
    30de:	19 2f       	mov	r17, r25
    30e0:	98 7f       	andi	r25, 0xF8	; 248
    30e2:	96 95       	lsr	r25
    30e4:	e9 2f       	mov	r30, r25
    30e6:	96 95       	lsr	r25
    30e8:	96 95       	lsr	r25
    30ea:	e9 0f       	add	r30, r25
    30ec:	ff 27       	eor	r31, r31
    30ee:	ea 5a       	subi	r30, 0xAA	; 170
    30f0:	fd 4f       	sbci	r31, 0xFD	; 253
    30f2:	99 27       	eor	r25, r25
    30f4:	33 27       	eor	r19, r19
    30f6:	ee 24       	eor	r14, r14
    30f8:	ff 24       	eor	r15, r15
    30fa:	a7 01       	movw	r20, r14
    30fc:	e7 01       	movw	r28, r14
    30fe:	05 90       	lpm	r0, Z+
    3100:	08 94       	sec
    3102:	07 94       	ror	r0
    3104:	28 f4       	brcc	.+10     	; 0x3110 <__ftoa_engine+0x80>
    3106:	36 0f       	add	r19, r22
    3108:	e7 1e       	adc	r14, r23
    310a:	f8 1e       	adc	r15, r24
    310c:	49 1f       	adc	r20, r25
    310e:	51 1d       	adc	r21, r1
    3110:	66 0f       	add	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	06 94       	lsr	r0
    311a:	a1 f7       	brne	.-24     	; 0x3104 <__ftoa_engine+0x74>
    311c:	05 90       	lpm	r0, Z+
    311e:	07 94       	ror	r0
    3120:	28 f4       	brcc	.+10     	; 0x312c <__ftoa_engine+0x9c>
    3122:	e7 0e       	add	r14, r23
    3124:	f8 1e       	adc	r15, r24
    3126:	49 1f       	adc	r20, r25
    3128:	56 1f       	adc	r21, r22
    312a:	c1 1d       	adc	r28, r1
    312c:	77 0f       	add	r23, r23
    312e:	88 1f       	adc	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	66 1f       	adc	r22, r22
    3134:	06 94       	lsr	r0
    3136:	a1 f7       	brne	.-24     	; 0x3120 <__ftoa_engine+0x90>
    3138:	05 90       	lpm	r0, Z+
    313a:	07 94       	ror	r0
    313c:	28 f4       	brcc	.+10     	; 0x3148 <__ftoa_engine+0xb8>
    313e:	f8 0e       	add	r15, r24
    3140:	49 1f       	adc	r20, r25
    3142:	56 1f       	adc	r21, r22
    3144:	c7 1f       	adc	r28, r23
    3146:	d1 1d       	adc	r29, r1
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	06 94       	lsr	r0
    3152:	a1 f7       	brne	.-24     	; 0x313c <__ftoa_engine+0xac>
    3154:	05 90       	lpm	r0, Z+
    3156:	07 94       	ror	r0
    3158:	20 f4       	brcc	.+8      	; 0x3162 <__ftoa_engine+0xd2>
    315a:	49 0f       	add	r20, r25
    315c:	56 1f       	adc	r21, r22
    315e:	c7 1f       	adc	r28, r23
    3160:	d8 1f       	adc	r29, r24
    3162:	99 0f       	add	r25, r25
    3164:	66 1f       	adc	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	88 1f       	adc	r24, r24
    316a:	06 94       	lsr	r0
    316c:	a9 f7       	brne	.-22     	; 0x3158 <__ftoa_engine+0xc8>
    316e:	84 91       	lpm	r24, Z
    3170:	10 95       	com	r17
    3172:	17 70       	andi	r17, 0x07	; 7
    3174:	41 f0       	breq	.+16     	; 0x3186 <__ftoa_engine+0xf6>
    3176:	d6 95       	lsr	r29
    3178:	c7 95       	ror	r28
    317a:	57 95       	ror	r21
    317c:	47 95       	ror	r20
    317e:	f7 94       	ror	r15
    3180:	e7 94       	ror	r14
    3182:	1a 95       	dec	r17
    3184:	c1 f7       	brne	.-16     	; 0x3176 <__ftoa_engine+0xe6>
    3186:	ec ef       	ldi	r30, 0xFC	; 252
    3188:	f1 e0       	ldi	r31, 0x01	; 1
    318a:	68 94       	set
    318c:	15 90       	lpm	r1, Z+
    318e:	15 91       	lpm	r17, Z+
    3190:	35 91       	lpm	r19, Z+
    3192:	65 91       	lpm	r22, Z+
    3194:	95 91       	lpm	r25, Z+
    3196:	05 90       	lpm	r0, Z+
    3198:	7f e2       	ldi	r23, 0x2F	; 47
    319a:	73 95       	inc	r23
    319c:	e1 18       	sub	r14, r1
    319e:	f1 0a       	sbc	r15, r17
    31a0:	43 0b       	sbc	r20, r19
    31a2:	56 0b       	sbc	r21, r22
    31a4:	c9 0b       	sbc	r28, r25
    31a6:	d0 09       	sbc	r29, r0
    31a8:	c0 f7       	brcc	.-16     	; 0x319a <__ftoa_engine+0x10a>
    31aa:	e1 0c       	add	r14, r1
    31ac:	f1 1e       	adc	r15, r17
    31ae:	43 1f       	adc	r20, r19
    31b0:	56 1f       	adc	r21, r22
    31b2:	c9 1f       	adc	r28, r25
    31b4:	d0 1d       	adc	r29, r0
    31b6:	7e f4       	brtc	.+30     	; 0x31d6 <__ftoa_engine+0x146>
    31b8:	70 33       	cpi	r23, 0x30	; 48
    31ba:	11 f4       	brne	.+4      	; 0x31c0 <__ftoa_engine+0x130>
    31bc:	8a 95       	dec	r24
    31be:	e6 cf       	rjmp	.-52     	; 0x318c <__ftoa_engine+0xfc>
    31c0:	e8 94       	clt
    31c2:	01 50       	subi	r16, 0x01	; 1
    31c4:	30 f0       	brcs	.+12     	; 0x31d2 <__ftoa_engine+0x142>
    31c6:	08 0f       	add	r16, r24
    31c8:	0a f4       	brpl	.+2      	; 0x31cc <__ftoa_engine+0x13c>
    31ca:	00 27       	eor	r16, r16
    31cc:	02 17       	cp	r16, r18
    31ce:	08 f4       	brcc	.+2      	; 0x31d2 <__ftoa_engine+0x142>
    31d0:	20 2f       	mov	r18, r16
    31d2:	23 95       	inc	r18
    31d4:	02 2f       	mov	r16, r18
    31d6:	7a 33       	cpi	r23, 0x3A	; 58
    31d8:	28 f0       	brcs	.+10     	; 0x31e4 <__ftoa_engine+0x154>
    31da:	79 e3       	ldi	r23, 0x39	; 57
    31dc:	7d 93       	st	X+, r23
    31de:	2a 95       	dec	r18
    31e0:	e9 f7       	brne	.-6      	; 0x31dc <__ftoa_engine+0x14c>
    31e2:	10 c0       	rjmp	.+32     	; 0x3204 <__ftoa_engine+0x174>
    31e4:	7d 93       	st	X+, r23
    31e6:	2a 95       	dec	r18
    31e8:	89 f6       	brne	.-94     	; 0x318c <__ftoa_engine+0xfc>
    31ea:	06 94       	lsr	r0
    31ec:	97 95       	ror	r25
    31ee:	67 95       	ror	r22
    31f0:	37 95       	ror	r19
    31f2:	17 95       	ror	r17
    31f4:	17 94       	ror	r1
    31f6:	e1 18       	sub	r14, r1
    31f8:	f1 0a       	sbc	r15, r17
    31fa:	43 0b       	sbc	r20, r19
    31fc:	56 0b       	sbc	r21, r22
    31fe:	c9 0b       	sbc	r28, r25
    3200:	d0 09       	sbc	r29, r0
    3202:	98 f0       	brcs	.+38     	; 0x322a <__ftoa_engine+0x19a>
    3204:	23 95       	inc	r18
    3206:	7e 91       	ld	r23, -X
    3208:	73 95       	inc	r23
    320a:	7a 33       	cpi	r23, 0x3A	; 58
    320c:	08 f0       	brcs	.+2      	; 0x3210 <__ftoa_engine+0x180>
    320e:	70 e3       	ldi	r23, 0x30	; 48
    3210:	7c 93       	st	X, r23
    3212:	20 13       	cpse	r18, r16
    3214:	b8 f7       	brcc	.-18     	; 0x3204 <__ftoa_engine+0x174>
    3216:	7e 91       	ld	r23, -X
    3218:	70 61       	ori	r23, 0x10	; 16
    321a:	7d 93       	st	X+, r23
    321c:	30 f0       	brcs	.+12     	; 0x322a <__ftoa_engine+0x19a>
    321e:	83 95       	inc	r24
    3220:	71 e3       	ldi	r23, 0x31	; 49
    3222:	7d 93       	st	X+, r23
    3224:	70 e3       	ldi	r23, 0x30	; 48
    3226:	2a 95       	dec	r18
    3228:	e1 f7       	brne	.-8      	; 0x3222 <__ftoa_engine+0x192>
    322a:	11 24       	eor	r1, r1
    322c:	ef 90       	pop	r14
    322e:	ff 90       	pop	r15
    3230:	0f 91       	pop	r16
    3232:	1f 91       	pop	r17
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	99 27       	eor	r25, r25
    323a:	87 fd       	sbrc	r24, 7
    323c:	90 95       	com	r25
    323e:	08 95       	ret

00003240 <strnlen_P>:
    3240:	fc 01       	movw	r30, r24
    3242:	05 90       	lpm	r0, Z+
    3244:	61 50       	subi	r22, 0x01	; 1
    3246:	70 40       	sbci	r23, 0x00	; 0
    3248:	01 10       	cpse	r0, r1
    324a:	d8 f7       	brcc	.-10     	; 0x3242 <strnlen_P+0x2>
    324c:	80 95       	com	r24
    324e:	90 95       	com	r25
    3250:	8e 0f       	add	r24, r30
    3252:	9f 1f       	adc	r25, r31
    3254:	08 95       	ret

00003256 <memcmp>:
    3256:	fb 01       	movw	r30, r22
    3258:	dc 01       	movw	r26, r24
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <memcmp+0xe>
    325c:	8d 91       	ld	r24, X+
    325e:	01 90       	ld	r0, Z+
    3260:	80 19       	sub	r24, r0
    3262:	21 f4       	brne	.+8      	; 0x326c <memcmp+0x16>
    3264:	41 50       	subi	r20, 0x01	; 1
    3266:	50 40       	sbci	r21, 0x00	; 0
    3268:	c8 f7       	brcc	.-14     	; 0x325c <memcmp+0x6>
    326a:	88 1b       	sub	r24, r24
    326c:	99 0b       	sbc	r25, r25
    326e:	08 95       	ret

00003270 <strnlen>:
    3270:	fc 01       	movw	r30, r24
    3272:	61 50       	subi	r22, 0x01	; 1
    3274:	70 40       	sbci	r23, 0x00	; 0
    3276:	01 90       	ld	r0, Z+
    3278:	01 10       	cpse	r0, r1
    327a:	d8 f7       	brcc	.-10     	; 0x3272 <strnlen+0x2>
    327c:	80 95       	com	r24
    327e:	90 95       	com	r25
    3280:	8e 0f       	add	r24, r30
    3282:	9f 1f       	adc	r25, r31
    3284:	08 95       	ret

00003286 <fdevopen>:
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	ec 01       	movw	r28, r24
    3290:	8b 01       	movw	r16, r22
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	31 f4       	brne	.+12     	; 0x32a2 <fdevopen+0x1c>
    3296:	61 15       	cp	r22, r1
    3298:	71 05       	cpc	r23, r1
    329a:	19 f4       	brne	.+6      	; 0x32a2 <fdevopen+0x1c>
    329c:	e0 e0       	ldi	r30, 0x00	; 0
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	36 c0       	rjmp	.+108    	; 0x330e <fdevopen+0x88>
    32a2:	6e e0       	ldi	r22, 0x0E	; 14
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	d2 d0       	rcall	.+420    	; 0x3450 <calloc>
    32ac:	fc 01       	movw	r30, r24
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	a9 f3       	breq	.-22     	; 0x329c <fdevopen+0x16>
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	83 83       	std	Z+3, r24	; 0x03
    32b6:	01 15       	cp	r16, r1
    32b8:	11 05       	cpc	r17, r1
    32ba:	71 f0       	breq	.+28     	; 0x32d8 <fdevopen+0x52>
    32bc:	02 87       	std	Z+10, r16	; 0x0a
    32be:	13 87       	std	Z+11, r17	; 0x0b
    32c0:	81 e8       	ldi	r24, 0x81	; 129
    32c2:	83 83       	std	Z+3, r24	; 0x03
    32c4:	80 91 61 22 	lds	r24, 0x2261
    32c8:	90 91 62 22 	lds	r25, 0x2262
    32cc:	89 2b       	or	r24, r25
    32ce:	21 f4       	brne	.+8      	; 0x32d8 <fdevopen+0x52>
    32d0:	e0 93 61 22 	sts	0x2261, r30
    32d4:	f0 93 62 22 	sts	0x2262, r31
    32d8:	20 97       	sbiw	r28, 0x00	; 0
    32da:	c9 f0       	breq	.+50     	; 0x330e <fdevopen+0x88>
    32dc:	c0 87       	std	Z+8, r28	; 0x08
    32de:	d1 87       	std	Z+9, r29	; 0x09
    32e0:	83 81       	ldd	r24, Z+3	; 0x03
    32e2:	82 60       	ori	r24, 0x02	; 2
    32e4:	83 83       	std	Z+3, r24	; 0x03
    32e6:	80 91 63 22 	lds	r24, 0x2263
    32ea:	90 91 64 22 	lds	r25, 0x2264
    32ee:	89 2b       	or	r24, r25
    32f0:	71 f4       	brne	.+28     	; 0x330e <fdevopen+0x88>
    32f2:	e0 93 63 22 	sts	0x2263, r30
    32f6:	f0 93 64 22 	sts	0x2264, r31
    32fa:	80 91 65 22 	lds	r24, 0x2265
    32fe:	90 91 66 22 	lds	r25, 0x2266
    3302:	89 2b       	or	r24, r25
    3304:	21 f4       	brne	.+8      	; 0x330e <fdevopen+0x88>
    3306:	e0 93 65 22 	sts	0x2265, r30
    330a:	f0 93 66 22 	sts	0x2266, r31
    330e:	cf 01       	movw	r24, r30
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <fputc>:
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	8c 01       	movw	r16, r24
    3324:	eb 01       	movw	r28, r22
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	81 fd       	sbrc	r24, 1
    332a:	03 c0       	rjmp	.+6      	; 0x3332 <fputc+0x18>
    332c:	0f ef       	ldi	r16, 0xFF	; 255
    332e:	1f ef       	ldi	r17, 0xFF	; 255
    3330:	1a c0       	rjmp	.+52     	; 0x3366 <fputc+0x4c>
    3332:	82 ff       	sbrs	r24, 2
    3334:	0d c0       	rjmp	.+26     	; 0x3350 <fputc+0x36>
    3336:	2e 81       	ldd	r18, Y+6	; 0x06
    3338:	3f 81       	ldd	r19, Y+7	; 0x07
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	9d 81       	ldd	r25, Y+5	; 0x05
    333e:	28 17       	cp	r18, r24
    3340:	39 07       	cpc	r19, r25
    3342:	64 f4       	brge	.+24     	; 0x335c <fputc+0x42>
    3344:	e8 81       	ld	r30, Y
    3346:	f9 81       	ldd	r31, Y+1	; 0x01
    3348:	01 93       	st	Z+, r16
    334a:	e8 83       	st	Y, r30
    334c:	f9 83       	std	Y+1, r31	; 0x01
    334e:	06 c0       	rjmp	.+12     	; 0x335c <fputc+0x42>
    3350:	e8 85       	ldd	r30, Y+8	; 0x08
    3352:	f9 85       	ldd	r31, Y+9	; 0x09
    3354:	80 2f       	mov	r24, r16
    3356:	19 95       	eicall
    3358:	89 2b       	or	r24, r25
    335a:	41 f7       	brne	.-48     	; 0x332c <fputc+0x12>
    335c:	8e 81       	ldd	r24, Y+6	; 0x06
    335e:	9f 81       	ldd	r25, Y+7	; 0x07
    3360:	01 96       	adiw	r24, 0x01	; 1
    3362:	8e 83       	std	Y+6, r24	; 0x06
    3364:	9f 83       	std	Y+7, r25	; 0x07
    3366:	c8 01       	movw	r24, r16
    3368:	df 91       	pop	r29
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	08 95       	ret

00003372 <printf>:
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	fe 01       	movw	r30, r28
    337c:	36 96       	adiw	r30, 0x06	; 6
    337e:	61 91       	ld	r22, Z+
    3380:	71 91       	ld	r23, Z+
    3382:	af 01       	movw	r20, r30
    3384:	80 91 63 22 	lds	r24, 0x2263
    3388:	90 91 64 22 	lds	r25, 0x2264
    338c:	d7 da       	rcall	.-2642   	; 0x293c <vfprintf>
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	08 95       	ret

00003394 <__ultoa_invert>:
    3394:	fa 01       	movw	r30, r20
    3396:	aa 27       	eor	r26, r26
    3398:	28 30       	cpi	r18, 0x08	; 8
    339a:	51 f1       	breq	.+84     	; 0x33f0 <__ultoa_invert+0x5c>
    339c:	20 31       	cpi	r18, 0x10	; 16
    339e:	81 f1       	breq	.+96     	; 0x3400 <__ultoa_invert+0x6c>
    33a0:	e8 94       	clt
    33a2:	6f 93       	push	r22
    33a4:	6e 7f       	andi	r22, 0xFE	; 254
    33a6:	6e 5f       	subi	r22, 0xFE	; 254
    33a8:	7f 4f       	sbci	r23, 0xFF	; 255
    33aa:	8f 4f       	sbci	r24, 0xFF	; 255
    33ac:	9f 4f       	sbci	r25, 0xFF	; 255
    33ae:	af 4f       	sbci	r26, 0xFF	; 255
    33b0:	b1 e0       	ldi	r27, 0x01	; 1
    33b2:	3e d0       	rcall	.+124    	; 0x3430 <__ultoa_invert+0x9c>
    33b4:	b4 e0       	ldi	r27, 0x04	; 4
    33b6:	3c d0       	rcall	.+120    	; 0x3430 <__ultoa_invert+0x9c>
    33b8:	67 0f       	add	r22, r23
    33ba:	78 1f       	adc	r23, r24
    33bc:	89 1f       	adc	r24, r25
    33be:	9a 1f       	adc	r25, r26
    33c0:	a1 1d       	adc	r26, r1
    33c2:	68 0f       	add	r22, r24
    33c4:	79 1f       	adc	r23, r25
    33c6:	8a 1f       	adc	r24, r26
    33c8:	91 1d       	adc	r25, r1
    33ca:	a1 1d       	adc	r26, r1
    33cc:	6a 0f       	add	r22, r26
    33ce:	71 1d       	adc	r23, r1
    33d0:	81 1d       	adc	r24, r1
    33d2:	91 1d       	adc	r25, r1
    33d4:	a1 1d       	adc	r26, r1
    33d6:	20 d0       	rcall	.+64     	; 0x3418 <__ultoa_invert+0x84>
    33d8:	09 f4       	brne	.+2      	; 0x33dc <__ultoa_invert+0x48>
    33da:	68 94       	set
    33dc:	3f 91       	pop	r19
    33de:	2a e0       	ldi	r18, 0x0A	; 10
    33e0:	26 9f       	mul	r18, r22
    33e2:	11 24       	eor	r1, r1
    33e4:	30 19       	sub	r19, r0
    33e6:	30 5d       	subi	r19, 0xD0	; 208
    33e8:	31 93       	st	Z+, r19
    33ea:	de f6       	brtc	.-74     	; 0x33a2 <__ultoa_invert+0xe>
    33ec:	cf 01       	movw	r24, r30
    33ee:	08 95       	ret
    33f0:	46 2f       	mov	r20, r22
    33f2:	47 70       	andi	r20, 0x07	; 7
    33f4:	40 5d       	subi	r20, 0xD0	; 208
    33f6:	41 93       	st	Z+, r20
    33f8:	b3 e0       	ldi	r27, 0x03	; 3
    33fa:	0f d0       	rcall	.+30     	; 0x341a <__ultoa_invert+0x86>
    33fc:	c9 f7       	brne	.-14     	; 0x33f0 <__ultoa_invert+0x5c>
    33fe:	f6 cf       	rjmp	.-20     	; 0x33ec <__ultoa_invert+0x58>
    3400:	46 2f       	mov	r20, r22
    3402:	4f 70       	andi	r20, 0x0F	; 15
    3404:	40 5d       	subi	r20, 0xD0	; 208
    3406:	4a 33       	cpi	r20, 0x3A	; 58
    3408:	18 f0       	brcs	.+6      	; 0x3410 <__ultoa_invert+0x7c>
    340a:	49 5d       	subi	r20, 0xD9	; 217
    340c:	31 fd       	sbrc	r19, 1
    340e:	40 52       	subi	r20, 0x20	; 32
    3410:	41 93       	st	Z+, r20
    3412:	02 d0       	rcall	.+4      	; 0x3418 <__ultoa_invert+0x84>
    3414:	a9 f7       	brne	.-22     	; 0x3400 <__ultoa_invert+0x6c>
    3416:	ea cf       	rjmp	.-44     	; 0x33ec <__ultoa_invert+0x58>
    3418:	b4 e0       	ldi	r27, 0x04	; 4
    341a:	a6 95       	lsr	r26
    341c:	97 95       	ror	r25
    341e:	87 95       	ror	r24
    3420:	77 95       	ror	r23
    3422:	67 95       	ror	r22
    3424:	ba 95       	dec	r27
    3426:	c9 f7       	brne	.-14     	; 0x341a <__ultoa_invert+0x86>
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	61 05       	cpc	r22, r1
    342c:	71 05       	cpc	r23, r1
    342e:	08 95       	ret
    3430:	9b 01       	movw	r18, r22
    3432:	ac 01       	movw	r20, r24
    3434:	0a 2e       	mov	r0, r26
    3436:	06 94       	lsr	r0
    3438:	57 95       	ror	r21
    343a:	47 95       	ror	r20
    343c:	37 95       	ror	r19
    343e:	27 95       	ror	r18
    3440:	ba 95       	dec	r27
    3442:	c9 f7       	brne	.-14     	; 0x3436 <__ultoa_invert+0xa2>
    3444:	62 0f       	add	r22, r18
    3446:	73 1f       	adc	r23, r19
    3448:	84 1f       	adc	r24, r20
    344a:	95 1f       	adc	r25, r21
    344c:	a0 1d       	adc	r26, r0
    344e:	08 95       	ret

00003450 <calloc>:
    3450:	0f 93       	push	r16
    3452:	1f 93       	push	r17
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
    3458:	68 9f       	mul	r22, r24
    345a:	80 01       	movw	r16, r0
    345c:	69 9f       	mul	r22, r25
    345e:	10 0d       	add	r17, r0
    3460:	78 9f       	mul	r23, r24
    3462:	10 0d       	add	r17, r0
    3464:	11 24       	eor	r1, r1
    3466:	c8 01       	movw	r24, r16
    3468:	0f d0       	rcall	.+30     	; 0x3488 <malloc>
    346a:	c8 2f       	mov	r28, r24
    346c:	d9 2f       	mov	r29, r25
    346e:	20 97       	sbiw	r28, 0x00	; 0
    3470:	29 f0       	breq	.+10     	; 0x347c <calloc+0x2c>
    3472:	a8 01       	movw	r20, r16
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	8c 2f       	mov	r24, r28
    347a:	40 d1       	rcall	.+640    	; 0x36fc <memset>
    347c:	ce 01       	movw	r24, r28
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	08 95       	ret

00003488 <malloc>:
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	82 30       	cpi	r24, 0x02	; 2
    3492:	91 05       	cpc	r25, r1
    3494:	10 f4       	brcc	.+4      	; 0x349a <malloc+0x12>
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	e0 91 69 22 	lds	r30, 0x2269
    349e:	f0 91 6a 22 	lds	r31, 0x226A
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	c0 e0       	ldi	r28, 0x00	; 0
    34a8:	d0 e0       	ldi	r29, 0x00	; 0
    34aa:	23 c0       	rjmp	.+70     	; 0x34f2 <malloc+0x6a>
    34ac:	40 81       	ld	r20, Z
    34ae:	51 81       	ldd	r21, Z+1	; 0x01
    34b0:	48 17       	cp	r20, r24
    34b2:	59 07       	cpc	r21, r25
    34b4:	a8 f0       	brcs	.+42     	; 0x34e0 <malloc+0x58>
    34b6:	48 17       	cp	r20, r24
    34b8:	59 07       	cpc	r21, r25
    34ba:	61 f4       	brne	.+24     	; 0x34d4 <malloc+0x4c>
    34bc:	82 81       	ldd	r24, Z+2	; 0x02
    34be:	93 81       	ldd	r25, Z+3	; 0x03
    34c0:	20 97       	sbiw	r28, 0x00	; 0
    34c2:	19 f0       	breq	.+6      	; 0x34ca <malloc+0x42>
    34c4:	8a 83       	std	Y+2, r24	; 0x02
    34c6:	9b 83       	std	Y+3, r25	; 0x03
    34c8:	2e c0       	rjmp	.+92     	; 0x3526 <malloc+0x9e>
    34ca:	80 93 69 22 	sts	0x2269, r24
    34ce:	90 93 6a 22 	sts	0x226A, r25
    34d2:	29 c0       	rjmp	.+82     	; 0x3526 <malloc+0x9e>
    34d4:	21 15       	cp	r18, r1
    34d6:	31 05       	cpc	r19, r1
    34d8:	29 f0       	breq	.+10     	; 0x34e4 <malloc+0x5c>
    34da:	42 17       	cp	r20, r18
    34dc:	53 07       	cpc	r21, r19
    34de:	10 f0       	brcs	.+4      	; 0x34e4 <malloc+0x5c>
    34e0:	a9 01       	movw	r20, r18
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <malloc+0x60>
    34e4:	be 01       	movw	r22, r28
    34e6:	df 01       	movw	r26, r30
    34e8:	02 81       	ldd	r16, Z+2	; 0x02
    34ea:	13 81       	ldd	r17, Z+3	; 0x03
    34ec:	ef 01       	movw	r28, r30
    34ee:	9a 01       	movw	r18, r20
    34f0:	f8 01       	movw	r30, r16
    34f2:	30 97       	sbiw	r30, 0x00	; 0
    34f4:	d9 f6       	brne	.-74     	; 0x34ac <malloc+0x24>
    34f6:	21 15       	cp	r18, r1
    34f8:	31 05       	cpc	r19, r1
    34fa:	09 f1       	breq	.+66     	; 0x353e <malloc+0xb6>
    34fc:	28 1b       	sub	r18, r24
    34fe:	39 0b       	sbc	r19, r25
    3500:	24 30       	cpi	r18, 0x04	; 4
    3502:	31 05       	cpc	r19, r1
    3504:	90 f4       	brcc	.+36     	; 0x352a <malloc+0xa2>
    3506:	12 96       	adiw	r26, 0x02	; 2
    3508:	8d 91       	ld	r24, X+
    350a:	9c 91       	ld	r25, X
    350c:	13 97       	sbiw	r26, 0x03	; 3
    350e:	61 15       	cp	r22, r1
    3510:	71 05       	cpc	r23, r1
    3512:	21 f0       	breq	.+8      	; 0x351c <malloc+0x94>
    3514:	fb 01       	movw	r30, r22
    3516:	82 83       	std	Z+2, r24	; 0x02
    3518:	93 83       	std	Z+3, r25	; 0x03
    351a:	04 c0       	rjmp	.+8      	; 0x3524 <malloc+0x9c>
    351c:	80 93 69 22 	sts	0x2269, r24
    3520:	90 93 6a 22 	sts	0x226A, r25
    3524:	fd 01       	movw	r30, r26
    3526:	32 96       	adiw	r30, 0x02	; 2
    3528:	44 c0       	rjmp	.+136    	; 0x35b2 <malloc+0x12a>
    352a:	fd 01       	movw	r30, r26
    352c:	e2 0f       	add	r30, r18
    352e:	f3 1f       	adc	r31, r19
    3530:	81 93       	st	Z+, r24
    3532:	91 93       	st	Z+, r25
    3534:	22 50       	subi	r18, 0x02	; 2
    3536:	31 09       	sbc	r19, r1
    3538:	2d 93       	st	X+, r18
    353a:	3c 93       	st	X, r19
    353c:	3a c0       	rjmp	.+116    	; 0x35b2 <malloc+0x12a>
    353e:	20 91 67 22 	lds	r18, 0x2267
    3542:	30 91 68 22 	lds	r19, 0x2268
    3546:	23 2b       	or	r18, r19
    3548:	41 f4       	brne	.+16     	; 0x355a <malloc+0xd2>
    354a:	20 91 02 20 	lds	r18, 0x2002
    354e:	30 91 03 20 	lds	r19, 0x2003
    3552:	20 93 67 22 	sts	0x2267, r18
    3556:	30 93 68 22 	sts	0x2268, r19
    355a:	20 91 00 20 	lds	r18, 0x2000
    355e:	30 91 01 20 	lds	r19, 0x2001
    3562:	21 15       	cp	r18, r1
    3564:	31 05       	cpc	r19, r1
    3566:	41 f4       	brne	.+16     	; 0x3578 <malloc+0xf0>
    3568:	2d b7       	in	r18, 0x3d	; 61
    356a:	3e b7       	in	r19, 0x3e	; 62
    356c:	40 91 04 20 	lds	r20, 0x2004
    3570:	50 91 05 20 	lds	r21, 0x2005
    3574:	24 1b       	sub	r18, r20
    3576:	35 0b       	sbc	r19, r21
    3578:	e0 91 67 22 	lds	r30, 0x2267
    357c:	f0 91 68 22 	lds	r31, 0x2268
    3580:	e2 17       	cp	r30, r18
    3582:	f3 07       	cpc	r31, r19
    3584:	a0 f4       	brcc	.+40     	; 0x35ae <malloc+0x126>
    3586:	2e 1b       	sub	r18, r30
    3588:	3f 0b       	sbc	r19, r31
    358a:	28 17       	cp	r18, r24
    358c:	39 07       	cpc	r19, r25
    358e:	78 f0       	brcs	.+30     	; 0x35ae <malloc+0x126>
    3590:	ac 01       	movw	r20, r24
    3592:	4e 5f       	subi	r20, 0xFE	; 254
    3594:	5f 4f       	sbci	r21, 0xFF	; 255
    3596:	24 17       	cp	r18, r20
    3598:	35 07       	cpc	r19, r21
    359a:	48 f0       	brcs	.+18     	; 0x35ae <malloc+0x126>
    359c:	4e 0f       	add	r20, r30
    359e:	5f 1f       	adc	r21, r31
    35a0:	40 93 67 22 	sts	0x2267, r20
    35a4:	50 93 68 22 	sts	0x2268, r21
    35a8:	81 93       	st	Z+, r24
    35aa:	91 93       	st	Z+, r25
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <malloc+0x12a>
    35ae:	e0 e0       	ldi	r30, 0x00	; 0
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	cf 01       	movw	r24, r30
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	08 95       	ret

000035be <free>:
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	00 97       	sbiw	r24, 0x00	; 0
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <free+0x12>
    35ce:	8f c0       	rjmp	.+286    	; 0x36ee <free+0x130>
    35d0:	dc 01       	movw	r26, r24
    35d2:	12 97       	sbiw	r26, 0x02	; 2
    35d4:	12 96       	adiw	r26, 0x02	; 2
    35d6:	1d 92       	st	X+, r1
    35d8:	1c 92       	st	X, r1
    35da:	13 97       	sbiw	r26, 0x03	; 3
    35dc:	e0 90 69 22 	lds	r14, 0x2269
    35e0:	f0 90 6a 22 	lds	r15, 0x226A
    35e4:	e1 14       	cp	r14, r1
    35e6:	f1 04       	cpc	r15, r1
    35e8:	89 f4       	brne	.+34     	; 0x360c <free+0x4e>
    35ea:	2d 91       	ld	r18, X+
    35ec:	3c 91       	ld	r19, X
    35ee:	11 97       	sbiw	r26, 0x01	; 1
    35f0:	28 0f       	add	r18, r24
    35f2:	39 1f       	adc	r19, r25
    35f4:	80 91 67 22 	lds	r24, 0x2267
    35f8:	90 91 68 22 	lds	r25, 0x2268
    35fc:	82 17       	cp	r24, r18
    35fe:	93 07       	cpc	r25, r19
    3600:	89 f5       	brne	.+98     	; 0x3664 <free+0xa6>
    3602:	a0 93 67 22 	sts	0x2267, r26
    3606:	b0 93 68 22 	sts	0x2268, r27
    360a:	71 c0       	rjmp	.+226    	; 0x36ee <free+0x130>
    360c:	e7 01       	movw	r28, r14
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	01 c0       	rjmp	.+2      	; 0x3616 <free+0x58>
    3614:	ea 01       	movw	r28, r20
    3616:	ca 17       	cp	r28, r26
    3618:	db 07       	cpc	r29, r27
    361a:	38 f4       	brcc	.+14     	; 0x362a <free+0x6c>
    361c:	4a 81       	ldd	r20, Y+2	; 0x02
    361e:	5b 81       	ldd	r21, Y+3	; 0x03
    3620:	9e 01       	movw	r18, r28
    3622:	41 15       	cp	r20, r1
    3624:	51 05       	cpc	r21, r1
    3626:	b1 f7       	brne	.-20     	; 0x3614 <free+0x56>
    3628:	22 c0       	rjmp	.+68     	; 0x366e <free+0xb0>
    362a:	bc 01       	movw	r22, r24
    362c:	62 50       	subi	r22, 0x02	; 2
    362e:	71 09       	sbc	r23, r1
    3630:	fb 01       	movw	r30, r22
    3632:	c2 83       	std	Z+2, r28	; 0x02
    3634:	d3 83       	std	Z+3, r29	; 0x03
    3636:	00 81       	ld	r16, Z
    3638:	11 81       	ldd	r17, Z+1	; 0x01
    363a:	ac 01       	movw	r20, r24
    363c:	40 0f       	add	r20, r16
    363e:	51 1f       	adc	r21, r17
    3640:	4c 17       	cp	r20, r28
    3642:	5d 07       	cpc	r21, r29
    3644:	61 f4       	brne	.+24     	; 0x365e <free+0xa0>
    3646:	48 81       	ld	r20, Y
    3648:	59 81       	ldd	r21, Y+1	; 0x01
    364a:	40 0f       	add	r20, r16
    364c:	51 1f       	adc	r21, r17
    364e:	4e 5f       	subi	r20, 0xFE	; 254
    3650:	5f 4f       	sbci	r21, 0xFF	; 255
    3652:	40 83       	st	Z, r20
    3654:	51 83       	std	Z+1, r21	; 0x01
    3656:	4a 81       	ldd	r20, Y+2	; 0x02
    3658:	5b 81       	ldd	r21, Y+3	; 0x03
    365a:	42 83       	std	Z+2, r20	; 0x02
    365c:	53 83       	std	Z+3, r21	; 0x03
    365e:	21 15       	cp	r18, r1
    3660:	31 05       	cpc	r19, r1
    3662:	29 f4       	brne	.+10     	; 0x366e <free+0xb0>
    3664:	a0 93 69 22 	sts	0x2269, r26
    3668:	b0 93 6a 22 	sts	0x226A, r27
    366c:	40 c0       	rjmp	.+128    	; 0x36ee <free+0x130>
    366e:	f9 01       	movw	r30, r18
    3670:	a2 83       	std	Z+2, r26	; 0x02
    3672:	b3 83       	std	Z+3, r27	; 0x03
    3674:	e9 01       	movw	r28, r18
    3676:	69 91       	ld	r22, Y+
    3678:	79 91       	ld	r23, Y+
    367a:	c6 0f       	add	r28, r22
    367c:	d7 1f       	adc	r29, r23
    367e:	ac 17       	cp	r26, r28
    3680:	bd 07       	cpc	r27, r29
    3682:	79 f4       	brne	.+30     	; 0x36a2 <free+0xe4>
    3684:	dc 01       	movw	r26, r24
    3686:	5e 91       	ld	r21, -X
    3688:	4e 91       	ld	r20, -X
    368a:	46 0f       	add	r20, r22
    368c:	57 1f       	adc	r21, r23
    368e:	4e 5f       	subi	r20, 0xFE	; 254
    3690:	5f 4f       	sbci	r21, 0xFF	; 255
    3692:	40 83       	st	Z, r20
    3694:	51 83       	std	Z+1, r21	; 0x01
    3696:	12 96       	adiw	r26, 0x02	; 2
    3698:	8d 91       	ld	r24, X+
    369a:	9c 91       	ld	r25, X
    369c:	13 97       	sbiw	r26, 0x03	; 3
    369e:	82 83       	std	Z+2, r24	; 0x02
    36a0:	93 83       	std	Z+3, r25	; 0x03
    36a2:	a0 e0       	ldi	r26, 0x00	; 0
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <free+0xee>
    36a8:	d7 01       	movw	r26, r14
    36aa:	7c 01       	movw	r14, r24
    36ac:	f7 01       	movw	r30, r14
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	c9 f7       	brne	.-14     	; 0x36a8 <free+0xea>
    36b6:	c7 01       	movw	r24, r14
    36b8:	02 96       	adiw	r24, 0x02	; 2
    36ba:	20 81       	ld	r18, Z
    36bc:	31 81       	ldd	r19, Z+1	; 0x01
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	20 91 67 22 	lds	r18, 0x2267
    36c6:	30 91 68 22 	lds	r19, 0x2268
    36ca:	28 17       	cp	r18, r24
    36cc:	39 07       	cpc	r19, r25
    36ce:	79 f4       	brne	.+30     	; 0x36ee <free+0x130>
    36d0:	10 97       	sbiw	r26, 0x00	; 0
    36d2:	29 f4       	brne	.+10     	; 0x36de <free+0x120>
    36d4:	10 92 69 22 	sts	0x2269, r1
    36d8:	10 92 6a 22 	sts	0x226A, r1
    36dc:	04 c0       	rjmp	.+8      	; 0x36e6 <free+0x128>
    36de:	12 96       	adiw	r26, 0x02	; 2
    36e0:	1d 92       	st	X+, r1
    36e2:	1c 92       	st	X, r1
    36e4:	13 97       	sbiw	r26, 0x03	; 3
    36e6:	e0 92 67 22 	sts	0x2267, r14
    36ea:	f0 92 68 22 	sts	0x2268, r15
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	08 95       	ret

000036fc <memset>:
    36fc:	dc 01       	movw	r26, r24
    36fe:	01 c0       	rjmp	.+2      	; 0x3702 <memset+0x6>
    3700:	6d 93       	st	X+, r22
    3702:	41 50       	subi	r20, 0x01	; 1
    3704:	50 40       	sbci	r21, 0x00	; 0
    3706:	e0 f7       	brcc	.-8      	; 0x3700 <memset+0x4>
    3708:	08 95       	ret

0000370a <_exit>:
    370a:	f8 94       	cli

0000370c <__stop_program>:
    370c:	ff cf       	rjmp	.-2      	; 0x370c <__stop_program>
